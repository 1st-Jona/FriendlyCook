/* The following code was generated by JFlex 1.4.3 on 11/12/20 12:07 AM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/12/20 12:07 AM from the specification file
 * <tt>C:/FriendlyCook/FriendlyCook/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\45\2\0\1\3\22\0\1\5\7\0\1\46\1\50"+
    "\2\0\1\4\1\47\1\0\1\44\12\1\7\0\1\13\7\2\1\16"+
    "\1\15\3\2\1\14\1\26\1\2\1\31\1\2\1\6\7\2\4\0"+
    "\2\2\1\7\1\2\1\33\1\37\1\22\1\43\1\2\1\32\1\12"+
    "\1\11\1\2\1\34\1\23\1\10\1\24\1\36\1\27\1\21\1\17"+
    "\1\20\1\30\1\42\2\2\1\25\1\35\167\2\u1f2a\0\1\40\1\41"+
    "\udfe2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\2\4\6\1\1\5\11\1"+
    "\1\2\1\1\2\2\1\6\6\1\1\7\4\1\1\10"+
    "\5\1\1\11\4\1\1\12\1\1\1\0\1\1\1\4"+
    "\1\0\7\1\1\13\2\1\1\14\5\1\1\15\1\16"+
    "\2\1\1\17\1\1\1\20\1\0\1\1\1\0\2\1"+
    "\1\21\6\1\1\0\1\1\1\3\1\22\3\1\1\23"+
    "\1\1\1\0\1\24\1\21\1\25\1\0\1\26\17\0"+
    "\1\27\2\0\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\173\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386"+
    "\0\u03af\0\u03d8\0\244\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5"+
    "\0\u04ce\0\173\0\u04f7\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4"+
    "\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c"+
    "\0\u0735\0\173\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b"+
    "\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\173\0\u094a"+
    "\0\u0973\0\173\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\173"+
    "\0\173\0\u0a69\0\u0a92\0\173\0\u0abb\0\173\0\u0ae4\0\u0b0d"+
    "\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\u0c55"+
    "\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\51\0\173\0\u0d22\0\u0d4b"+
    "\0\u0d74\0\173\0\u0d9d\0\u0dc6\0\173\0\173\0\173\0\u0def"+
    "\0\173\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e"+
    "\0\u0f37\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u102d\0\u1056"+
    "\0\51\0\u107f\0\u10a8\0\51";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\4"+
    "\1\10\6\4\1\11\1\12\1\4\1\13\1\4\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\4\1\25\1\26\1\27\1\2\1\4\1\30\1\31"+
    "\1\5\1\32\2\2\52\0\1\3\51\0\1\4\3\0"+
    "\32\4\2\0\2\4\10\0\3\5\37\0\1\5\6\0"+
    "\2\5\1\33\37\0\1\5\5\0\1\4\3\0\1\4"+
    "\1\34\3\4\1\35\24\4\2\0\2\4\7\0\1\4"+
    "\3\0\22\4\1\36\7\4\2\0\2\4\7\0\1\4"+
    "\3\0\1\4\1\34\2\4\1\37\7\4\1\40\15\4"+
    "\2\0\2\4\7\0\1\4\3\0\13\4\1\41\16\4"+
    "\2\0\2\4\7\0\1\4\3\0\26\4\1\42\3\4"+
    "\2\0\2\4\7\0\1\4\3\0\2\4\1\43\14\4"+
    "\1\44\5\4\1\45\4\4\2\0\2\4\7\0\1\4"+
    "\3\0\17\4\1\44\12\4\2\0\2\4\7\0\1\4"+
    "\3\0\22\4\1\46\7\4\2\0\2\4\7\0\1\4"+
    "\3\0\2\4\1\47\27\4\2\0\2\4\7\0\1\4"+
    "\3\0\22\4\1\50\7\4\2\0\2\4\7\0\1\4"+
    "\3\0\1\4\1\51\30\4\2\0\2\4\7\0\1\4"+
    "\3\0\1\4\1\52\2\4\1\53\15\4\1\54\7\4"+
    "\2\0\2\4\7\0\1\4\3\0\1\4\1\55\14\4"+
    "\1\56\13\4\2\0\2\4\7\0\1\4\3\0\14\4"+
    "\1\57\1\4\1\60\13\4\2\0\2\4\7\0\1\4"+
    "\3\0\4\4\1\61\7\4\1\62\1\4\1\63\13\4"+
    "\2\0\2\4\24\0\1\64\33\0\1\4\3\0\1\4"+
    "\1\65\30\4\2\0\2\4\51\0\1\66\53\0\1\67"+
    "\3\0\1\4\3\0\2\4\1\70\27\4\2\0\2\4"+
    "\7\0\1\4\3\0\6\4\1\71\23\4\2\0\2\4"+
    "\7\0\1\4\3\0\14\4\1\72\15\4\2\0\2\4"+
    "\7\0\1\4\3\0\14\4\1\73\15\4\2\0\2\4"+
    "\7\0\1\4\3\0\4\4\1\74\25\4\2\0\2\4"+
    "\7\0\1\4\3\0\1\4\1\75\12\4\1\63\15\4"+
    "\2\0\2\4\7\0\1\4\3\0\25\4\1\76\4\4"+
    "\2\0\2\4\7\0\1\4\3\0\14\4\1\77\15\4"+
    "\2\0\2\4\7\0\1\4\3\0\24\4\1\100\5\4"+
    "\2\0\2\4\7\0\1\4\3\0\4\4\1\101\25\4"+
    "\2\0\2\4\7\0\1\4\3\0\1\4\1\102\30\4"+
    "\2\0\2\4\7\0\1\4\3\0\4\4\1\103\25\4"+
    "\2\0\2\4\7\0\1\4\3\0\25\4\1\104\4\4"+
    "\2\0\2\4\7\0\1\4\3\0\12\4\1\105\17\4"+
    "\2\0\2\4\7\0\1\4\3\0\2\4\1\106\27\4"+
    "\2\0\2\4\7\0\1\4\3\0\1\4\1\107\30\4"+
    "\2\0\2\4\7\0\1\4\3\0\11\4\1\110\20\4"+
    "\2\0\2\4\7\0\1\4\3\0\11\4\1\111\20\4"+
    "\2\0\2\4\7\0\1\4\3\0\30\4\1\112\1\113"+
    "\2\0\2\4\7\0\1\4\3\0\13\4\1\114\16\4"+
    "\2\0\2\4\7\0\1\4\3\0\14\4\1\115\15\4"+
    "\2\0\2\4\7\0\1\4\3\0\11\4\1\116\13\4"+
    "\1\76\4\4\2\0\2\4\35\0\1\117\22\0\1\4"+
    "\3\0\32\4\2\0\1\120\1\4\5\0\45\66\1\0"+
    "\3\66\1\0\1\121\51\0\1\4\3\0\3\4\1\122"+
    "\26\4\2\0\2\4\7\0\1\4\3\0\7\4\1\123"+
    "\22\4\2\0\2\4\7\0\1\4\3\0\32\4\2\0"+
    "\1\76\1\4\7\0\1\4\3\0\12\4\1\76\17\4"+
    "\2\0\2\4\7\0\1\4\3\0\11\4\1\116\20\4"+
    "\2\0\2\4\7\0\1\4\3\0\14\4\1\124\15\4"+
    "\2\0\2\4\7\0\1\4\3\0\14\4\1\116\15\4"+
    "\2\0\2\4\7\0\1\4\3\0\16\4\1\116\13\4"+
    "\2\0\2\4\7\0\1\4\3\0\2\4\1\43\11\4"+
    "\1\125\15\4\2\0\2\4\7\0\1\4\3\0\14\4"+
    "\1\125\15\4\2\0\2\4\7\0\1\4\3\0\14\4"+
    "\1\126\15\4\2\0\2\4\7\0\1\4\3\0\16\4"+
    "\1\127\13\4\2\0\2\4\7\0\1\4\3\0\25\4"+
    "\1\100\4\4\2\0\2\4\7\0\1\4\3\0\12\4"+
    "\1\130\17\4\2\0\2\4\7\0\1\4\3\0\11\4"+
    "\1\131\20\4\2\0\2\4\7\0\1\4\3\0\4\4"+
    "\1\132\25\4\2\0\2\4\7\0\1\4\3\0\27\4"+
    "\1\116\2\4\2\0\2\4\24\0\1\133\33\0\1\4"+
    "\3\0\16\4\1\134\13\4\2\0\2\4\6\0\1\121"+
    "\46\0\1\135\2\0\1\4\3\0\4\4\1\136\25\4"+
    "\2\0\2\4\7\0\1\4\3\0\10\4\1\136\21\4"+
    "\2\0\2\4\7\0\1\4\3\0\15\4\1\137\14\4"+
    "\2\0\2\4\7\0\1\4\3\0\13\4\1\140\16\4"+
    "\2\0\2\4\7\0\1\4\3\0\13\4\1\141\16\4"+
    "\2\0\2\4\7\0\1\4\3\0\13\4\1\43\16\4"+
    "\2\0\2\4\7\0\1\4\3\0\13\4\1\100\16\4"+
    "\2\0\2\4\7\0\1\4\3\0\4\4\1\142\25\4"+
    "\2\0\2\4\7\0\1\4\3\0\31\4\1\143\2\0"+
    "\2\4\37\0\1\144\20\0\1\4\3\0\13\4\1\145"+
    "\16\4\2\0\2\4\7\0\1\4\3\0\14\4\1\146"+
    "\15\4\2\0\2\4\7\0\1\4\3\0\16\4\1\147"+
    "\13\4\2\0\2\4\7\0\1\4\1\0\1\150\1\0"+
    "\32\4\2\0\2\4\7\0\1\4\3\0\16\4\1\151"+
    "\13\4\2\0\2\4\17\0\1\152\57\0\1\153\66\0"+
    "\1\154\33\0\1\155\50\0\1\156\35\0\1\157\74\0"+
    "\1\160\51\0\1\161\23\0\1\162\53\0\1\163\61\0"+
    "\1\164\62\0\1\165\22\0\1\166\50\0\1\167\62\0"+
    "\1\170\50\0\1\171\53\0\1\172\34\0\1\173\101\0"+
    "\1\174\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4305];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\61\1\1\0\2\1\1\0\27\1\1\0"+
    "\1\1\1\0\11\1\1\0\1\1\1\11\6\1\1\0"+
    "\3\1\1\0\1\1\17\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { lexeme=yytext(); return PEDIDO;
          }
        case 25: break;
        case 23: 
          { lexeme=yytext(); return HACER;
          }
        case 26: break;
        case 20: 
          { lexeme = yytext(); return FAVOR;
          }
        case 27: break;
        case 8: 
          { lexeme=yytext(); return CANT_UN;
          }
        case 28: break;
        case 21: 
          { lexeme=yytext(); return QUIERO;
          }
        case 29: break;
        case 19: 
          { lexeme=yytext(); return PEPSI;
          }
        case 30: break;
        case 14: 
          { lexeme=yytext(); return LOS;
          }
        case 31: break;
        case 16: 
          { lexeme=yytext(); return CANT_PLURALES;
          }
        case 32: break;
        case 7: 
          { lexeme=yytext(); return EL;
          }
        case 33: break;
        case 15: 
          { lexeme = yytext(); return POR;
          }
        case 34: break;
        case 10: 
          { lexeme=yytext(); return DE;
          }
        case 35: break;
        case 6: 
          { lexeme=yytext(); return Coma;
          }
        case 36: break;
        case 9: 
          { lexeme=yytext(); return LA;
          }
        case 37: break;
        case 11: 
          { lexeme=yytext(); return OYE;
          }
        case 38: break;
        case 13: 
          { lexeme=yytext(); return LAS;
          }
        case 39: break;
        case 1: 
          { lexeme=yytext(); return CADENA;
          }
        case 40: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 41: break;
        case 24: 
          { lexeme=yytext(); return SUSHI_CAMARON;
          }
        case 42: break;
        case 5: 
          { lexeme=yytext(); return Y;
          }
        case 43: break;
        case 2: 
          { return ERROR;
          }
        case 44: break;
        case 4: 
          { /*Ignore*/
          }
        case 45: break;
        case 12: 
          { lexeme=yytext(); return CANT_UNA;
          }
        case 46: break;
        case 17: 
          { lexeme=yytext(); return TRAER;
          }
        case 47: break;
        case 18: 
          { lexeme=yytext(); return SANJI;
          }
        case 48: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
