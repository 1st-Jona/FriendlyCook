/* The following code was generated by JFlex 1.4.3 on 14/12/20 07:23 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/12/20 07:23 PM from the specification file
 * <tt>C:/FriendlyCook/FriendlyCook/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\50\2\0\1\3\22\0\1\5\7\0\1\51\1\53"+
    "\2\0\1\4\1\52\1\0\1\47\12\1\7\0\1\13\7\2\1\16"+
    "\1\15\3\2\1\14\1\26\1\2\1\31\1\2\1\6\7\2\4\0"+
    "\2\2\1\7\1\42\1\33\1\37\1\22\1\45\1\43\1\32\1\12"+
    "\1\11\1\44\1\34\1\23\1\10\1\24\1\36\1\27\1\21\1\17"+
    "\1\20\1\30\1\41\1\2\1\46\1\25\1\35\166\2\1\40\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\2\4\10\1\1\5\14\1"+
    "\2\2\1\6\13\1\1\7\11\1\1\10\10\1\1\11"+
    "\7\1\1\12\10\1\1\4\1\0\22\1\1\13\2\1"+
    "\1\14\16\1\1\15\1\1\1\16\4\1\1\17\2\1"+
    "\1\20\3\1\1\21\4\1\1\0\4\1\1\22\1\1"+
    "\1\23\1\1\1\24\1\25\5\1\1\26\1\1\1\27"+
    "\1\30\10\1\1\31\7\1\1\0\3\1\1\24\1\32"+
    "\1\33\6\1\1\3\1\34\1\1\1\35\1\36\1\1"+
    "\1\37\13\1\1\40\1\1\1\41\1\1\1\0\4\1"+
    "\2\0\1\42\4\1\1\43\3\1\1\0\4\1\1\44"+
    "\1\45\1\1\1\0\3\1\1\46\1\0\1\47\1\50"+
    "\2\1\2\0\1\51\3\1\1\0\2\1\1\0\3\1"+
    "\1\52\1\1\2\0\1\53\1\1\1\0\1\54\1\1"+
    "\2\0\1\55\1\1\1\56\1\0\1\57\1\1\1\0"+
    "\1\60\1\61\1\62\1\1\2\0\1\1\1\0\1\63"+
    "\5\0\1\64\1\0\1\65\1\0\1\1\2\0\1\1"+
    "\1\66\11\0\1\1\2\0\1\67\11\0\1\70\3\0"+
    "\1\71\3\0\1\72\1\0\1\73\5\0\1\74\1\75"+
    "\1\76\10\0\1\77\1\100\4\0\1\101\2\0\1\102"+
    "\3\0\1\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[357];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\204\0\u0268"+
    "\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8"+
    "\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\260\0\u04d0\0\u04fc"+
    "\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c"+
    "\0\u0688\0\204\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790"+
    "\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0"+
    "\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50"+
    "\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\204\0\u0b2c\0\u0b58\0\u0b84"+
    "\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4"+
    "\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44"+
    "\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4"+
    "\0\u0fd0\0\204\0\u0ffc\0\u1028\0\204\0\u1054\0\u1080\0\u10ac"+
    "\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c"+
    "\0\u1238\0\u1264\0\u1290\0\204\0\u12bc\0\204\0\u12e8\0\u1314"+
    "\0\u1340\0\u136c\0\204\0\u1398\0\u13c4\0\204\0\u13f0\0\u141c"+
    "\0\u1448\0\204\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550"+
    "\0\u157c\0\u15a8\0\u15d4\0\204\0\u1600\0\204\0\u162c\0\u0ad4"+
    "\0\204\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708\0\204\0\u1734"+
    "\0\204\0\204\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c"+
    "\0\u1868\0\u1894\0\204\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970"+
    "\0\u199c\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78\0\204\0\204"+
    "\0\204\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\54"+
    "\0\204\0\u1bac\0\204\0\204\0\u1bd8\0\204\0\u1c04\0\u1c30"+
    "\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38\0\u1d64\0\u1d90"+
    "\0\u1dbc\0\204\0\u1de8\0\204\0\u1e14\0\u1e40\0\u1e6c\0\u1e98"+
    "\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\204\0\u1f74\0\u1fa0\0\u1fcc"+
    "\0\u1ff8\0\204\0\u2024\0\u2050\0\u207c\0\u20a8\0\u20d4\0\u2100"+
    "\0\u212c\0\u2158\0\204\0\204\0\u2184\0\u21b0\0\u21dc\0\u2208"+
    "\0\u2234\0\204\0\u2260\0\204\0\204\0\u228c\0\u22b8\0\u22e4"+
    "\0\u2310\0\204\0\u233c\0\u2368\0\u2394\0\u23c0\0\u23ec\0\u2418"+
    "\0\u2444\0\u2470\0\u249c\0\u24c8\0\204\0\u24f4\0\u2520\0\u254c"+
    "\0\204\0\u2578\0\u25a4\0\204\0\u25d0\0\u25fc\0\u2628\0\204"+
    "\0\u2654\0\204\0\u2680\0\204\0\u26ac\0\u26d8\0\204\0\204"+
    "\0\204\0\u2704\0\u2730\0\u275c\0\u2788\0\u27b4\0\204\0\u27e0"+
    "\0\u280c\0\u2838\0\u2864\0\u2890\0\204\0\u28bc\0\204\0\u28e8"+
    "\0\u2914\0\u2940\0\u296c\0\u2998\0\54\0\u29c4\0\u29f0\0\u2a1c"+
    "\0\u2a48\0\u2a74\0\u2aa0\0\u2acc\0\u2af8\0\u2b24\0\u2b50\0\u2b7c"+
    "\0\u2ba8\0\204\0\u2bd4\0\u2c00\0\u2c2c\0\u2c58\0\u2c84\0\u2cb0"+
    "\0\u2cdc\0\u2d08\0\u2d34\0\204\0\u2d60\0\u2d8c\0\u2db8\0\54"+
    "\0\u2de4\0\u2e10\0\u2e3c\0\54\0\u2e68\0\54\0\u2e94\0\u2ec0"+
    "\0\u2eec\0\u2f18\0\u2f44\0\54\0\54\0\54\0\u2f70\0\u2f9c"+
    "\0\u2fc8\0\u2ff4\0\u3020\0\u304c\0\u3078\0\u30a4\0\54\0\54"+
    "\0\u30d0\0\u30fc\0\u3128\0\u3154\0\54\0\u3180\0\u31ac\0\54"+
    "\0\u31d8\0\u3204\0\u3230\0\54\0\54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[357];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\4"+
    "\1\10\1\11\5\4\1\12\1\13\1\4\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\4\1\27\1\30\1\4\1\31\1\32\2\4"+
    "\1\33\1\4\1\34\1\5\1\35\2\2\55\0\1\3"+
    "\54\0\1\4\3\0\41\4\10\0\3\5\42\0\1\5"+
    "\6\0\2\5\1\36\42\0\1\5\5\0\1\4\3\0"+
    "\1\4\1\37\3\4\1\40\33\4\7\0\1\4\3\0"+
    "\1\4\1\41\20\4\1\42\16\4\7\0\1\4\3\0"+
    "\22\4\1\43\16\4\7\0\1\4\3\0\1\4\1\37"+
    "\2\4\1\44\7\4\1\45\5\4\1\46\16\4\7\0"+
    "\1\4\3\0\13\4\1\47\1\50\24\4\7\0\1\4"+
    "\3\0\2\4\1\51\23\4\1\52\11\4\1\53\7\0"+
    "\1\4\3\0\1\4\1\54\2\4\1\55\7\4\1\56"+
    "\5\4\1\57\16\4\7\0\1\4\3\0\2\4\1\60"+
    "\14\4\1\61\5\4\1\62\13\4\7\0\1\4\3\0"+
    "\17\4\1\61\21\4\7\0\1\4\3\0\22\4\1\63"+
    "\16\4\7\0\1\4\3\0\2\4\1\64\36\4\7\0"+
    "\1\4\3\0\22\4\1\65\16\4\7\0\1\4\3\0"+
    "\1\4\1\66\12\4\1\67\24\4\7\0\1\4\3\0"+
    "\1\4\1\70\2\4\1\71\11\4\1\72\3\4\1\73"+
    "\1\4\1\74\14\4\7\0\1\4\3\0\1\4\1\75"+
    "\2\4\1\76\11\4\1\77\22\4\7\0\1\4\3\0"+
    "\4\4\1\100\7\4\1\101\1\4\1\102\22\4\7\0"+
    "\1\4\3\0\1\4\1\103\2\4\1\104\7\4\1\105"+
    "\1\4\1\106\22\4\7\0\1\4\3\0\1\4\1\107"+
    "\2\4\1\110\7\4\1\111\24\4\7\0\1\4\3\0"+
    "\16\4\1\112\22\4\7\0\1\4\3\0\1\4\1\113"+
    "\11\4\1\114\2\4\1\115\22\4\54\0\1\116\56\0"+
    "\1\117\3\0\1\4\3\0\2\4\1\120\36\4\7\0"+
    "\1\4\3\0\6\4\1\121\32\4\7\0\1\4\3\0"+
    "\13\4\1\122\25\4\7\0\1\4\3\0\14\4\1\123"+
    "\24\4\7\0\1\4\3\0\35\4\1\124\3\4\7\0"+
    "\1\4\3\0\14\4\1\125\24\4\7\0\1\4\3\0"+
    "\4\4\1\126\34\4\7\0\1\4\3\0\11\4\1\127"+
    "\27\4\7\0\1\4\3\0\1\4\1\130\12\4\1\131"+
    "\24\4\7\0\1\4\3\0\13\4\1\132\25\4\7\0"+
    "\1\4\3\0\11\4\1\133\27\4\7\0\1\4\3\0"+
    "\30\4\1\134\10\4\7\0\1\4\3\0\13\4\1\135"+
    "\25\4\7\0\1\4\3\0\13\4\1\136\25\4\7\0"+
    "\1\4\3\0\2\4\1\137\36\4\7\0\1\4\3\0"+
    "\14\4\1\140\24\4\7\0\1\4\3\0\25\4\1\141"+
    "\13\4\7\0\1\4\3\0\14\4\1\142\24\4\7\0"+
    "\1\4\3\0\24\4\1\143\14\4\7\0\1\4\3\0"+
    "\4\4\1\144\34\4\7\0\1\4\3\0\1\4\1\145"+
    "\37\4\7\0\1\4\3\0\4\4\1\146\34\4\7\0"+
    "\1\4\3\0\15\4\1\147\7\4\1\150\13\4\7\0"+
    "\1\4\3\0\26\4\1\151\12\4\7\0\1\4\3\0"+
    "\12\4\1\152\1\153\1\4\1\154\21\4\1\155\1\4"+
    "\7\0\1\4\3\0\2\4\1\156\36\4\7\0\1\4"+
    "\3\0\13\4\1\157\11\4\1\160\13\4\7\0\1\4"+
    "\3\0\1\4\1\161\12\4\1\162\24\4\7\0\1\4"+
    "\3\0\22\4\1\163\16\4\7\0\1\4\3\0\11\4"+
    "\1\164\27\4\7\0\1\4\3\0\15\4\1\165\23\4"+
    "\7\0\1\4\3\0\11\4\1\166\27\4\7\0\1\4"+
    "\3\0\14\4\1\167\15\4\1\170\6\4\7\0\1\4"+
    "\3\0\30\4\1\171\1\172\7\4\7\0\1\4\3\0"+
    "\13\4\1\173\25\4\7\0\1\4\3\0\15\4\1\174"+
    "\23\4\7\0\1\4\3\0\14\4\1\175\24\4\7\0"+
    "\1\4\3\0\11\4\1\176\13\4\1\177\13\4\7\0"+
    "\1\4\3\0\15\4\1\200\23\4\7\0\1\4\3\0"+
    "\25\4\1\201\13\4\7\0\1\4\3\0\13\4\1\202"+
    "\25\4\7\0\1\4\3\0\15\4\1\203\23\4\7\0"+
    "\1\4\3\0\33\4\1\204\5\4\7\0\1\4\3\0"+
    "\22\4\1\205\16\4\7\0\1\4\3\0\2\4\1\206"+
    "\36\4\5\0\50\116\1\0\3\116\1\0\1\207\54\0"+
    "\1\4\3\0\3\4\1\210\35\4\7\0\1\4\3\0"+
    "\7\4\1\211\31\4\7\0\1\4\3\0\1\4\1\212"+
    "\37\4\7\0\1\4\3\0\33\4\1\213\5\4\7\0"+
    "\1\4\3\0\16\4\1\214\22\4\7\0\1\4\3\0"+
    "\12\4\1\215\26\4\7\0\1\4\3\0\11\4\1\216"+
    "\27\4\7\0\1\4\3\0\24\4\1\217\14\4\7\0"+
    "\1\4\3\0\14\4\1\220\24\4\7\0\1\4\3\0"+
    "\11\4\1\221\13\4\1\222\13\4\7\0\1\4\3\0"+
    "\4\4\1\223\34\4\7\0\1\4\3\0\14\4\1\224"+
    "\24\4\7\0\1\4\3\0\13\4\1\225\25\4\7\0"+
    "\1\4\3\0\12\4\1\226\26\4\7\0\1\4\3\0"+
    "\1\4\1\111\37\4\7\0\1\4\3\0\22\4\1\227"+
    "\16\4\7\0\1\4\3\0\11\4\1\230\27\4\7\0"+
    "\1\4\3\0\14\4\1\231\24\4\7\0\1\4\3\0"+
    "\16\4\1\232\22\4\7\0\1\4\3\0\2\4\1\233"+
    "\11\4\1\234\24\4\7\0\1\4\3\0\14\4\1\234"+
    "\24\4\7\0\1\4\3\0\34\4\1\235\4\4\7\0"+
    "\1\4\3\0\14\4\1\236\24\4\7\0\1\4\3\0"+
    "\1\4\1\237\37\4\7\0\1\4\3\0\16\4\1\240"+
    "\22\4\7\0\1\4\3\0\12\4\1\241\26\4\7\0"+
    "\1\4\3\0\1\4\1\242\37\4\7\0\1\4\3\0"+
    "\14\4\1\243\24\4\7\0\1\4\3\0\25\4\1\244"+
    "\13\4\7\0\1\4\3\0\16\4\1\245\22\4\7\0"+
    "\1\4\3\0\1\4\1\246\37\4\7\0\1\4\3\0"+
    "\12\4\1\247\26\4\7\0\1\4\3\0\2\4\1\250"+
    "\36\4\7\0\1\4\3\0\13\4\1\251\25\4\7\0"+
    "\1\4\3\0\16\4\1\252\22\4\7\0\1\4\2\0"+
    "\1\253\41\4\7\0\1\4\3\0\1\4\1\254\37\4"+
    "\7\0\1\4\3\0\11\4\1\255\27\4\7\0\1\4"+
    "\3\0\4\4\1\256\34\4\7\0\1\4\3\0\14\4"+
    "\1\257\24\4\7\0\1\4\3\0\27\4\1\260\11\4"+
    "\7\0\1\4\3\0\14\4\1\261\24\4\7\0\1\4"+
    "\3\0\30\4\1\262\10\4\7\0\1\4\3\0\12\4"+
    "\1\263\26\4\7\0\1\4\3\0\34\4\1\264\4\4"+
    "\7\0\1\4\3\0\16\4\1\265\22\4\7\0\1\4"+
    "\3\0\12\4\1\266\26\4\7\0\1\4\3\0\31\4"+
    "\1\267\7\4\6\0\1\207\51\0\1\270\2\0\1\4"+
    "\3\0\4\4\1\271\34\4\7\0\1\4\3\0\10\4"+
    "\1\271\30\4\7\0\1\4\3\0\2\4\1\272\36\4"+
    "\7\0\1\4\3\0\14\4\1\273\24\4\7\0\1\4"+
    "\3\0\14\4\1\274\24\4\7\0\1\4\3\0\4\4"+
    "\1\275\34\4\7\0\1\4\3\0\14\4\1\276\24\4"+
    "\7\0\1\4\3\0\17\4\1\277\21\4\7\0\1\4"+
    "\3\0\32\4\1\300\6\4\7\0\1\4\3\0\14\4"+
    "\1\301\24\4\7\0\1\4\3\0\4\4\1\302\34\4"+
    "\7\0\1\4\3\0\12\4\1\303\26\4\7\0\1\4"+
    "\3\0\25\4\1\304\13\4\7\0\1\4\3\0\13\4"+
    "\1\305\25\4\7\0\1\4\3\0\22\4\1\306\16\4"+
    "\7\0\1\4\3\0\13\4\1\307\25\4\7\0\1\4"+
    "\3\0\31\4\1\310\7\4\7\0\1\4\3\0\13\4"+
    "\1\311\25\4\7\0\1\4\3\0\1\4\1\312\37\4"+
    "\7\0\1\4\3\0\13\4\1\313\25\4\7\0\1\4"+
    "\3\0\16\4\1\314\22\4\7\0\1\4\3\0\2\4"+
    "\1\315\36\4\7\0\1\4\2\0\1\316\41\4\7\0"+
    "\1\4\3\0\13\4\1\317\25\4\7\0\1\4\3\0"+
    "\12\4\1\320\26\4\7\0\1\4\3\0\13\4\1\321"+
    "\25\4\7\0\1\4\3\0\2\4\1\322\36\4\44\0"+
    "\1\323\16\0\1\4\2\0\1\324\41\4\7\0\1\4"+
    "\3\0\4\4\1\325\34\4\7\0\1\4\3\0\31\4"+
    "\1\326\7\4\7\0\1\4\3\0\4\4\1\327\34\4"+
    "\7\0\1\4\3\0\16\4\1\330\22\4\7\0\1\4"+
    "\3\0\1\4\1\331\37\4\7\0\1\4\3\0\13\4"+
    "\1\332\25\4\7\0\1\4\3\0\1\4\1\333\37\4"+
    "\7\0\1\4\3\0\1\4\1\334\37\4\7\0\1\4"+
    "\3\0\3\4\1\335\35\4\7\0\1\4\2\0\1\336"+
    "\41\4\7\0\1\4\3\0\1\4\1\337\37\4\7\0"+
    "\1\4\3\0\1\4\1\340\37\4\7\0\1\4\3\0"+
    "\11\4\1\341\27\4\7\0\1\4\3\0\2\4\1\342"+
    "\36\4\7\0\1\4\3\0\13\4\1\300\25\4\7\0"+
    "\1\4\3\0\14\4\1\343\24\4\7\0\1\4\3\0"+
    "\16\4\1\344\22\4\7\0\1\4\3\0\13\4\1\345"+
    "\25\4\7\0\1\4\1\0\1\346\1\0\41\4\7\0"+
    "\1\4\3\0\16\4\1\347\22\4\7\0\1\4\3\0"+
    "\25\4\1\350\13\4\7\0\1\4\3\0\16\4\1\351"+
    "\22\4\7\0\1\4\3\0\1\4\1\352\37\4\40\0"+
    "\1\353\22\0\1\4\3\0\16\4\1\354\22\4\7\0"+
    "\1\4\3\0\1\4\1\355\37\4\7\0\1\4\3\0"+
    "\16\4\1\356\22\4\7\0\1\4\3\0\1\4\1\357"+
    "\37\4\27\0\1\360\64\0\1\361\22\0\1\4\3\0"+
    "\16\4\1\362\22\4\7\0\1\4\3\0\13\4\1\363"+
    "\25\4\7\0\1\4\3\0\13\4\1\364\25\4\7\0"+
    "\1\4\3\0\27\4\1\365\11\4\7\0\1\4\2\0"+
    "\1\366\41\4\7\0\1\4\3\0\2\4\1\367\36\4"+
    "\7\0\1\4\3\0\1\4\1\370\37\4\44\0\1\371"+
    "\16\0\1\4\3\0\36\4\1\372\2\4\7\0\1\4"+
    "\3\0\15\4\1\373\23\4\7\0\1\4\3\0\11\4"+
    "\1\374\27\4\7\0\1\4\3\0\4\4\1\375\34\4"+
    "\7\0\1\4\3\0\35\4\1\376\3\4\26\0\1\377"+
    "\34\0\1\4\2\0\1\u0100\41\4\7\0\1\4\3\0"+
    "\14\4\1\u0101\24\4\7\0\1\4\3\0\2\4\1\u0102"+
    "\36\4\31\0\1\u0103\31\0\1\4\3\0\11\4\1\u0104"+
    "\27\4\7\0\1\4\3\0\31\4\1\u0105\7\4\12\0"+
    "\1\u0106\72\0\1\u0107\31\0\1\4\3\0\16\4\1\u0108"+
    "\22\4\7\0\1\4\3\0\4\4\1\u0109\34\4\7\0"+
    "\1\4\3\0\16\4\1\u010a\22\4\27\0\1\u010b\33\0"+
    "\1\4\3\0\12\4\1\u010c\26\4\7\0\1\4\3\0"+
    "\31\4\1\u010d\7\4\27\0\1\u010e\33\0\1\4\3\0"+
    "\4\4\1\u010f\34\4\7\0\1\4\3\0\14\4\1\u0110"+
    "\24\4\7\0\1\4\3\0\16\4\1\u0111\22\4\7\0"+
    "\1\4\3\0\22\4\1\u0112\16\4\27\0\1\u0113\70\0"+
    "\1\u0114\16\0\1\4\3\0\4\4\1\u0115\34\4\41\0"+
    "\1\u0116\21\0\1\4\3\0\1\4\1\u0117\37\4\30\0"+
    "\1\u0118\3\0\1\u0119\4\0\1\u011a\10\0\1\u011b\42\0"+
    "\1\u011c\21\0\1\4\3\0\1\4\1\u011d\37\4\15\0"+
    "\1\u011e\45\0\1\4\3\0\1\4\1\u011f\37\4\12\0"+
    "\1\u0120\50\0\1\4\3\0\14\4\1\u0121\24\4\14\0"+
    "\1\u0122\66\0\1\u0123\33\0\1\4\3\0\12\4\1\u0124"+
    "\26\4\14\0\1\u0125\70\0\1\u0126\57\0\1\u0127\35\0"+
    "\1\u0128\62\0\1\u0129\41\0\1\u012a\51\0\1\u012b\67\0"+
    "\1\u012c\11\0\1\u012d\2\0\1\u012e\17\0\1\4\3\0"+
    "\11\4\1\u012f\27\4\41\0\1\u0130\24\0\1\u0131\50\0"+
    "\1\4\3\0\16\4\1\u0132\22\4\26\0\1\u0133\54\0"+
    "\1\u0134\54\0\1\u0135\52\0\1\u0136\70\0\1\u0137\47\0"+
    "\1\u0138\42\0\1\u0139\40\0\1\u013a\70\0\1\u013b\31\0"+
    "\1\4\3\0\1\4\1\u013c\37\4\17\0\1\u013d\74\0"+
    "\1\u013e\5\0\1\u013f\21\0\1\u0140\63\0\1\u0141\60\0"+
    "\1\u0142\46\0\1\u0143\43\0\1\u0144\53\0\1\u0145\63\0"+
    "\1\u0146\57\0\1\u0147\64\0\1\u0148\54\0\1\u0149\25\0"+
    "\1\u014a\53\0\1\u014b\70\0\1\u014c\37\0\1\u014d\52\0"+
    "\1\u014e\65\0\1\u014f\41\0\1\u0150\100\0\1\u0151\26\0"+
    "\1\u0152\77\0\1\u0153\32\0\1\u0154\50\0\1\u0155\65\0"+
    "\1\u0156\56\0\1\u0157\50\0\1\u0158\41\0\1\u0159\54\0"+
    "\1\u015a\66\0\1\u015b\54\0\1\u015c\53\0\1\u015d\41\0"+
    "\1\u015e\63\0\1\u015f\41\0\1\u0160\77\0\1\u0161\53\0"+
    "\1\u0162\53\0\1\u0163\43\0\1\u0164\36\0\1\u0165\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12892];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\114\1\1\0\67\1\1\0\43\1\1\0"+
    "\14\1\1\11\25\1\1\0\4\1\2\0\11\1\1\0"+
    "\7\1\1\0\4\1\1\0\4\1\2\0\4\1\1\0"+
    "\2\1\1\0\5\1\2\0\2\1\1\0\2\1\2\0"+
    "\3\1\1\0\2\1\1\0\4\1\2\0\1\1\1\0"+
    "\1\1\5\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\11\11\0\1\1\2\0\1\1\11\0\1\1"+
    "\3\0\1\11\3\0\1\11\1\0\1\11\5\0\3\11"+
    "\10\0\2\11\4\0\1\11\2\0\1\11\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[357];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 120) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { lexeme=yytext(); return SEIS;
          }
        case 69: break;
        case 39: 
          { lexeme=yytext(); return CUATRO;
          }
        case 70: break;
        case 53: 
          { lexeme=yytext(); return NARANJADA;
          }
        case 71: break;
        case 23: 
          { lexeme=yytext(); return ONCE;
          }
        case 72: break;
        case 54: 
          { lexeme=yytext(); return COCA_COLA;
          }
        case 73: break;
        case 51: 
          { lexeme=yytext(); return LIMONADA;
          }
        case 74: break;
        case 17: 
          { lexeme=yytext(); return VER;
          }
        case 75: break;
        case 41: 
          { lexeme=yytext(); return PEDIDO;
          }
        case 76: break;
        case 13: 
          { lexeme=yytext(); return LAS;
          }
        case 77: break;
        case 11: 
          { lexeme=yytext(); return OYE;
          }
        case 78: break;
        case 56: 
          { lexeme=yytext(); return HAMBURGUESA_ARROZ;
          }
        case 79: break;
        case 16: 
          { lexeme=yytext(); return DOS;
          }
        case 80: break;
        case 38: 
          { lexeme=yytext(); return CORONA;
          }
        case 81: break;
        case 10: 
          { lexeme=yytext(); return DE;
          }
        case 82: break;
        case 50: 
          { lexeme=yytext(); return EXPRESSO;
          }
        case 83: break;
        case 32: 
          { lexeme=yytext(); return CARTA;
          }
        case 84: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 85: break;
        case 59: 
          { lexeme=yytext(); return SUSHI_RES;
          }
        case 86: break;
        case 57: 
          { lexeme=yytext(); return PIE_MORA;
          }
        case 87: break;
        case 22: 
          { lexeme=yytext(); return MENU;
          }
        case 88: break;
        case 36: 
          { lexeme=yytext(); return QUINCE;
          }
        case 89: break;
        case 55: 
          { lexeme=yytext(); return CAMARONITO;
          }
        case 90: break;
        case 27: 
          { lexeme=yytext(); return DOCE;
          }
        case 91: break;
        case 63: 
          { lexeme=yytext(); return SUSHI_POLLO;
          }
        case 92: break;
        case 5: 
          { lexeme=yytext(); return Y;
          }
        case 93: break;
        case 14: 
          { lexeme=yytext(); return LOS;
          }
        case 94: break;
        case 28: 
          { lexeme=yytext(); return SANJI;
          }
        case 95: break;
        case 62: 
          { lexeme=yytext(); return PIE_FRESA;
          }
        case 96: break;
        case 21: 
          { lexeme=yytext(); return TRES;
          }
        case 97: break;
        case 44: 
          { lexeme=yytext(); return CHURROS;
          }
        case 98: break;
        case 12: 
          { lexeme=yytext(); return CANT_UNA;
          }
        case 99: break;
        case 18: 
          { lexeme=yytext(); return JUGO;
          }
        case 100: break;
        case 61: 
          { lexeme=yytext(); return PIE_LIMON;
          }
        case 101: break;
        case 8: 
          { lexeme=yytext(); return CANT_UN;
          }
        case 102: break;
        case 48: 
          { lexeme=yytext(); return TERIYAKI;
          }
        case 103: break;
        case 9: 
          { lexeme=yytext(); return LA;
          }
        case 104: break;
        case 34: 
          { lexeme=yytext(); return PEPSI;
          }
        case 105: break;
        case 65: 
          { lexeme=yytext(); return HELADO_CACAO;
          }
        case 106: break;
        case 25: 
          { lexeme=yytext(); return CAFE;
          }
        case 107: break;
        case 45: 
          { lexeme=yytext(); return VAMPIRO;
          }
        case 108: break;
        case 20: 
          { lexeme=yytext(); return TRAER;
          }
        case 109: break;
        case 29: 
          { lexeme=yytext(); return NUEVE;
          }
        case 110: break;
        case 24: 
          { lexeme=yytext(); return OCHO;
          }
        case 111: break;
        case 49: 
          { lexeme=yytext(); return MOSTRAR;
          }
        case 112: break;
        case 35: 
          { lexeme = yytext(); return FAVOR;
          }
        case 113: break;
        case 37: 
          { lexeme=yytext(); return QUIERO;
          }
        case 114: break;
        case 58: 
          { lexeme=yytext(); return PIÑA_COLADA;
          }
        case 115: break;
        case 30: 
          { lexeme=yytext(); return SIETE;
          }
        case 116: break;
        case 1: 
          { lexeme=yytext(); return CADENA;
          }
        case 117: break;
        case 46: 
          { lexeme=yytext(); return BOMBAZO;
          }
        case 118: break;
        case 43: 
          { lexeme=yytext(); return CATORCE;
          }
        case 119: break;
        case 31: 
          { lexeme=yytext(); return TRECE;
          }
        case 120: break;
        case 60: 
          { lexeme=yytext(); return PIE_QUESO;
          }
        case 121: break;
        case 47: 
          { lexeme=yytext(); return FONDANT;
          }
        case 122: break;
        case 40: 
          { lexeme=yytext(); return CUENTA;
          }
        case 123: break;
        case 2: 
          { return ERROR;
          }
        case 124: break;
        case 7: 
          { lexeme=yytext(); return EL;
          }
        case 125: break;
        case 67: 
          { lexeme=yytext(); return FRUTA_CARAMELO;
          }
        case 126: break;
        case 68: 
          { lexeme=yytext(); return HELADO_VAINILLA;
          }
        case 127: break;
        case 42: 
          { lexeme=yytext(); return MARTINI;
          }
        case 128: break;
        case 6: 
          { lexeme=yytext(); return Coma;
          }
        case 129: break;
        case 4: 
          { /*Ignore*/
          }
        case 130: break;
        case 66: 
          { lexeme=yytext(); return SUSHI_CAMARON;
          }
        case 131: break;
        case 33: 
          { lexeme=yytext(); return CINCO;
          }
        case 132: break;
        case 26: 
          { lexeme=yytext(); return DIEZ;
          }
        case 133: break;
        case 64: 
          { lexeme=yytext(); return HACER;
          }
        case 134: break;
        case 15: 
          { lexeme = yytext(); return POR;
          }
        case 135: break;
        case 52: 
          { lexeme=yytext(); return VICTORIA;
          }
        case 136: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
