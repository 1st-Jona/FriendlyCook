/* The following code was generated by JFlex 1.4.3 on 28/12/20 06:18 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/12/20 06:18 PM from the specification file
 * <tt>C:/FriendlyCook/FriendlyCook/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\57\2\0\1\3\22\0\1\5\7\0\1\60\1\62"+
    "\2\0\1\4\1\61\1\0\1\56\12\1\7\0\1\13\7\2\1\16"+
    "\1\15\1\2\1\43\1\20\1\14\1\30\1\2\1\33\1\2\1\6"+
    "\7\2\4\0\2\2\1\7\1\50\1\35\1\41\1\24\1\53\1\51"+
    "\1\34\1\12\1\11\1\52\1\36\1\25\1\10\1\26\1\40\1\31"+
    "\1\21\1\17\1\23\1\32\1\22\1\2\1\54\1\27\1\37\146\2"+
    "\1\42\7\2\1\45\3\2\1\55\3\2\1\44\1\0\1\47\6\0"+
    "\1\46\uff05\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\2\4\12\1\1\5\14\1"+
    "\2\2\1\6\17\1\1\7\11\1\1\10\10\1\1\11"+
    "\11\1\1\12\6\1\1\4\1\0\13\1\1\13\13\1"+
    "\1\14\2\1\1\15\16\1\1\16\3\1\1\17\4\1"+
    "\1\20\3\1\1\21\5\1\1\0\4\1\1\22\1\1"+
    "\1\23\4\1\1\24\1\25\5\1\2\26\1\1\1\27"+
    "\1\30\10\1\1\31\11\1\1\0\3\1\1\24\1\32"+
    "\1\1\1\33\4\1\1\3\1\34\1\1\1\35\1\36"+
    "\4\1\1\37\12\1\1\40\2\1\1\41\1\1\1\0"+
    "\3\1\1\42\1\1\1\43\2\0\1\44\2\1\1\45"+
    "\3\1\1\0\6\1\1\46\1\47\1\1\1\0\3\1"+
    "\1\50\1\0\1\51\1\52\2\1\2\0\1\53\1\1"+
    "\1\0\2\1\1\0\1\54\4\1\1\55\1\1\2\0"+
    "\1\56\1\1\1\0\1\57\1\1\2\0\1\60\1\0"+
    "\1\61\1\1\1\0\1\62\1\63\1\64\1\65\1\1"+
    "\2\0\1\1\1\0\1\66\6\0\1\67\1\0\1\1"+
    "\2\0\1\1\1\70\11\0\1\1\2\0\1\71\11\0"+
    "\1\72\3\0\1\73\3\0\1\74\1\0\1\75\5\0"+
    "\1\76\1\77\1\100\10\0\1\101\1\102\5\0\1\103"+
    "\1\0\1\104\3\0\1\105\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\231\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\314"+
    "\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\231"+
    "\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c"+
    "\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4"+
    "\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c"+
    "\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\231\0\u0e8b\0\u0ebe\0\u0ef1"+
    "\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089"+
    "\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221"+
    "\0\231\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386"+
    "\0\u13b9\0\u13ec\0\u141f\0\u1452\0\231\0\u1485\0\u14b8\0\231"+
    "\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650"+
    "\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782\0\231\0\u17b5"+
    "\0\u17e8\0\u181b\0\231\0\u184e\0\u1881\0\u18b4\0\u18e7\0\231"+
    "\0\u191a\0\u194d\0\u1980\0\231\0\u19b3\0\u19e6\0\u1a19\0\u1a4c"+
    "\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\231\0\u1bb1"+
    "\0\231\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u0e25\0\231\0\u1cb0"+
    "\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\231\0\63\0\u1daf\0\231"+
    "\0\231\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14"+
    "\0\u1f47\0\231\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079"+
    "\0\u20ac\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de\0\231"+
    "\0\231\0\u2211\0\231\0\u2244\0\u2277\0\u22aa\0\u22dd\0\63"+
    "\0\231\0\u2310\0\231\0\231\0\u2343\0\u2376\0\u23a9\0\u23dc"+
    "\0\231\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541"+
    "\0\u2574\0\u25a7\0\u25da\0\231\0\u260d\0\u2640\0\231\0\u2673"+
    "\0\u26a6\0\u26d9\0\u270c\0\u273f\0\231\0\u2772\0\231\0\u27a5"+
    "\0\u27d8\0\231\0\u280b\0\u283e\0\231\0\u2871\0\u28a4\0\u28d7"+
    "\0\u290a\0\u293d\0\u2970\0\u29a3\0\u29d6\0\u2a09\0\u2a3c\0\231"+
    "\0\231\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\231\0\u2b6e"+
    "\0\231\0\231\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\231\0\u2c6d"+
    "\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39\0\231\0\u2d6c\0\u2d9f\0\u2dd2"+
    "\0\u2e05\0\231\0\u2e38\0\u2e6b\0\u2e9e\0\231\0\u2ed1\0\u2f04"+
    "\0\231\0\u2f37\0\u2f6a\0\u2f9d\0\231\0\u2fd0\0\231\0\u3003"+
    "\0\u3036\0\231\0\231\0\231\0\231\0\u3069\0\u309c\0\u30cf"+
    "\0\u3102\0\u3135\0\231\0\u3168\0\u319b\0\u31ce\0\u3201\0\u3234"+
    "\0\u3267\0\231\0\u329a\0\u32cd\0\u3300\0\u3333\0\u3366\0\63"+
    "\0\u3399\0\u33cc\0\u33ff\0\u3432\0\u3465\0\u3498\0\u34cb\0\u34fe"+
    "\0\u3531\0\u3564\0\u3597\0\u35ca\0\231\0\u35fd\0\u3630\0\u3663"+
    "\0\u3696\0\u36c9\0\u36fc\0\u372f\0\u3762\0\u3795\0\231\0\u37c8"+
    "\0\u37fb\0\u382e\0\63\0\u3861\0\u3894\0\u38c7\0\63\0\u38fa"+
    "\0\63\0\u392d\0\u3960\0\u3993\0\u39c6\0\u39f9\0\63\0\63"+
    "\0\63\0\u3a2c\0\u3a5f\0\u3a92\0\u3ac5\0\u3af8\0\u3b2b\0\u3b5e"+
    "\0\u3b91\0\63\0\63\0\u3bc4\0\u3bf7\0\u3c2a\0\u3c5d\0\u3c90"+
    "\0\63\0\u3cc3\0\63\0\u3cf6\0\u3d29\0\u3d5c\0\63\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\4"+
    "\1\10\1\11\5\4\1\12\1\13\1\4\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\4\1\31\1\32\1\4\1\33"+
    "\2\4\2\2\1\34\2\4\1\35\2\4\1\36\1\5"+
    "\1\37\2\2\64\0\1\3\63\0\1\4\3\0\40\4"+
    "\2\0\6\4\10\0\3\5\51\0\1\5\6\0\2\5"+
    "\1\40\51\0\1\5\5\0\1\4\3\0\1\4\1\41"+
    "\3\4\1\42\32\4\2\0\6\4\7\0\1\4\3\0"+
    "\1\4\1\43\22\4\1\44\13\4\2\0\6\4\7\0"+
    "\1\4\3\0\24\4\1\45\13\4\2\0\6\4\7\0"+
    "\1\4\3\0\1\4\1\41\2\4\1\46\11\4\1\47"+
    "\5\4\1\50\13\4\2\0\6\4\7\0\1\4\3\0"+
    "\1\4\1\51\36\4\2\0\6\4\7\0\1\4\3\0"+
    "\1\4\1\52\2\4\1\53\11\4\1\54\21\4\2\0"+
    "\6\4\7\0\1\4\3\0\13\4\1\55\2\4\1\56"+
    "\21\4\2\0\6\4\7\0\1\4\3\0\2\4\1\57"+
    "\25\4\1\60\7\4\2\0\4\4\1\61\1\4\7\0"+
    "\1\4\3\0\1\4\1\62\2\4\1\63\11\4\1\64"+
    "\5\4\1\65\13\4\2\0\6\4\7\0\1\4\3\0"+
    "\2\4\1\66\16\4\1\67\5\4\1\70\10\4\2\0"+
    "\6\4\7\0\1\4\3\0\21\4\1\67\16\4\2\0"+
    "\6\4\7\0\1\4\3\0\24\4\1\71\13\4\2\0"+
    "\6\4\7\0\1\4\3\0\2\4\1\72\35\4\2\0"+
    "\6\4\7\0\1\4\3\0\24\4\1\73\13\4\2\0"+
    "\6\4\7\0\1\4\3\0\1\4\1\74\14\4\1\75"+
    "\21\4\2\0\6\4\7\0\1\4\3\0\1\4\1\76"+
    "\2\4\1\77\13\4\1\100\3\4\1\101\1\4\1\102"+
    "\11\4\2\0\6\4\7\0\1\4\3\0\1\4\1\103"+
    "\2\4\1\104\11\4\1\105\1\4\1\106\16\4\1\105"+
    "\2\0\6\4\7\0\1\4\3\0\1\4\1\107\2\4"+
    "\1\110\11\4\1\111\1\4\1\112\17\4\2\0\6\4"+
    "\7\0\1\4\3\0\1\4\1\113\2\4\1\114\11\4"+
    "\1\115\1\4\1\116\17\4\2\0\6\4\7\0\1\4"+
    "\3\0\4\4\1\117\33\4\2\0\6\4\7\0\1\4"+
    "\3\0\20\4\1\120\17\4\2\0\6\4\7\0\1\4"+
    "\3\0\1\4\1\121\11\4\1\122\4\4\1\123\17\4"+
    "\2\0\6\4\63\0\1\124\65\0\1\125\3\0\1\4"+
    "\3\0\2\4\1\126\35\4\2\0\6\4\7\0\1\4"+
    "\3\0\6\4\1\127\31\4\2\0\6\4\7\0\1\4"+
    "\3\0\13\4\1\130\24\4\2\0\6\4\7\0\1\4"+
    "\3\0\16\4\1\131\21\4\2\0\6\4\7\0\1\4"+
    "\3\0\40\4\2\0\1\4\1\132\4\4\7\0\1\4"+
    "\3\0\16\4\1\133\21\4\2\0\6\4\7\0\1\4"+
    "\3\0\4\4\1\134\33\4\2\0\6\4\7\0\1\4"+
    "\3\0\11\4\1\135\26\4\2\0\6\4\7\0\1\4"+
    "\3\0\13\4\1\136\24\4\2\0\6\4\7\0\1\4"+
    "\3\0\17\4\1\137\20\4\2\0\6\4\7\0\1\4"+
    "\3\0\27\4\1\140\10\4\2\0\6\4\7\0\1\4"+
    "\3\0\13\4\1\141\24\4\2\0\6\4\7\0\1\4"+
    "\3\0\1\4\1\142\14\4\1\143\15\4\1\144\3\4"+
    "\2\0\6\4\7\0\1\4\3\0\13\4\1\145\24\4"+
    "\2\0\6\4\7\0\1\4\3\0\11\4\1\146\26\4"+
    "\2\0\6\4\7\0\1\4\3\0\32\4\1\147\5\4"+
    "\2\0\6\4\7\0\1\4\3\0\13\4\1\150\24\4"+
    "\2\0\6\4\7\0\1\4\3\0\13\4\1\151\24\4"+
    "\2\0\6\4\7\0\1\4\3\0\2\4\1\152\35\4"+
    "\2\0\6\4\7\0\1\4\3\0\16\4\1\153\20\4"+
    "\1\153\2\0\6\4\7\0\1\4\3\0\27\4\1\154"+
    "\10\4\2\0\6\4\7\0\1\4\3\0\16\4\1\155"+
    "\21\4\2\0\6\4\7\0\1\4\3\0\26\4\1\156"+
    "\11\4\2\0\6\4\7\0\1\4\3\0\4\4\1\157"+
    "\33\4\2\0\6\4\7\0\1\4\3\0\1\4\1\160"+
    "\36\4\2\0\6\4\7\0\1\4\3\0\4\4\1\161"+
    "\33\4\2\0\6\4\7\0\1\4\3\0\17\4\1\162"+
    "\7\4\1\163\10\4\2\0\6\4\7\0\1\4\3\0"+
    "\30\4\1\164\7\4\2\0\6\4\7\0\1\4\3\0"+
    "\13\4\1\165\1\4\1\166\1\4\1\167\20\4\2\0"+
    "\3\4\1\170\2\4\7\0\1\4\3\0\2\4\1\171"+
    "\35\4\2\0\6\4\7\0\1\4\3\0\13\4\1\172"+
    "\13\4\1\173\10\4\2\0\6\4\7\0\1\4\3\0"+
    "\1\4\1\174\14\4\1\175\21\4\2\0\6\4\7\0"+
    "\1\4\3\0\24\4\1\176\13\4\2\0\6\4\7\0"+
    "\1\4\3\0\11\4\1\177\26\4\2\0\6\4\7\0"+
    "\1\4\3\0\11\4\1\200\5\4\1\201\20\4\2\0"+
    "\6\4\7\0\1\4\3\0\16\4\1\202\21\4\2\0"+
    "\6\4\7\0\1\4\3\0\11\4\1\203\26\4\2\0"+
    "\6\4\7\0\1\4\3\0\21\4\1\204\16\4\2\0"+
    "\6\4\7\0\1\4\3\0\36\4\1\205\1\4\2\0"+
    "\6\4\7\0\1\4\3\0\32\4\1\206\1\207\4\4"+
    "\2\0\6\4\7\0\1\4\3\0\13\4\1\210\24\4"+
    "\2\0\6\4\7\0\1\4\3\0\17\4\1\211\20\4"+
    "\2\0\6\4\7\0\1\4\3\0\16\4\1\212\10\4"+
    "\1\213\10\4\2\0\6\4\7\0\1\4\3\0\11\4"+
    "\1\214\15\4\1\215\10\4\2\0\6\4\7\0\1\4"+
    "\3\0\11\4\1\200\26\4\2\0\6\4\7\0\1\4"+
    "\3\0\17\4\1\216\20\4\2\0\6\4\7\0\1\4"+
    "\3\0\14\4\1\217\23\4\2\0\6\4\7\0\1\4"+
    "\3\0\24\4\1\220\13\4\2\0\6\4\7\0\1\4"+
    "\3\0\2\4\1\221\35\4\2\0\6\4\5\0\57\124"+
    "\1\0\3\124\1\0\1\222\63\0\1\4\3\0\3\4"+
    "\1\223\34\4\2\0\6\4\7\0\1\4\3\0\7\4"+
    "\1\224\30\4\2\0\6\4\7\0\1\4\3\0\1\4"+
    "\1\225\36\4\2\0\6\4\7\0\1\4\3\0\14\4"+
    "\1\226\23\4\2\0\6\4\7\0\1\4\3\0\20\4"+
    "\1\227\17\4\2\0\6\4\7\0\1\4\3\0\15\4"+
    "\1\230\22\4\2\0\6\4\7\0\1\4\3\0\11\4"+
    "\1\231\26\4\2\0\6\4\7\0\1\4\3\0\26\4"+
    "\1\232\11\4\2\0\6\4\7\0\1\4\3\0\14\4"+
    "\1\233\23\4\2\0\6\4\7\0\1\4\3\0\32\4"+
    "\1\234\5\4\2\0\6\4\7\0\1\4\3\0\15\4"+
    "\1\235\22\4\2\0\6\4\7\0\1\4\3\0\16\4"+
    "\1\236\21\4\2\0\6\4\7\0\1\4\3\0\11\4"+
    "\1\237\15\4\1\240\10\4\2\0\6\4\7\0\1\4"+
    "\3\0\16\4\1\113\21\4\2\0\6\4\7\0\1\4"+
    "\3\0\4\4\1\241\33\4\2\0\6\4\7\0\1\4"+
    "\3\0\16\4\1\242\21\4\2\0\6\4\7\0\1\4"+
    "\3\0\13\4\1\243\24\4\2\0\6\4\7\0\1\4"+
    "\3\0\15\4\1\244\22\4\2\0\6\4\7\0\1\4"+
    "\3\0\1\4\1\54\36\4\2\0\6\4\7\0\1\4"+
    "\3\0\24\4\1\245\13\4\1\246\1\0\6\4\7\0"+
    "\1\4\3\0\11\4\1\247\26\4\2\0\6\4\7\0"+
    "\1\4\3\0\16\4\1\250\21\4\2\0\6\4\7\0"+
    "\1\4\3\0\20\4\1\251\17\4\2\0\6\4\7\0"+
    "\1\4\3\0\2\4\1\252\13\4\1\253\21\4\2\0"+
    "\6\4\7\0\1\4\3\0\16\4\1\253\21\4\2\0"+
    "\6\4\7\0\1\4\3\0\40\4\2\0\1\254\5\4"+
    "\7\0\1\4\3\0\16\4\1\255\21\4\2\0\6\4"+
    "\7\0\1\4\3\0\1\4\1\256\36\4\2\0\6\4"+
    "\7\0\1\4\3\0\15\4\1\257\22\4\2\0\6\4"+
    "\7\0\1\4\3\0\20\4\1\260\17\4\2\0\6\4"+
    "\7\0\1\4\3\0\1\4\1\261\36\4\2\0\6\4"+
    "\7\0\1\4\3\0\16\4\1\262\21\4\2\0\6\4"+
    "\7\0\1\4\3\0\27\4\1\263\10\4\2\0\6\4"+
    "\7\0\1\4\3\0\20\4\1\264\17\4\2\0\6\4"+
    "\7\0\1\4\3\0\1\4\1\265\36\4\2\0\6\4"+
    "\7\0\1\4\3\0\15\4\1\266\22\4\2\0\6\4"+
    "\7\0\1\4\3\0\2\4\1\267\35\4\2\0\6\4"+
    "\7\0\1\4\3\0\13\4\1\270\24\4\2\0\6\4"+
    "\7\0\1\4\3\0\15\4\1\271\22\4\2\0\6\4"+
    "\7\0\1\4\3\0\20\4\1\272\17\4\2\0\6\4"+
    "\7\0\1\4\3\0\17\4\1\273\20\4\2\0\6\4"+
    "\7\0\1\4\2\0\1\274\40\4\2\0\6\4\7\0"+
    "\1\4\3\0\1\4\1\275\36\4\2\0\6\4\7\0"+
    "\1\4\3\0\11\4\1\276\26\4\2\0\6\4\7\0"+
    "\1\4\3\0\4\4\1\277\33\4\2\0\6\4\7\0"+
    "\1\4\3\0\16\4\1\300\21\4\2\0\6\4\7\0"+
    "\1\4\3\0\31\4\1\301\6\4\2\0\6\4\7\0"+
    "\1\4\3\0\15\4\1\302\22\4\2\0\6\4\7\0"+
    "\1\4\3\0\16\4\1\303\21\4\2\0\6\4\7\0"+
    "\1\4\3\0\40\4\2\0\1\304\5\4\7\0\1\4"+
    "\3\0\20\4\1\305\17\4\2\0\6\4\7\0\1\4"+
    "\3\0\15\4\1\306\22\4\2\0\6\4\7\0\1\4"+
    "\3\0\33\4\1\307\4\4\2\0\6\4\6\0\1\222"+
    "\60\0\1\310\2\0\1\4\3\0\4\4\1\311\33\4"+
    "\2\0\6\4\7\0\1\4\3\0\10\4\1\311\27\4"+
    "\2\0\6\4\7\0\1\4\3\0\2\4\1\312\35\4"+
    "\2\0\6\4\7\0\1\4\3\0\16\4\1\313\21\4"+
    "\2\0\6\4\7\0\1\4\3\0\16\4\1\314\21\4"+
    "\2\0\6\4\7\0\1\4\3\0\4\4\1\315\33\4"+
    "\2\0\6\4\7\0\1\4\3\0\4\4\1\316\33\4"+
    "\2\0\6\4\7\0\1\4\3\0\4\4\1\317\33\4"+
    "\2\0\6\4\7\0\1\4\3\0\20\4\1\320\17\4"+
    "\2\0\6\4\7\0\1\4\3\0\16\4\1\321\21\4"+
    "\2\0\6\4\7\0\1\4\3\0\21\4\1\322\16\4"+
    "\2\0\6\4\7\0\1\4\3\0\36\4\1\323\1\4"+
    "\2\0\6\4\7\0\1\4\3\0\16\4\1\324\21\4"+
    "\2\0\6\4\7\0\1\4\3\0\4\4\1\325\33\4"+
    "\2\0\5\4\1\325\7\0\1\4\3\0\15\4\1\326"+
    "\22\4\2\0\6\4\7\0\1\4\3\0\27\4\1\327"+
    "\10\4\2\0\6\4\7\0\1\4\3\0\13\4\1\330"+
    "\24\4\2\0\6\4\7\0\1\4\3\0\24\4\1\331"+
    "\13\4\2\0\6\4\7\0\1\4\3\0\13\4\1\332"+
    "\24\4\2\0\6\4\7\0\1\4\3\0\33\4\1\333"+
    "\4\4\2\0\6\4\7\0\1\4\3\0\1\4\1\334"+
    "\36\4\2\0\6\4\7\0\1\4\3\0\13\4\1\335"+
    "\24\4\2\0\6\4\7\0\1\4\3\0\13\4\1\336"+
    "\24\4\2\0\6\4\7\0\1\4\3\0\20\4\1\337"+
    "\17\4\2\0\6\4\7\0\1\4\3\0\2\4\1\340"+
    "\35\4\2\0\6\4\7\0\1\4\2\0\1\341\40\4"+
    "\2\0\6\4\7\0\1\4\3\0\13\4\1\342\24\4"+
    "\2\0\6\4\7\0\1\4\3\0\15\4\1\343\22\4"+
    "\2\0\6\4\7\0\1\4\3\0\13\4\1\344\24\4"+
    "\2\0\6\4\7\0\1\4\3\0\20\4\1\345\17\4"+
    "\2\0\6\4\7\0\1\4\3\0\2\4\1\346\35\4"+
    "\2\0\6\4\7\0\1\4\3\0\16\4\1\347\21\4"+
    "\2\0\6\4\46\0\1\350\23\0\1\4\2\0\1\351"+
    "\40\4\2\0\6\4\7\0\1\4\3\0\4\4\1\352"+
    "\33\4\2\0\6\4\7\0\1\4\3\0\33\4\1\353"+
    "\4\4\2\0\6\4\7\0\1\4\3\0\1\4\1\202"+
    "\36\4\2\0\6\4\7\0\1\4\3\0\1\4\1\354"+
    "\36\4\2\0\6\4\7\0\1\4\3\0\13\4\1\355"+
    "\24\4\2\0\6\4\7\0\1\4\3\0\1\4\1\356"+
    "\36\4\2\0\6\4\7\0\1\4\3\0\1\4\1\357"+
    "\36\4\2\0\6\4\7\0\1\4\3\0\3\4\1\360"+
    "\34\4\2\0\6\4\7\0\1\4\2\0\1\361\40\4"+
    "\2\0\6\4\7\0\1\4\3\0\2\4\1\311\35\4"+
    "\2\0\6\4\7\0\1\4\3\0\13\4\1\362\24\4"+
    "\2\0\6\4\7\0\1\4\3\0\13\4\1\363\24\4"+
    "\2\0\6\4\7\0\1\4\3\0\1\4\1\364\36\4"+
    "\2\0\6\4\7\0\1\4\3\0\1\4\1\365\36\4"+
    "\2\0\6\4\7\0\1\4\3\0\11\4\1\366\26\4"+
    "\2\0\6\4\7\0\1\4\3\0\2\4\1\367\35\4"+
    "\2\0\6\4\7\0\1\4\3\0\13\4\1\323\24\4"+
    "\2\0\6\4\7\0\1\4\3\0\16\4\1\370\21\4"+
    "\2\0\6\4\7\0\1\4\3\0\20\4\1\371\17\4"+
    "\2\0\6\4\7\0\1\4\3\0\13\4\1\372\24\4"+
    "\2\0\6\4\7\0\1\4\1\0\1\373\1\0\40\4"+
    "\2\0\6\4\7\0\1\4\3\0\20\4\1\374\17\4"+
    "\2\0\6\4\7\0\1\4\3\0\27\4\1\375\10\4"+
    "\2\0\6\4\7\0\1\4\3\0\20\4\1\376\17\4"+
    "\2\0\6\4\7\0\1\4\3\0\1\4\1\377\36\4"+
    "\2\0\6\4\42\0\1\u0100\27\0\1\4\3\0\20\4"+
    "\1\u0101\17\4\2\0\6\4\7\0\1\4\3\0\1\4"+
    "\1\u0102\36\4\2\0\6\4\7\0\1\4\3\0\20\4"+
    "\1\u0103\17\4\2\0\6\4\7\0\1\4\3\0\1\4"+
    "\1\u0104\36\4\2\0\6\4\31\0\1\u0105\73\0\1\u0106"+
    "\27\0\1\4\3\0\20\4\1\u0107\17\4\2\0\6\4"+
    "\7\0\1\4\3\0\31\4\1\u0108\6\4\2\0\6\4"+
    "\7\0\1\4\2\0\1\u0109\40\4\2\0\6\4\7\0"+
    "\1\4\3\0\2\4\1\u010a\35\4\2\0\6\4\7\0"+
    "\1\4\3\0\1\4\1\u010b\36\4\2\0\6\4\46\0"+
    "\1\u010c\23\0\1\4\3\0\20\4\1\u010d\17\4\2\0"+
    "\6\4\7\0\1\4\3\0\4\4\1\u010e\33\4\2\0"+
    "\6\4\7\0\1\4\3\0\40\4\2\0\2\4\1\u010f"+
    "\3\4\7\0\1\4\3\0\17\4\1\u0110\20\4\2\0"+
    "\6\4\7\0\1\4\3\0\11\4\1\u0111\26\4\2\0"+
    "\6\4\7\0\1\4\3\0\4\4\1\u0112\33\4\2\0"+
    "\6\4\7\0\1\4\3\0\40\4\2\0\1\4\1\u0113"+
    "\4\4\26\0\1\u0114\43\0\1\4\2\0\1\u0115\40\4"+
    "\2\0\6\4\7\0\1\4\3\0\16\4\1\u0116\21\4"+
    "\2\0\6\4\7\0\1\4\3\0\2\4\1\u0117\35\4"+
    "\2\0\6\4\33\0\1\u0118\36\0\1\4\3\0\11\4"+
    "\1\u0119\26\4\2\0\6\4\7\0\1\4\3\0\33\4"+
    "\1\u011a\4\4\2\0\6\4\12\0\1\u011b\103\0\1\u011c"+
    "\36\0\1\4\3\0\20\4\1\u011d\17\4\2\0\6\4"+
    "\31\0\1\u011e\40\0\1\4\3\0\15\4\1\u011f\22\4"+
    "\2\0\6\4\7\0\1\4\3\0\33\4\1\u0120\4\4"+
    "\2\0\6\4\31\0\1\u0121\40\0\1\4\3\0\1\4"+
    "\1\u0122\36\4\2\0\6\4\7\0\1\4\3\0\4\4"+
    "\1\u0123\33\4\2\0\6\4\7\0\1\4\3\0\16\4"+
    "\1\u0124\21\4\2\0\6\4\7\0\1\4\3\0\20\4"+
    "\1\u0125\17\4\2\0\6\4\7\0\1\4\3\0\24\4"+
    "\1\u0126\13\4\2\0\6\4\31\0\1\u0127\77\0\1\u0128"+
    "\23\0\1\4\3\0\4\4\1\u0129\33\4\2\0\6\4"+
    "\43\0\1\u012a\26\0\1\4\3\0\1\4\1\u012b\36\4"+
    "\2\0\6\4\32\0\1\u012c\3\0\1\u012d\4\0\1\u012e"+
    "\14\0\1\u012f\45\0\1\u0130\34\0\1\u0131\54\0\1\4"+
    "\3\0\1\4\1\u0132\36\4\2\0\6\4\12\0\1\u0133"+
    "\57\0\1\4\3\0\16\4\1\u0134\21\4\2\0\6\4"+
    "\14\0\1\u0135\77\0\1\u0136\40\0\1\4\3\0\15\4"+
    "\1\u0137\22\4\2\0\6\4\14\0\1\u0138\101\0\1\u0139"+
    "\66\0\1\u013a\42\0\1\u013b\71\0\1\u013c\50\0\1\u013d"+
    "\60\0\1\u013e\76\0\1\u013f\13\0\1\u0140\2\0\1\u0141"+
    "\24\0\1\4\3\0\11\4\1\u0142\26\4\2\0\6\4"+
    "\43\0\1\u0143\31\0\1\u0144\57\0\1\4\3\0\20\4"+
    "\1\u0145\17\4\2\0\6\4\26\0\1\u0146\65\0\1\u0147"+
    "\63\0\1\u0148\61\0\1\u0149\77\0\1\u014a\56\0\1\u014b"+
    "\51\0\1\u014c\45\0\1\u014d\101\0\1\u014e\36\0\1\4"+
    "\3\0\1\4\1\u014f\36\4\2\0\6\4\17\0\1\u0150"+
    "\72\0\1\u0151\12\0\1\u0152\34\0\1\u0153\72\0\1\u0154"+
    "\71\0\1\u0155\20\0\1\u0155\32\0\1\u0156\52\0\1\u0157"+
    "\62\0\1\u0158\72\0\1\u0159\70\0\1\u015a\73\0\1\u015b"+
    "\63\0\1\u015c\32\0\1\u015d\62\0\1\u015e\101\0\1\u015f"+
    "\44\0\1\u0160\61\0\1\u0161\74\0\1\u0162\50\0\1\u0163"+
    "\111\0\1\u0164\33\0\1\u0165\65\0\1\u0166\105\0\1\u0167"+
    "\34\0\1\u0168\74\0\1\u0169\67\0\1\u016a\55\0\1\u016b"+
    "\51\0\1\u016c\61\0\1\u016d\100\0\1\u016e\63\0\1\u016f"+
    "\20\0\1\u016f\25\0\1\u0170\76\0\1\u0171\60\0\1\u0172"+
    "\46\0\1\u0173\110\0\1\u0174\62\0\1\u0175\62\0\1\u0176"+
    "\52\0\1\u0177\43\0\1\u0178\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15759];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\122\1\1\0\74\1\1\0\23\1\1\11"+
    "\25\1\1\0\13\1\1\11\30\1\1\0\6\1\2\0"+
    "\7\1\1\0\11\1\1\0\4\1\1\0\4\1\2\0"+
    "\2\1\1\0\2\1\1\0\7\1\2\0\2\1\1\0"+
    "\2\1\2\0\1\1\1\0\2\1\1\0\5\1\2\0"+
    "\1\1\1\0\1\1\6\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\11\11\0\1\1\2\0\1\1\11\0\1\1"+
    "\3\0\1\11\3\0\1\11\1\0\1\11\5\0\3\11"+
    "\10\0\2\11\5\0\1\11\1\0\1\11\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { lexeme=yytext(); return SEIS;
          }
        case 71: break;
        case 41: 
          { lexeme=yytext(); return CUATRO;
          }
        case 72: break;
        case 55: 
          { lexeme=yytext(); return NARANJADA;
          }
        case 73: break;
        case 23: 
          { lexeme=yytext(); return ONCE;
          }
        case 74: break;
        case 56: 
          { lexeme=yytext(); return COCA_COLA;
          }
        case 75: break;
        case 54: 
          { lexeme=yytext(); return LIMONADA;
          }
        case 76: break;
        case 11: 
          { lexeme=yytext(); return VER;
          }
        case 77: break;
        case 43: 
          { lexeme=yytext(); return PEDIDO;
          }
        case 78: break;
        case 14: 
          { lexeme=yytext(); return LAS;
          }
        case 79: break;
        case 12: 
          { lexeme=yytext(); return OYE;
          }
        case 80: break;
        case 58: 
          { lexeme=yytext(); return HAMBURGUESA_ARROZ;
          }
        case 81: break;
        case 17: 
          { lexeme=yytext(); return DOS;
          }
        case 82: break;
        case 40: 
          { lexeme=yytext(); return CORONA;
          }
        case 83: break;
        case 10: 
          { lexeme=yytext(); return DE;
          }
        case 84: break;
        case 53: 
          { lexeme=yytext(); return EXPRESSO;
          }
        case 85: break;
        case 32: 
          { lexeme=yytext(); return CARTA;
          }
        case 86: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 87: break;
        case 61: 
          { lexeme=yytext(); return SUSHI_RES;
          }
        case 88: break;
        case 59: 
          { lexeme=yytext(); return PIE_MORA;
          }
        case 89: break;
        case 22: 
          { lexeme=yytext(); return MENU;
          }
        case 90: break;
        case 38: 
          { lexeme=yytext(); return QUINCE;
          }
        case 91: break;
        case 57: 
          { lexeme=yytext(); return CAMARONITO;
          }
        case 92: break;
        case 27: 
          { lexeme=yytext(); return DOCE;
          }
        case 93: break;
        case 65: 
          { lexeme=yytext(); return SUSHI_POLLO;
          }
        case 94: break;
        case 5: 
          { lexeme=yytext(); return Y;
          }
        case 95: break;
        case 15: 
          { lexeme=yytext(); return LOS;
          }
        case 96: break;
        case 28: 
          { lexeme=yytext(); return SANJI;
          }
        case 97: break;
        case 64: 
          { lexeme=yytext(); return PIE_FRESA;
          }
        case 98: break;
        case 21: 
          { lexeme=yytext(); return TRES;
          }
        case 99: break;
        case 47: 
          { lexeme=yytext(); return CHURROS;
          }
        case 100: break;
        case 13: 
          { lexeme=yytext(); return CANT_UNA;
          }
        case 101: break;
        case 18: 
          { lexeme=yytext(); return JUGO;
          }
        case 102: break;
        case 63: 
          { lexeme=yytext(); return PIE_LIMON;
          }
        case 103: break;
        case 8: 
          { lexeme=yytext(); return CANT_UN;
          }
        case 104: break;
        case 51: 
          { lexeme=yytext(); return TERIYAKI;
          }
        case 105: break;
        case 36: 
          { lexeme=yytext(); return PEPSI;
          }
        case 106: break;
        case 9: 
          { lexeme=yytext(); return LA;
          }
        case 107: break;
        case 34: 
          { lexeme=yytext(); return LISTO;
          }
        case 108: break;
        case 67: 
          { lexeme=yytext(); return HELADO_CACAO;
          }
        case 109: break;
        case 25: 
          { lexeme=yytext(); return CAFE;
          }
        case 110: break;
        case 44: 
          { lexeme=yytext(); return VAMPIRO;
          }
        case 111: break;
        case 20: 
          { lexeme=yytext(); return TRAER;
          }
        case 112: break;
        case 29: 
          { lexeme=yytext(); return NUEVE;
          }
        case 113: break;
        case 24: 
          { lexeme=yytext(); return OCHO;
          }
        case 114: break;
        case 52: 
          { lexeme=yytext(); return MOSTRAR;
          }
        case 115: break;
        case 35: 
          { lexeme=yytext(); return LEER;
          }
        case 116: break;
        case 37: 
          { lexeme = yytext(); return FAVOR;
          }
        case 117: break;
        case 39: 
          { lexeme=yytext(); return QUIERO;
          }
        case 118: break;
        case 60: 
          { lexeme=yytext(); return PIÑA_COLADA;
          }
        case 119: break;
        case 30: 
          { lexeme=yytext(); return SIETE;
          }
        case 120: break;
        case 1: 
          { lexeme=yytext(); return CADENA;
          }
        case 121: break;
        case 48: 
          { lexeme=yytext(); return BOMBAZO;
          }
        case 122: break;
        case 46: 
          { lexeme=yytext(); return CATORCE;
          }
        case 123: break;
        case 31: 
          { lexeme=yytext(); return TRECE;
          }
        case 124: break;
        case 62: 
          { lexeme=yytext(); return PIE_QUESO;
          }
        case 125: break;
        case 49: 
          { lexeme=yytext(); return FONDANT;
          }
        case 126: break;
        case 42: 
          { lexeme=yytext(); return CUENTA;
          }
        case 127: break;
        case 2: 
          { return ERROR;
          }
        case 128: break;
        case 7: 
          { lexeme=yytext(); return EL;
          }
        case 129: break;
        case 69: 
          { lexeme=yytext(); return FRUTA_CARAMELO;
          }
        case 130: break;
        case 70: 
          { lexeme=yytext(); return HELADO_VAINILLA;
          }
        case 131: break;
        case 45: 
          { lexeme=yytext(); return MARTINI;
          }
        case 132: break;
        case 6: 
          { lexeme=yytext(); return Coma;
          }
        case 133: break;
        case 4: 
          { /*Ignore*/
          }
        case 134: break;
        case 68: 
          { lexeme=yytext(); return SUSHI_CAMARON;
          }
        case 135: break;
        case 33: 
          { lexeme=yytext(); return CINCO;
          }
        case 136: break;
        case 26: 
          { lexeme=yytext(); return DIEZ;
          }
        case 137: break;
        case 66: 
          { lexeme=yytext(); return HACER;
          }
        case 138: break;
        case 16: 
          { lexeme = yytext(); return POR;
          }
        case 139: break;
        case 50: 
          { lexeme=yytext(); return VICTORIA;
          }
        case 140: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
