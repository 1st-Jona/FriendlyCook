/* The following code was generated by JFlex 1.4.3 on 22/12/20 03:38 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/12/20 03:38 PM from the specification file
 * <tt>C:/FriendlyCook/FriendlyCook/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\56\2\0\1\3\22\0\1\5\7\0\1\57\1\61"+
    "\2\0\1\4\1\60\1\0\1\55\12\1\7\0\1\13\7\2\1\16"+
    "\1\15\2\2\1\20\1\14\1\30\1\2\1\33\1\2\1\6\7\2"+
    "\4\0\2\2\1\7\1\47\1\35\1\41\1\24\1\52\1\50\1\34"+
    "\1\12\1\11\1\51\1\36\1\25\1\10\1\26\1\40\1\31\1\21"+
    "\1\17\1\23\1\32\1\22\1\2\1\53\1\27\1\37\146\2\1\42"+
    "\7\2\1\44\3\2\1\54\3\2\1\43\1\0\1\46\6\0\1\45"+
    "\uff05\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\2\4\12\1\1\5\13\1"+
    "\2\2\1\6\17\1\1\7\11\1\1\10\10\1\1\11"+
    "\11\1\1\12\5\1\1\4\1\0\13\1\1\13\13\1"+
    "\1\14\2\1\1\15\16\1\1\16\2\1\1\17\4\1"+
    "\1\20\3\1\1\21\5\1\1\0\4\1\1\22\1\1"+
    "\1\23\4\1\1\24\1\25\5\1\2\26\1\1\1\27"+
    "\1\30\10\1\1\31\10\1\1\0\3\1\1\24\1\32"+
    "\1\1\1\33\4\1\1\3\1\34\1\1\1\35\1\36"+
    "\4\1\1\37\12\1\1\40\2\1\1\41\1\1\1\0"+
    "\4\1\1\42\2\0\1\43\2\1\1\44\3\1\1\0"+
    "\6\1\1\45\1\46\1\1\1\0\3\1\1\47\1\0"+
    "\1\50\1\51\2\1\2\0\1\52\1\1\1\0\2\1"+
    "\1\0\1\53\4\1\1\54\1\1\2\0\1\55\1\1"+
    "\1\0\1\56\1\1\2\0\1\57\1\0\1\60\1\1"+
    "\1\0\1\61\1\62\1\63\1\64\1\1\2\0\1\1"+
    "\1\0\1\65\6\0\1\66\1\0\1\1\2\0\1\1"+
    "\1\67\11\0\1\1\2\0\1\70\11\0\1\71\3\0"+
    "\1\72\3\0\1\73\1\0\1\74\5\0\1\75\1\76"+
    "\1\77\10\0\1\100\1\101\5\0\1\102\1\0\1\103"+
    "\3\0\1\104\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\226\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\310\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a"+
    "\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\226\0\u0898"+
    "\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\u0dac\0\u0dde\0\226\0\u0e10\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036"+
    "\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\226\0\u1194"+
    "\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324"+
    "\0\u1356\0\u1388\0\226\0\u13ba\0\u13ec\0\226\0\u141e\0\u1450"+
    "\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0"+
    "\0\u1612\0\u1644\0\u1676\0\u16a8\0\226\0\u16da\0\u170c\0\226"+
    "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\226\0\u1806\0\u1838\0\u186a"+
    "\0\226\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u19fa\0\u1a2c\0\u1a5e\0\226\0\u1a90\0\226\0\u1ac2\0\u1af4"+
    "\0\u1b26\0\u1b58\0\u0dac\0\226\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20"+
    "\0\u1c52\0\226\0\62\0\u1c84\0\226\0\226\0\u1cb6\0\u1ce8"+
    "\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\226\0\u1e46"+
    "\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6"+
    "\0\u2008\0\u203a\0\u206c\0\226\0\226\0\u209e\0\226\0\u20d0"+
    "\0\u2102\0\u2134\0\u2166\0\62\0\226\0\u2198\0\226\0\226"+
    "\0\u21ca\0\u21fc\0\u222e\0\u2260\0\226\0\u2292\0\u22c4\0\u22f6"+
    "\0\u2328\0\u235a\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454\0\226"+
    "\0\u2486\0\u24b8\0\226\0\u24ea\0\u251c\0\u254e\0\u2580\0\u25b2"+
    "\0\u25e4\0\226\0\u2616\0\u2648\0\226\0\u267a\0\u26ac\0\226"+
    "\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c"+
    "\0\u286e\0\u28a0\0\226\0\226\0\u28d2\0\u2904\0\u2936\0\u2968"+
    "\0\u299a\0\226\0\u29cc\0\226\0\226\0\u29fe\0\u2a30\0\u2a62"+
    "\0\u2a94\0\226\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\226"+
    "\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\226\0\u2c88\0\u2cba\0\u2cec"+
    "\0\226\0\u2d1e\0\u2d50\0\226\0\u2d82\0\u2db4\0\u2de6\0\226"+
    "\0\u2e18\0\226\0\u2e4a\0\u2e7c\0\226\0\226\0\226\0\226"+
    "\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\226\0\u2fa8\0\u2fda"+
    "\0\u300c\0\u303e\0\u3070\0\u30a2\0\226\0\u30d4\0\u3106\0\u3138"+
    "\0\u316a\0\u319c\0\62\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296"+
    "\0\u32c8\0\u32fa\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4\0\226"+
    "\0\u3426\0\u3458\0\u348a\0\u34bc\0\u34ee\0\u3520\0\u3552\0\u3584"+
    "\0\u35b6\0\226\0\u35e8\0\u361a\0\u364c\0\62\0\u367e\0\u36b0"+
    "\0\u36e2\0\62\0\u3714\0\62\0\u3746\0\u3778\0\u37aa\0\u37dc"+
    "\0\u380e\0\62\0\62\0\62\0\u3840\0\u3872\0\u38a4\0\u38d6"+
    "\0\u3908\0\u393a\0\u396c\0\u399e\0\62\0\62\0\u39d0\0\u3a02"+
    "\0\u3a34\0\u3a66\0\u3a98\0\62\0\u3aca\0\62\0\u3afc\0\u3b2e"+
    "\0\u3b60\0\62\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\4"+
    "\1\10\1\11\5\4\1\12\1\13\1\4\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\4\1\31\1\32\3\4\2\2"+
    "\1\33\2\4\1\34\2\4\1\35\1\5\1\36\2\2"+
    "\63\0\1\3\62\0\1\4\3\0\37\4\2\0\6\4"+
    "\10\0\3\5\50\0\1\5\6\0\2\5\1\37\50\0"+
    "\1\5\5\0\1\4\3\0\1\4\1\40\3\4\1\41"+
    "\31\4\2\0\6\4\7\0\1\4\3\0\1\4\1\42"+
    "\22\4\1\43\12\4\2\0\6\4\7\0\1\4\3\0"+
    "\24\4\1\44\12\4\2\0\6\4\7\0\1\4\3\0"+
    "\1\4\1\40\2\4\1\45\11\4\1\46\5\4\1\47"+
    "\12\4\2\0\6\4\7\0\1\4\3\0\1\4\1\50"+
    "\35\4\2\0\6\4\7\0\1\4\3\0\1\4\1\51"+
    "\2\4\1\52\11\4\1\53\20\4\2\0\6\4\7\0"+
    "\1\4\3\0\13\4\1\54\2\4\1\55\20\4\2\0"+
    "\6\4\7\0\1\4\3\0\2\4\1\56\25\4\1\57"+
    "\6\4\2\0\4\4\1\60\1\4\7\0\1\4\3\0"+
    "\1\4\1\61\2\4\1\62\11\4\1\63\5\4\1\64"+
    "\12\4\2\0\6\4\7\0\1\4\3\0\2\4\1\65"+
    "\16\4\1\66\5\4\1\67\7\4\2\0\6\4\7\0"+
    "\1\4\3\0\21\4\1\66\15\4\2\0\6\4\7\0"+
    "\1\4\3\0\24\4\1\70\12\4\2\0\6\4\7\0"+
    "\1\4\3\0\2\4\1\71\34\4\2\0\6\4\7\0"+
    "\1\4\3\0\24\4\1\72\12\4\2\0\6\4\7\0"+
    "\1\4\3\0\1\4\1\73\14\4\1\74\20\4\2\0"+
    "\6\4\7\0\1\4\3\0\1\4\1\75\2\4\1\76"+
    "\13\4\1\77\3\4\1\100\1\4\1\101\10\4\2\0"+
    "\6\4\7\0\1\4\3\0\1\4\1\102\2\4\1\103"+
    "\11\4\1\104\1\4\1\105\15\4\1\104\2\0\6\4"+
    "\7\0\1\4\3\0\1\4\1\106\2\4\1\107\11\4"+
    "\1\110\1\4\1\111\16\4\2\0\6\4\7\0\1\4"+
    "\3\0\1\4\1\112\2\4\1\113\11\4\1\114\1\4"+
    "\1\115\16\4\2\0\6\4\7\0\1\4\3\0\20\4"+
    "\1\116\16\4\2\0\6\4\7\0\1\4\3\0\1\4"+
    "\1\117\11\4\1\120\4\4\1\121\16\4\2\0\6\4"+
    "\62\0\1\122\64\0\1\123\3\0\1\4\3\0\2\4"+
    "\1\124\34\4\2\0\6\4\7\0\1\4\3\0\6\4"+
    "\1\125\30\4\2\0\6\4\7\0\1\4\3\0\13\4"+
    "\1\126\23\4\2\0\6\4\7\0\1\4\3\0\16\4"+
    "\1\127\20\4\2\0\6\4\7\0\1\4\3\0\37\4"+
    "\2\0\1\4\1\130\4\4\7\0\1\4\3\0\16\4"+
    "\1\131\20\4\2\0\6\4\7\0\1\4\3\0\4\4"+
    "\1\132\32\4\2\0\6\4\7\0\1\4\3\0\11\4"+
    "\1\133\25\4\2\0\6\4\7\0\1\4\3\0\13\4"+
    "\1\134\23\4\2\0\6\4\7\0\1\4\3\0\17\4"+
    "\1\135\17\4\2\0\6\4\7\0\1\4\3\0\27\4"+
    "\1\136\7\4\2\0\6\4\7\0\1\4\3\0\13\4"+
    "\1\137\23\4\2\0\6\4\7\0\1\4\3\0\1\4"+
    "\1\140\14\4\1\141\15\4\1\142\2\4\2\0\6\4"+
    "\7\0\1\4\3\0\13\4\1\143\23\4\2\0\6\4"+
    "\7\0\1\4\3\0\11\4\1\144\25\4\2\0\6\4"+
    "\7\0\1\4\3\0\32\4\1\145\4\4\2\0\6\4"+
    "\7\0\1\4\3\0\13\4\1\146\23\4\2\0\6\4"+
    "\7\0\1\4\3\0\13\4\1\147\23\4\2\0\6\4"+
    "\7\0\1\4\3\0\2\4\1\150\34\4\2\0\6\4"+
    "\7\0\1\4\3\0\16\4\1\151\17\4\1\151\2\0"+
    "\6\4\7\0\1\4\3\0\27\4\1\152\7\4\2\0"+
    "\6\4\7\0\1\4\3\0\16\4\1\153\20\4\2\0"+
    "\6\4\7\0\1\4\3\0\26\4\1\154\10\4\2\0"+
    "\6\4\7\0\1\4\3\0\4\4\1\155\32\4\2\0"+
    "\6\4\7\0\1\4\3\0\1\4\1\156\35\4\2\0"+
    "\6\4\7\0\1\4\3\0\4\4\1\157\32\4\2\0"+
    "\6\4\7\0\1\4\3\0\17\4\1\160\7\4\1\161"+
    "\7\4\2\0\6\4\7\0\1\4\3\0\30\4\1\162"+
    "\6\4\2\0\6\4\7\0\1\4\3\0\13\4\1\163"+
    "\1\4\1\164\1\4\1\165\17\4\2\0\3\4\1\166"+
    "\2\4\7\0\1\4\3\0\2\4\1\167\34\4\2\0"+
    "\6\4\7\0\1\4\3\0\13\4\1\170\13\4\1\171"+
    "\7\4\2\0\6\4\7\0\1\4\3\0\1\4\1\172"+
    "\14\4\1\173\20\4\2\0\6\4\7\0\1\4\3\0"+
    "\24\4\1\174\12\4\2\0\6\4\7\0\1\4\3\0"+
    "\11\4\1\175\25\4\2\0\6\4\7\0\1\4\3\0"+
    "\17\4\1\176\17\4\2\0\6\4\7\0\1\4\3\0"+
    "\16\4\1\177\20\4\2\0\6\4\7\0\1\4\3\0"+
    "\11\4\1\200\25\4\2\0\6\4\7\0\1\4\3\0"+
    "\21\4\1\201\15\4\2\0\6\4\7\0\1\4\3\0"+
    "\35\4\1\202\1\4\2\0\6\4\7\0\1\4\3\0"+
    "\32\4\1\203\1\204\3\4\2\0\6\4\7\0\1\4"+
    "\3\0\13\4\1\205\23\4\2\0\6\4\7\0\1\4"+
    "\3\0\17\4\1\206\17\4\2\0\6\4\7\0\1\4"+
    "\3\0\16\4\1\207\10\4\1\210\7\4\2\0\6\4"+
    "\7\0\1\4\3\0\11\4\1\211\15\4\1\212\7\4"+
    "\2\0\6\4\7\0\1\4\3\0\17\4\1\213\17\4"+
    "\2\0\6\4\7\0\1\4\3\0\14\4\1\214\22\4"+
    "\2\0\6\4\7\0\1\4\3\0\24\4\1\215\12\4"+
    "\2\0\6\4\7\0\1\4\3\0\2\4\1\216\34\4"+
    "\2\0\6\4\5\0\56\122\1\0\3\122\1\0\1\217"+
    "\62\0\1\4\3\0\3\4\1\220\33\4\2\0\6\4"+
    "\7\0\1\4\3\0\7\4\1\221\27\4\2\0\6\4"+
    "\7\0\1\4\3\0\1\4\1\222\35\4\2\0\6\4"+
    "\7\0\1\4\3\0\14\4\1\223\22\4\2\0\6\4"+
    "\7\0\1\4\3\0\20\4\1\224\16\4\2\0\6\4"+
    "\7\0\1\4\3\0\15\4\1\225\21\4\2\0\6\4"+
    "\7\0\1\4\3\0\11\4\1\226\25\4\2\0\6\4"+
    "\7\0\1\4\3\0\26\4\1\227\10\4\2\0\6\4"+
    "\7\0\1\4\3\0\14\4\1\230\22\4\2\0\6\4"+
    "\7\0\1\4\3\0\32\4\1\231\4\4\2\0\6\4"+
    "\7\0\1\4\3\0\15\4\1\232\21\4\2\0\6\4"+
    "\7\0\1\4\3\0\16\4\1\233\20\4\2\0\6\4"+
    "\7\0\1\4\3\0\11\4\1\234\15\4\1\235\7\4"+
    "\2\0\6\4\7\0\1\4\3\0\16\4\1\112\20\4"+
    "\2\0\6\4\7\0\1\4\3\0\4\4\1\236\32\4"+
    "\2\0\6\4\7\0\1\4\3\0\16\4\1\237\20\4"+
    "\2\0\6\4\7\0\1\4\3\0\13\4\1\240\23\4"+
    "\2\0\6\4\7\0\1\4\3\0\15\4\1\241\21\4"+
    "\2\0\6\4\7\0\1\4\3\0\1\4\1\53\35\4"+
    "\2\0\6\4\7\0\1\4\3\0\24\4\1\242\12\4"+
    "\1\243\1\0\6\4\7\0\1\4\3\0\11\4\1\244"+
    "\25\4\2\0\6\4\7\0\1\4\3\0\16\4\1\245"+
    "\20\4\2\0\6\4\7\0\1\4\3\0\20\4\1\246"+
    "\16\4\2\0\6\4\7\0\1\4\3\0\2\4\1\247"+
    "\13\4\1\250\20\4\2\0\6\4\7\0\1\4\3\0"+
    "\16\4\1\250\20\4\2\0\6\4\7\0\1\4\3\0"+
    "\37\4\2\0\1\251\5\4\7\0\1\4\3\0\16\4"+
    "\1\252\20\4\2\0\6\4\7\0\1\4\3\0\1\4"+
    "\1\253\35\4\2\0\6\4\7\0\1\4\3\0\15\4"+
    "\1\254\21\4\2\0\6\4\7\0\1\4\3\0\20\4"+
    "\1\255\16\4\2\0\6\4\7\0\1\4\3\0\1\4"+
    "\1\256\35\4\2\0\6\4\7\0\1\4\3\0\16\4"+
    "\1\257\20\4\2\0\6\4\7\0\1\4\3\0\27\4"+
    "\1\260\7\4\2\0\6\4\7\0\1\4\3\0\20\4"+
    "\1\261\16\4\2\0\6\4\7\0\1\4\3\0\1\4"+
    "\1\262\35\4\2\0\6\4\7\0\1\4\3\0\15\4"+
    "\1\263\21\4\2\0\6\4\7\0\1\4\3\0\2\4"+
    "\1\264\34\4\2\0\6\4\7\0\1\4\3\0\13\4"+
    "\1\265\23\4\2\0\6\4\7\0\1\4\3\0\20\4"+
    "\1\266\16\4\2\0\6\4\7\0\1\4\3\0\17\4"+
    "\1\267\17\4\2\0\6\4\7\0\1\4\2\0\1\270"+
    "\37\4\2\0\6\4\7\0\1\4\3\0\1\4\1\271"+
    "\35\4\2\0\6\4\7\0\1\4\3\0\11\4\1\272"+
    "\25\4\2\0\6\4\7\0\1\4\3\0\4\4\1\273"+
    "\32\4\2\0\6\4\7\0\1\4\3\0\16\4\1\274"+
    "\20\4\2\0\6\4\7\0\1\4\3\0\31\4\1\275"+
    "\5\4\2\0\6\4\7\0\1\4\3\0\15\4\1\276"+
    "\21\4\2\0\6\4\7\0\1\4\3\0\16\4\1\277"+
    "\20\4\2\0\6\4\7\0\1\4\3\0\37\4\2\0"+
    "\1\300\5\4\7\0\1\4\3\0\20\4\1\301\16\4"+
    "\2\0\6\4\7\0\1\4\3\0\15\4\1\302\21\4"+
    "\2\0\6\4\7\0\1\4\3\0\33\4\1\303\3\4"+
    "\2\0\6\4\6\0\1\217\57\0\1\304\2\0\1\4"+
    "\3\0\4\4\1\305\32\4\2\0\6\4\7\0\1\4"+
    "\3\0\10\4\1\305\26\4\2\0\6\4\7\0\1\4"+
    "\3\0\2\4\1\306\34\4\2\0\6\4\7\0\1\4"+
    "\3\0\16\4\1\307\20\4\2\0\6\4\7\0\1\4"+
    "\3\0\16\4\1\310\20\4\2\0\6\4\7\0\1\4"+
    "\3\0\4\4\1\311\32\4\2\0\6\4\7\0\1\4"+
    "\3\0\4\4\1\312\32\4\2\0\6\4\7\0\1\4"+
    "\3\0\4\4\1\313\32\4\2\0\6\4\7\0\1\4"+
    "\3\0\20\4\1\314\16\4\2\0\6\4\7\0\1\4"+
    "\3\0\16\4\1\315\20\4\2\0\6\4\7\0\1\4"+
    "\3\0\21\4\1\316\15\4\2\0\6\4\7\0\1\4"+
    "\3\0\35\4\1\317\1\4\2\0\6\4\7\0\1\4"+
    "\3\0\16\4\1\320\20\4\2\0\6\4\7\0\1\4"+
    "\3\0\4\4\1\321\32\4\2\0\5\4\1\321\7\0"+
    "\1\4\3\0\15\4\1\322\21\4\2\0\6\4\7\0"+
    "\1\4\3\0\27\4\1\323\7\4\2\0\6\4\7\0"+
    "\1\4\3\0\13\4\1\324\23\4\2\0\6\4\7\0"+
    "\1\4\3\0\24\4\1\325\12\4\2\0\6\4\7\0"+
    "\1\4\3\0\13\4\1\326\23\4\2\0\6\4\7\0"+
    "\1\4\3\0\33\4\1\327\3\4\2\0\6\4\7\0"+
    "\1\4\3\0\1\4\1\330\35\4\2\0\6\4\7\0"+
    "\1\4\3\0\13\4\1\331\23\4\2\0\6\4\7\0"+
    "\1\4\3\0\13\4\1\332\23\4\2\0\6\4\7\0"+
    "\1\4\3\0\20\4\1\333\16\4\2\0\6\4\7\0"+
    "\1\4\3\0\2\4\1\334\34\4\2\0\6\4\7\0"+
    "\1\4\2\0\1\335\37\4\2\0\6\4\7\0\1\4"+
    "\3\0\13\4\1\336\23\4\2\0\6\4\7\0\1\4"+
    "\3\0\15\4\1\337\21\4\2\0\6\4\7\0\1\4"+
    "\3\0\13\4\1\340\23\4\2\0\6\4\7\0\1\4"+
    "\3\0\2\4\1\341\34\4\2\0\6\4\7\0\1\4"+
    "\3\0\16\4\1\342\20\4\2\0\6\4\46\0\1\343"+
    "\22\0\1\4\2\0\1\344\37\4\2\0\6\4\7\0"+
    "\1\4\3\0\4\4\1\345\32\4\2\0\6\4\7\0"+
    "\1\4\3\0\33\4\1\346\3\4\2\0\6\4\7\0"+
    "\1\4\3\0\1\4\1\177\35\4\2\0\6\4\7\0"+
    "\1\4\3\0\1\4\1\347\35\4\2\0\6\4\7\0"+
    "\1\4\3\0\13\4\1\350\23\4\2\0\6\4\7\0"+
    "\1\4\3\0\1\4\1\351\35\4\2\0\6\4\7\0"+
    "\1\4\3\0\1\4\1\352\35\4\2\0\6\4\7\0"+
    "\1\4\3\0\3\4\1\353\33\4\2\0\6\4\7\0"+
    "\1\4\2\0\1\354\37\4\2\0\6\4\7\0\1\4"+
    "\3\0\2\4\1\305\34\4\2\0\6\4\7\0\1\4"+
    "\3\0\13\4\1\355\23\4\2\0\6\4\7\0\1\4"+
    "\3\0\13\4\1\356\23\4\2\0\6\4\7\0\1\4"+
    "\3\0\1\4\1\357\35\4\2\0\6\4\7\0\1\4"+
    "\3\0\1\4\1\360\35\4\2\0\6\4\7\0\1\4"+
    "\3\0\11\4\1\361\25\4\2\0\6\4\7\0\1\4"+
    "\3\0\2\4\1\362\34\4\2\0\6\4\7\0\1\4"+
    "\3\0\13\4\1\317\23\4\2\0\6\4\7\0\1\4"+
    "\3\0\16\4\1\363\20\4\2\0\6\4\7\0\1\4"+
    "\3\0\20\4\1\364\16\4\2\0\6\4\7\0\1\4"+
    "\3\0\13\4\1\365\23\4\2\0\6\4\7\0\1\4"+
    "\1\0\1\366\1\0\37\4\2\0\6\4\7\0\1\4"+
    "\3\0\20\4\1\367\16\4\2\0\6\4\7\0\1\4"+
    "\3\0\27\4\1\370\7\4\2\0\6\4\7\0\1\4"+
    "\3\0\20\4\1\371\16\4\2\0\6\4\7\0\1\4"+
    "\3\0\1\4\1\372\35\4\2\0\6\4\42\0\1\373"+
    "\26\0\1\4\3\0\20\4\1\374\16\4\2\0\6\4"+
    "\7\0\1\4\3\0\1\4\1\375\35\4\2\0\6\4"+
    "\7\0\1\4\3\0\20\4\1\376\16\4\2\0\6\4"+
    "\7\0\1\4\3\0\1\4\1\377\35\4\2\0\6\4"+
    "\31\0\1\u0100\72\0\1\u0101\26\0\1\4\3\0\20\4"+
    "\1\u0102\16\4\2\0\6\4\7\0\1\4\3\0\31\4"+
    "\1\u0103\5\4\2\0\6\4\7\0\1\4\2\0\1\u0104"+
    "\37\4\2\0\6\4\7\0\1\4\3\0\2\4\1\u0105"+
    "\34\4\2\0\6\4\7\0\1\4\3\0\1\4\1\u0106"+
    "\35\4\2\0\6\4\46\0\1\u0107\22\0\1\4\3\0"+
    "\20\4\1\u0108\16\4\2\0\6\4\7\0\1\4\3\0"+
    "\4\4\1\u0109\32\4\2\0\6\4\7\0\1\4\3\0"+
    "\37\4\2\0\2\4\1\u010a\3\4\7\0\1\4\3\0"+
    "\17\4\1\u010b\17\4\2\0\6\4\7\0\1\4\3\0"+
    "\11\4\1\u010c\25\4\2\0\6\4\7\0\1\4\3\0"+
    "\4\4\1\u010d\32\4\2\0\6\4\7\0\1\4\3\0"+
    "\37\4\2\0\1\4\1\u010e\4\4\26\0\1\u010f\42\0"+
    "\1\4\2\0\1\u0110\37\4\2\0\6\4\7\0\1\4"+
    "\3\0\16\4\1\u0111\20\4\2\0\6\4\7\0\1\4"+
    "\3\0\2\4\1\u0112\34\4\2\0\6\4\33\0\1\u0113"+
    "\35\0\1\4\3\0\11\4\1\u0114\25\4\2\0\6\4"+
    "\7\0\1\4\3\0\33\4\1\u0115\3\4\2\0\6\4"+
    "\12\0\1\u0116\102\0\1\u0117\35\0\1\4\3\0\20\4"+
    "\1\u0118\16\4\2\0\6\4\31\0\1\u0119\37\0\1\4"+
    "\3\0\15\4\1\u011a\21\4\2\0\6\4\7\0\1\4"+
    "\3\0\33\4\1\u011b\3\4\2\0\6\4\31\0\1\u011c"+
    "\37\0\1\4\3\0\1\4\1\u011d\35\4\2\0\6\4"+
    "\7\0\1\4\3\0\4\4\1\u011e\32\4\2\0\6\4"+
    "\7\0\1\4\3\0\16\4\1\u011f\20\4\2\0\6\4"+
    "\7\0\1\4\3\0\20\4\1\u0120\16\4\2\0\6\4"+
    "\7\0\1\4\3\0\24\4\1\u0121\12\4\2\0\6\4"+
    "\31\0\1\u0122\76\0\1\u0123\22\0\1\4\3\0\4\4"+
    "\1\u0124\32\4\2\0\6\4\43\0\1\u0125\25\0\1\4"+
    "\3\0\1\4\1\u0126\35\4\2\0\6\4\32\0\1\u0127"+
    "\3\0\1\u0128\4\0\1\u0129\13\0\1\u012a\45\0\1\u012b"+
    "\33\0\1\u012c\53\0\1\4\3\0\1\4\1\u012d\35\4"+
    "\2\0\6\4\12\0\1\u012e\56\0\1\4\3\0\16\4"+
    "\1\u012f\20\4\2\0\6\4\14\0\1\u0130\76\0\1\u0131"+
    "\37\0\1\4\3\0\15\4\1\u0132\21\4\2\0\6\4"+
    "\14\0\1\u0133\100\0\1\u0134\65\0\1\u0135\41\0\1\u0136"+
    "\70\0\1\u0137\47\0\1\u0138\57\0\1\u0139\75\0\1\u013a"+
    "\13\0\1\u013b\2\0\1\u013c\23\0\1\4\3\0\11\4"+
    "\1\u013d\25\4\2\0\6\4\43\0\1\u013e\30\0\1\u013f"+
    "\56\0\1\4\3\0\20\4\1\u0140\16\4\2\0\6\4"+
    "\26\0\1\u0141\64\0\1\u0142\62\0\1\u0143\60\0\1\u0144"+
    "\76\0\1\u0145\55\0\1\u0146\50\0\1\u0147\44\0\1\u0148"+
    "\100\0\1\u0149\35\0\1\4\3\0\1\4\1\u014a\35\4"+
    "\2\0\6\4\17\0\1\u014b\71\0\1\u014c\12\0\1\u014d"+
    "\33\0\1\u014e\71\0\1\u014f\70\0\1\u0150\17\0\1\u0150"+
    "\32\0\1\u0151\51\0\1\u0152\61\0\1\u0153\71\0\1\u0154"+
    "\67\0\1\u0155\72\0\1\u0156\62\0\1\u0157\31\0\1\u0158"+
    "\61\0\1\u0159\100\0\1\u015a\43\0\1\u015b\60\0\1\u015c"+
    "\73\0\1\u015d\47\0\1\u015e\110\0\1\u015f\32\0\1\u0160"+
    "\64\0\1\u0161\104\0\1\u0162\33\0\1\u0163\73\0\1\u0164"+
    "\66\0\1\u0165\54\0\1\u0166\50\0\1\u0167\60\0\1\u0168"+
    "\77\0\1\u0169\62\0\1\u016a\17\0\1\u016a\25\0\1\u016b"+
    "\75\0\1\u016c\57\0\1\u016d\45\0\1\u016e\107\0\1\u016f"+
    "\61\0\1\u0170\61\0\1\u0171\51\0\1\u0172\42\0\1\u0173"+
    "\52\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15250];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\120\1\1\0\73\1\1\0\23\1\1\11"+
    "\24\1\1\0\13\1\1\11\30\1\1\0\5\1\2\0"+
    "\7\1\1\0\11\1\1\0\4\1\1\0\4\1\2\0"+
    "\2\1\1\0\2\1\1\0\7\1\2\0\2\1\1\0"+
    "\2\1\2\0\1\1\1\0\2\1\1\0\5\1\2\0"+
    "\1\1\1\0\1\1\6\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\11\11\0\1\1\2\0\1\1\11\0\1\1"+
    "\3\0\1\11\3\0\1\11\1\0\1\11\5\0\3\11"+
    "\10\0\2\11\5\0\1\11\1\0\1\11\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[371];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { lexeme=yytext(); return SEIS;
          }
        case 70: break;
        case 40: 
          { lexeme=yytext(); return CUATRO;
          }
        case 71: break;
        case 54: 
          { lexeme=yytext(); return NARANJADA;
          }
        case 72: break;
        case 23: 
          { lexeme=yytext(); return ONCE;
          }
        case 73: break;
        case 55: 
          { lexeme=yytext(); return COCA_COLA;
          }
        case 74: break;
        case 53: 
          { lexeme=yytext(); return LIMONADA;
          }
        case 75: break;
        case 11: 
          { lexeme=yytext(); return VER;
          }
        case 76: break;
        case 42: 
          { lexeme=yytext(); return PEDIDO;
          }
        case 77: break;
        case 14: 
          { lexeme=yytext(); return LAS;
          }
        case 78: break;
        case 12: 
          { lexeme=yytext(); return OYE;
          }
        case 79: break;
        case 57: 
          { lexeme=yytext(); return HAMBURGUESA_ARROZ;
          }
        case 80: break;
        case 17: 
          { lexeme=yytext(); return DOS;
          }
        case 81: break;
        case 39: 
          { lexeme=yytext(); return CORONA;
          }
        case 82: break;
        case 10: 
          { lexeme=yytext(); return DE;
          }
        case 83: break;
        case 52: 
          { lexeme=yytext(); return EXPRESSO;
          }
        case 84: break;
        case 32: 
          { lexeme=yytext(); return CARTA;
          }
        case 85: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 86: break;
        case 60: 
          { lexeme=yytext(); return SUSHI_RES;
          }
        case 87: break;
        case 58: 
          { lexeme=yytext(); return PIE_MORA;
          }
        case 88: break;
        case 22: 
          { lexeme=yytext(); return MENU;
          }
        case 89: break;
        case 37: 
          { lexeme=yytext(); return QUINCE;
          }
        case 90: break;
        case 56: 
          { lexeme=yytext(); return CAMARONITO;
          }
        case 91: break;
        case 27: 
          { lexeme=yytext(); return DOCE;
          }
        case 92: break;
        case 64: 
          { lexeme=yytext(); return SUSHI_POLLO;
          }
        case 93: break;
        case 5: 
          { lexeme=yytext(); return Y;
          }
        case 94: break;
        case 15: 
          { lexeme=yytext(); return LOS;
          }
        case 95: break;
        case 28: 
          { lexeme=yytext(); return SANJI;
          }
        case 96: break;
        case 63: 
          { lexeme=yytext(); return PIE_FRESA;
          }
        case 97: break;
        case 21: 
          { lexeme=yytext(); return TRES;
          }
        case 98: break;
        case 46: 
          { lexeme=yytext(); return CHURROS;
          }
        case 99: break;
        case 13: 
          { lexeme=yytext(); return CANT_UNA;
          }
        case 100: break;
        case 18: 
          { lexeme=yytext(); return JUGO;
          }
        case 101: break;
        case 62: 
          { lexeme=yytext(); return PIE_LIMON;
          }
        case 102: break;
        case 8: 
          { lexeme=yytext(); return CANT_UN;
          }
        case 103: break;
        case 50: 
          { lexeme=yytext(); return TERIYAKI;
          }
        case 104: break;
        case 9: 
          { lexeme=yytext(); return LA;
          }
        case 105: break;
        case 35: 
          { lexeme=yytext(); return PEPSI;
          }
        case 106: break;
        case 66: 
          { lexeme=yytext(); return HELADO_CACAO;
          }
        case 107: break;
        case 25: 
          { lexeme=yytext(); return CAFE;
          }
        case 108: break;
        case 43: 
          { lexeme=yytext(); return VAMPIRO;
          }
        case 109: break;
        case 20: 
          { lexeme=yytext(); return TRAER;
          }
        case 110: break;
        case 29: 
          { lexeme=yytext(); return NUEVE;
          }
        case 111: break;
        case 24: 
          { lexeme=yytext(); return OCHO;
          }
        case 112: break;
        case 51: 
          { lexeme=yytext(); return MOSTRAR;
          }
        case 113: break;
        case 34: 
          { lexeme=yytext(); return LEER;
          }
        case 114: break;
        case 36: 
          { lexeme = yytext(); return FAVOR;
          }
        case 115: break;
        case 38: 
          { lexeme=yytext(); return QUIERO;
          }
        case 116: break;
        case 59: 
          { lexeme=yytext(); return PIÑA_COLADA;
          }
        case 117: break;
        case 30: 
          { lexeme=yytext(); return SIETE;
          }
        case 118: break;
        case 1: 
          { lexeme=yytext(); return CADENA;
          }
        case 119: break;
        case 47: 
          { lexeme=yytext(); return BOMBAZO;
          }
        case 120: break;
        case 45: 
          { lexeme=yytext(); return CATORCE;
          }
        case 121: break;
        case 31: 
          { lexeme=yytext(); return TRECE;
          }
        case 122: break;
        case 61: 
          { lexeme=yytext(); return PIE_QUESO;
          }
        case 123: break;
        case 48: 
          { lexeme=yytext(); return FONDANT;
          }
        case 124: break;
        case 41: 
          { lexeme=yytext(); return CUENTA;
          }
        case 125: break;
        case 2: 
          { return ERROR;
          }
        case 126: break;
        case 7: 
          { lexeme=yytext(); return EL;
          }
        case 127: break;
        case 68: 
          { lexeme=yytext(); return FRUTA_CARAMELO;
          }
        case 128: break;
        case 69: 
          { lexeme=yytext(); return HELADO_VAINILLA;
          }
        case 129: break;
        case 44: 
          { lexeme=yytext(); return MARTINI;
          }
        case 130: break;
        case 6: 
          { lexeme=yytext(); return Coma;
          }
        case 131: break;
        case 4: 
          { /*Ignore*/
          }
        case 132: break;
        case 67: 
          { lexeme=yytext(); return SUSHI_CAMARON;
          }
        case 133: break;
        case 33: 
          { lexeme=yytext(); return CINCO;
          }
        case 134: break;
        case 26: 
          { lexeme=yytext(); return DIEZ;
          }
        case 135: break;
        case 65: 
          { lexeme=yytext(); return HACER;
          }
        case 136: break;
        case 16: 
          { lexeme = yytext(); return POR;
          }
        case 137: break;
        case 49: 
          { lexeme=yytext(); return VICTORIA;
          }
        case 138: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
