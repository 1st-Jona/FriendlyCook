/* The following code was generated by JFlex 1.4.3 on 11/12/20 02:28 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/12/20 02:28 PM from the specification file
 * <tt>C:/FriendlyCook/FriendlyCook/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\52\2\0\1\3\22\0\1\5\7\0\1\53\1\55"+
    "\2\0\1\4\1\54\1\0\1\51\12\1\7\0\1\13\7\2\1\16"+
    "\1\15\3\2\1\14\1\26\1\2\1\31\1\2\1\6\7\2\4\0"+
    "\2\2\1\7\1\42\1\33\1\37\1\22\1\46\1\43\1\32\1\12"+
    "\1\11\1\44\1\34\1\23\1\10\1\24\1\36\1\27\1\21\1\17"+
    "\1\20\1\30\1\45\1\2\1\47\1\25\1\35\166\2\1\50\u1f2a\0"+
    "\1\40\1\41\udfe2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\2\4\6\1\1\5\11\1"+
    "\1\2\1\1\2\2\1\6\7\1\1\7\4\1\1\10"+
    "\5\1\1\11\4\1\1\12\1\1\16\0\1\1\1\4"+
    "\1\0\10\1\1\13\2\1\1\14\5\1\1\15\1\16"+
    "\2\1\1\17\1\1\1\20\25\0\1\1\1\0\3\1"+
    "\1\21\6\1\30\0\1\1\1\3\1\22\4\1\1\23"+
    "\1\1\31\0\1\24\1\0\1\21\1\25\1\0\1\26"+
    "\1\0\1\27\11\0\1\30\66\0\1\31\26\0\1\32"+
    "\6\0\1\33\7\0\1\34\1\35\2\0\1\36\6\0"+
    "\1\37\1\40\6\0\1\41\1\42\6\0\1\43\3\0"+
    "\1\44\11\0\1\45\10\0\1\46\1\0\1\47\1\50"+
    "\3\0\1\51\1\0\1\52\1\53\1\54\1\55\14\0"+
    "\1\56\1\57\4\0\1\60\3\0\1\61\3\0\1\62"+
    "\6\0\1\63\1\64\1\0\1\65\1\0\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\212\0\u0228\0\u0256\0\u0284"+
    "\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4"+
    "\0\u0422\0\u0450\0\270\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536"+
    "\0\u0564\0\u0592\0\212\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678"+
    "\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8"+
    "\0\u0816\0\u0844\0\212\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a"+
    "\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a"+
    "\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a"+
    "\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\212\0\u0d1e\0\u0d4c"+
    "\0\212\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\212\0\212"+
    "\0\u0e60\0\u0e8e\0\212\0\u0ebc\0\212\0\u0eea\0\u0f18\0\u0f46"+
    "\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6"+
    "\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226"+
    "\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396"+
    "\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6"+
    "\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\56"+
    "\0\212\0\u1956\0\u1984\0\u19b2\0\u19e0\0\212\0\u1a0e\0\u1a3c"+
    "\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac"+
    "\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c"+
    "\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c"+
    "\0\212\0\u1eba\0\212\0\212\0\u1ee8\0\212\0\u1f16\0\56"+
    "\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u202a\0\u2058\0\u2086"+
    "\0\u20b4\0\56\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a\0\u21c8"+
    "\0\u21f6\0\u2224\0\u2252\0\u2280\0\u22ae\0\u22dc\0\u230a\0\u2338"+
    "\0\u2366\0\u2394\0\u23c2\0\u23f0\0\u241e\0\u244c\0\u247a\0\u24a8"+
    "\0\u24d6\0\u2504\0\u2532\0\u2560\0\u258e\0\u25bc\0\u25ea\0\u2618"+
    "\0\u2646\0\u2674\0\u26a2\0\u26d0\0\u26fe\0\u272c\0\u275a\0\u2788"+
    "\0\u27b6\0\u27e4\0\u2812\0\u2840\0\u286e\0\u289c\0\u28ca\0\u28f8"+
    "\0\u2926\0\u2954\0\u2982\0\u29b0\0\u29de\0\u2a0c\0\u2a3a\0\u2a68"+
    "\0\56\0\u2a96\0\u2ac4\0\u2af2\0\u2b20\0\u2b4e\0\u2b7c\0\u2baa"+
    "\0\u2bd8\0\u2c06\0\u2c34\0\u2c62\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a"+
    "\0\u2d48\0\u2d76\0\u2da4\0\u2dd2\0\u2e00\0\u2e2e\0\u2e5c\0\56"+
    "\0\u2e8a\0\u2eb8\0\u2ee6\0\u2f14\0\u2f42\0\u2f70\0\56\0\u2f9e"+
    "\0\u2fcc\0\u2ffa\0\u3028\0\u3056\0\u3084\0\u30b2\0\56\0\56"+
    "\0\u30e0\0\u310e\0\56\0\u313c\0\u316a\0\u3198\0\u31c6\0\u31f4"+
    "\0\u3222\0\56\0\56\0\u3250\0\u327e\0\u32ac\0\u32da\0\u3308"+
    "\0\u3336\0\56\0\56\0\u3364\0\u3392\0\u33c0\0\u33ee\0\u341c"+
    "\0\u344a\0\56\0\u3478\0\u34a6\0\u34d4\0\56\0\u3502\0\u3530"+
    "\0\u355e\0\u358c\0\u35ba\0\u35e8\0\u3616\0\u3644\0\u3672\0\56"+
    "\0\u36a0\0\u36ce\0\u36fc\0\u372a\0\u3758\0\u3786\0\u37b4\0\u37e2"+
    "\0\56\0\u3810\0\56\0\56\0\u383e\0\u386c\0\u389a\0\56"+
    "\0\u38c8\0\56\0\56\0\56\0\56\0\u38f6\0\u3924\0\u3952"+
    "\0\u3980\0\u39ae\0\u39dc\0\u3a0a\0\u3a38\0\u3a66\0\u3a94\0\u3ac2"+
    "\0\u3af0\0\56\0\56\0\u3b1e\0\u3b4c\0\u3b7a\0\u3ba8\0\56"+
    "\0\u3bd6\0\u3c04\0\u3c32\0\56\0\u3c60\0\u3c8e\0\u3cbc\0\56"+
    "\0\u3cea\0\u3d18\0\u3d46\0\u3d74\0\u3da2\0\u3dd0\0\56\0\56"+
    "\0\u3dfe\0\56\0\u3e2c\0\56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\4"+
    "\1\10\6\4\1\11\1\12\1\4\1\13\1\4\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\4\1\25\1\26\1\27\1\2\4\4\1\30\2\4"+
    "\1\31\1\5\1\32\2\2\57\0\1\3\56\0\1\4"+
    "\3\0\32\4\2\0\7\4\10\0\3\5\44\0\1\5"+
    "\6\0\2\5\1\33\44\0\1\5\5\0\1\4\3\0"+
    "\1\4\1\34\3\4\1\35\24\4\2\0\7\4\7\0"+
    "\1\4\3\0\22\4\1\36\7\4\2\0\7\4\7\0"+
    "\1\4\3\0\1\4\1\34\2\4\1\37\7\4\1\40"+
    "\5\4\1\41\7\4\2\0\7\4\7\0\1\4\3\0"+
    "\13\4\1\42\16\4\2\0\7\4\7\0\1\4\3\0"+
    "\26\4\1\43\3\4\2\0\7\4\7\0\1\4\3\0"+
    "\2\4\1\44\14\4\1\45\5\4\1\46\4\4\2\0"+
    "\7\4\7\0\1\4\3\0\17\4\1\45\12\4\2\0"+
    "\7\4\7\0\1\4\3\0\22\4\1\47\7\4\2\0"+
    "\7\4\7\0\1\4\3\0\2\4\1\50\27\4\2\0"+
    "\7\4\7\0\1\4\3\0\22\4\1\51\7\4\2\0"+
    "\7\4\7\0\1\4\3\0\1\4\1\52\30\4\2\0"+
    "\7\4\7\0\1\4\3\0\1\4\1\53\2\4\1\54"+
    "\15\4\1\55\7\4\2\0\7\4\7\0\1\4\3\0"+
    "\1\4\1\56\14\4\1\57\13\4\2\0\7\4\7\0"+
    "\1\4\3\0\14\4\1\60\1\4\1\61\13\4\2\0"+
    "\7\4\7\0\1\4\3\0\4\4\1\62\7\4\1\63"+
    "\1\4\1\64\13\4\2\0\7\4\15\0\1\65\1\66"+
    "\5\0\1\67\1\70\1\0\1\71\1\72\6\0\1\73"+
    "\1\74\1\75\1\0\1\76\1\77\2\0\1\100\2\0"+
    "\1\101\1\102\11\0\1\4\3\0\1\4\1\103\30\4"+
    "\2\0\7\4\56\0\1\104\60\0\1\105\3\0\1\4"+
    "\3\0\2\4\1\106\27\4\2\0\7\4\7\0\1\4"+
    "\3\0\6\4\1\107\23\4\2\0\7\4\7\0\1\4"+
    "\3\0\14\4\1\110\15\4\2\0\7\4\7\0\1\4"+
    "\3\0\14\4\1\111\15\4\2\0\7\4\7\0\1\4"+
    "\3\0\4\4\1\112\25\4\2\0\7\4\7\0\1\4"+
    "\3\0\11\4\1\113\20\4\2\0\7\4\7\0\1\4"+
    "\3\0\1\4\1\114\12\4\1\64\15\4\2\0\7\4"+
    "\7\0\1\4\3\0\25\4\1\115\4\4\2\0\7\4"+
    "\7\0\1\4\3\0\14\4\1\116\15\4\2\0\7\4"+
    "\7\0\1\4\3\0\24\4\1\117\5\4\2\0\7\4"+
    "\7\0\1\4\3\0\4\4\1\120\25\4\2\0\7\4"+
    "\7\0\1\4\3\0\1\4\1\121\30\4\2\0\7\4"+
    "\7\0\1\4\3\0\4\4\1\122\25\4\2\0\7\4"+
    "\7\0\1\4\3\0\25\4\1\123\4\4\2\0\7\4"+
    "\7\0\1\4\3\0\12\4\1\124\17\4\2\0\7\4"+
    "\7\0\1\4\3\0\2\4\1\125\27\4\2\0\7\4"+
    "\7\0\1\4\3\0\1\4\1\126\30\4\2\0\7\4"+
    "\7\0\1\4\3\0\11\4\1\127\20\4\2\0\7\4"+
    "\7\0\1\4\3\0\11\4\1\130\20\4\2\0\7\4"+
    "\7\0\1\4\3\0\30\4\1\131\1\132\2\0\7\4"+
    "\7\0\1\4\3\0\13\4\1\133\16\4\2\0\7\4"+
    "\7\0\1\4\3\0\14\4\1\134\15\4\2\0\7\4"+
    "\7\0\1\4\3\0\11\4\1\135\13\4\1\115\4\4"+
    "\2\0\7\4\14\0\1\136\76\0\1\137\55\0\1\140"+
    "\46\0\1\141\1\142\102\0\1\143\15\0\1\144\55\0"+
    "\1\145\12\0\1\146\42\0\1\147\2\0\1\150\11\0"+
    "\1\151\5\0\1\152\35\0\1\153\55\0\1\154\73\0"+
    "\1\155\51\0\1\156\40\0\1\157\2\0\1\160\64\0"+
    "\1\161\2\0\1\162\33\0\1\4\3\0\32\4\2\0"+
    "\3\4\1\163\3\4\5\0\52\104\1\0\3\104\1\0"+
    "\1\164\56\0\1\4\3\0\3\4\1\165\26\4\2\0"+
    "\7\4\7\0\1\4\3\0\7\4\1\166\22\4\2\0"+
    "\7\4\7\0\1\4\3\0\32\4\2\0\3\4\1\115"+
    "\3\4\7\0\1\4\3\0\12\4\1\115\17\4\2\0"+
    "\7\4\7\0\1\4\3\0\11\4\1\135\20\4\2\0"+
    "\7\4\7\0\1\4\3\0\24\4\1\167\5\4\2\0"+
    "\7\4\7\0\1\4\3\0\14\4\1\170\15\4\2\0"+
    "\7\4\7\0\1\4\3\0\14\4\1\135\15\4\2\0"+
    "\7\4\7\0\1\4\3\0\16\4\1\135\13\4\2\0"+
    "\7\4\7\0\1\4\3\0\2\4\1\44\11\4\1\171"+
    "\15\4\2\0\7\4\7\0\1\4\3\0\14\4\1\171"+
    "\15\4\2\0\7\4\7\0\1\4\3\0\14\4\1\172"+
    "\15\4\2\0\7\4\7\0\1\4\3\0\16\4\1\173"+
    "\13\4\2\0\7\4\7\0\1\4\3\0\25\4\1\117"+
    "\4\4\2\0\7\4\7\0\1\4\3\0\12\4\1\174"+
    "\17\4\2\0\7\4\7\0\1\4\3\0\11\4\1\175"+
    "\20\4\2\0\7\4\7\0\1\4\3\0\4\4\1\176"+
    "\25\4\2\0\7\4\7\0\1\4\3\0\27\4\1\135"+
    "\2\4\2\0\7\4\26\0\1\177\77\0\1\200\31\0"+
    "\1\201\60\0\1\202\54\0\1\203\72\0\1\204\40\0"+
    "\1\205\57\0\1\206\66\0\1\207\44\0\1\210\22\0"+
    "\1\211\31\0\1\212\54\0\1\213\11\0\1\214\52\0"+
    "\1\215\50\0\1\216\54\0\1\217\25\0\1\220\41\0"+
    "\1\221\44\0\1\222\55\0\1\223\65\0\1\224\52\0"+
    "\1\225\35\0\1\226\47\0\1\4\3\0\16\4\1\227"+
    "\13\4\2\0\7\4\6\0\1\164\53\0\1\230\2\0"+
    "\1\4\3\0\4\4\1\231\25\4\2\0\7\4\7\0"+
    "\1\4\3\0\10\4\1\231\21\4\2\0\7\4\7\0"+
    "\1\4\3\0\4\4\1\232\25\4\2\0\7\4\7\0"+
    "\1\4\3\0\15\4\1\233\14\4\2\0\7\4\7\0"+
    "\1\4\3\0\13\4\1\234\16\4\2\0\7\4\7\0"+
    "\1\4\3\0\13\4\1\235\16\4\2\0\7\4\7\0"+
    "\1\4\3\0\13\4\1\44\16\4\2\0\7\4\7\0"+
    "\1\4\3\0\13\4\1\117\16\4\2\0\7\4\7\0"+
    "\1\4\3\0\4\4\1\236\25\4\2\0\7\4\7\0"+
    "\1\4\3\0\31\4\1\237\2\0\7\4\14\0\1\240"+
    "\72\0\1\241\63\0\1\242\42\0\1\243\50\0\1\244"+
    "\64\0\1\245\54\0\1\246\4\0\1\247\72\0\1\250"+
    "\22\0\1\251\55\0\1\252\70\0\1\253\67\0\1\254"+
    "\45\0\1\255\40\0\1\256\67\0\1\257\60\0\1\260"+
    "\70\0\1\261\25\0\1\262\101\0\1\263\64\0\1\264"+
    "\51\0\1\265\37\0\1\266\55\0\1\267\74\0\1\270"+
    "\20\0\1\4\3\0\13\4\1\271\16\4\2\0\7\4"+
    "\7\0\1\4\2\0\1\272\32\4\2\0\7\4\7\0"+
    "\1\4\3\0\14\4\1\273\15\4\2\0\7\4\7\0"+
    "\1\4\3\0\16\4\1\274\13\4\2\0\7\4\7\0"+
    "\1\4\1\0\1\275\1\0\32\4\2\0\7\4\7\0"+
    "\1\4\3\0\16\4\1\276\13\4\2\0\7\4\15\0"+
    "\1\277\106\0\1\300\26\0\1\301\72\0\1\302\53\0"+
    "\1\303\52\0\1\304\45\0\1\305\63\0\1\306\65\0"+
    "\1\307\64\0\1\310\37\0\1\311\75\0\1\312\40\0"+
    "\1\313\41\0\1\314\100\0\1\315\43\0\1\316\44\0"+
    "\1\317\67\0\1\320\66\0\1\321\44\0\1\322\42\0"+
    "\1\323\60\0\1\324\67\0\1\325\40\0\1\326\55\0"+
    "\1\327\105\0\1\330\37\0\1\331\45\0\1\332\103\0"+
    "\1\333\46\0\1\334\34\0\1\335\65\0\1\336\46\0"+
    "\1\337\57\0\1\340\64\0\1\341\60\0\1\342\55\0"+
    "\1\343\54\0\1\344\41\0\1\345\72\0\1\346\55\0"+
    "\1\347\40\0\1\350\71\0\1\351\3\0\1\352\4\0"+
    "\1\353\11\0\1\354\33\0\1\355\70\0\1\356\53\0"+
    "\1\357\41\0\1\360\55\0\1\361\56\0\1\362\43\0"+
    "\1\363\67\0\1\364\55\0\1\365\42\0\1\366\70\0"+
    "\1\367\55\0\1\370\77\0\1\371\30\0\1\372\50\0"+
    "\1\373\65\0\1\374\76\0\1\375\51\0\1\376\26\0"+
    "\1\377\54\0\1\u0100\107\0\1\u0101\50\0\1\u0102\40\0"+
    "\1\u0103\75\0\1\u0104\42\0\1\u0105\61\0\1\u0106\37\0"+
    "\1\u0107\64\0\1\u0108\70\0\1\u0109\43\0\1\u010a\57\0"+
    "\1\u010b\55\0\1\u010c\43\0\1\u010d\53\0\1\u010e\65\0"+
    "\1\u010f\42\0\1\u0110\57\0\1\u0111\105\0\1\u0112\37\0"+
    "\1\u0113\14\0\1\u0114\36\0\1\u0115\50\0\1\u0116\67\0"+
    "\1\u0117\72\0\1\u0118\35\0\1\u0119\64\0\1\u011a\47\0"+
    "\1\u011b\45\0\1\u011c\64\0\1\u011d\43\0\1\u011e\107\0"+
    "\1\u011f\23\0\1\u0120\67\0\1\u0121\56\0\1\u0122\56\0"+
    "\1\u0123\54\0\1\u0124\42\0\1\u0125\102\0\1\u0126\62\0"+
    "\1\u0127\55\0\1\u0128\23\0\1\u0129\101\0\1\u012a\63\0"+
    "\1\u012b\47\0\1\u012c\56\0\1\u012d\30\0\1\u012e\70\0"+
    "\1\u012f\57\0\1\u0130\55\0\1\u0131\72\0\1\u0132\55\0"+
    "\1\u0133\35\0\1\u0134\56\0\1\u0135\66\0\1\u0136\11\0"+
    "\1\u0137\30\0\1\u0138\62\0\1\u0139\71\0\1\u013a\55\0"+
    "\1\u013b\23\0\1\u013c\65\0\1\u013d\62\0\1\u013e\50\0"+
    "\1\u013f\75\0\1\u0140\40\0\1\u0141\74\0\1\u0142\23\0"+
    "\1\u0143\55\0\1\u0144\60\0\1\u0145\104\0\1\u0146\33\0"+
    "\1\u0147\72\0\1\u0148\40\0\1\u0149\45\0\1\u014a\65\0"+
    "\1\u014b\45\0\1\u014c\55\0\1\u014d\72\0\1\u014e\51\0"+
    "\1\u014f\76\0\1\u0150\40\0\1\u0151\41\0\1\u0152\54\0"+
    "\1\u0153\55\0\1\u0154\101\0\1\u0155\43\0\1\u0156\57\0"+
    "\1\u0157\67\0\1\u0158\61\0\1\u0159\50\0\1\u015a\62\0"+
    "\1\u015b\55\0\1\u015c\23\0\1\u015d\101\0\1\u015e\34\0"+
    "\1\u015f\104\0\1\u0160\26\0\1\u0161\104\0\1\u0162\55\0"+
    "\1\u0163\55\0\1\u0164\55\0\1\u0165\46\0\1\u0166\32\0"+
    "\1\u0167\55\0\1\u0168\55\0\1\u0169\72\0\1\u016a\70\0"+
    "\1\u016b\25\0\1\u016c\56\0\1\u016d\67\0\1\u016e\55\0"+
    "\1\u016f\56\0\1\u0170\53\0\1\u0171\55\0\1\u0172\75\0"+
    "\1\u0173\36\0\1\u0174\57\0\1\u0175\43\0\1\u0176\64\0"+
    "\1\u0177\75\0\1\u0178\36\0\1\u0179\57\0\1\u017a\40\0"+
    "\1\u017b\107\0\1\u017c\50\0\1\u017d\42\0\1\u017e\70\0"+
    "\1\u017f\31\0\1\u0180\66\0\1\u0181\70\0\1\u0182\30\0"+
    "\1\u0183\72\0\1\u0184\52\0\1\u0185\43\0\1\u0186\107\0"+
    "\1\u0187\55\0\1\u0188\40\0\1\u0189\72\0\1\u018a\51\0"+
    "\1\u018b\61\0\1\u018c\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15962];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\62\1\16\0\2\1\1\0\30\1\25\0"+
    "\1\1\1\0\12\1\30\0\1\1\1\11\7\1\31\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\11\11\0"+
    "\1\11\66\0\1\11\26\0\1\11\6\0\1\11\7\0"+
    "\2\11\2\0\1\11\6\0\2\11\6\0\2\11\6\0"+
    "\1\11\3\0\1\11\11\0\1\11\10\0\1\11\1\0"+
    "\2\11\3\0\1\11\1\0\4\11\14\0\2\11\4\0"+
    "\1\11\3\0\1\11\3\0\1\11\6\0\2\11\1\0"+
    "\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { lexeme=yytext(); return CIELO_MAR_TIERRA;
          }
        case 55: break;
        case 36: 
          { lexeme=yytext(); return NARANJADA;
          }
        case 56: break;
        case 33: 
          { lexeme=yytext(); return COCA_COLA;
          }
        case 57: break;
        case 34: 
          { lexeme=yytext(); return LIMONADA;
          }
        case 58: break;
        case 13: 
          { lexeme=yytext(); return LAS;
          }
        case 59: break;
        case 22: 
          { lexeme=yytext(); return PEDIDO;
          }
        case 60: break;
        case 40: 
          { lexeme=yytext(); return MAR_TIERRA;
          }
        case 61: break;
        case 11: 
          { lexeme=yytext(); return OYE;
          }
        case 62: break;
        case 54: 
          { lexeme=yytext(); return HAMBURGUESA_ARROZ;
          }
        case 63: break;
        case 48: 
          { lexeme=yytext(); return DULCE_LECHE;
          }
        case 64: break;
        case 25: 
          { lexeme=yytext(); return CORONA;
          }
        case 65: break;
        case 10: 
          { lexeme=yytext(); return DE;
          }
        case 66: break;
        case 16: 
          { lexeme=yytext(); return CANT_PLURALES;
          }
        case 67: break;
        case 32: 
          { lexeme=yytext(); return EXPRESSO;
          }
        case 68: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 69: break;
        case 38: 
          { lexeme=yytext(); return SUSHI_RES;
          }
        case 70: break;
        case 37: 
          { lexeme=yytext(); return PIE_MORA;
          }
        case 71: break;
        case 41: 
          { lexeme=yytext(); return CAMARONITO;
          }
        case 72: break;
        case 47: 
          { lexeme=yytext(); return SUSHI_POLLO;
          }
        case 73: break;
        case 5: 
          { lexeme=yytext(); return Y;
          }
        case 74: break;
        case 14: 
          { lexeme=yytext(); return LOS;
          }
        case 75: break;
        case 18: 
          { lexeme=yytext(); return SANJI;
          }
        case 76: break;
        case 44: 
          { lexeme=yytext(); return PIE_FRESA;
          }
        case 77: break;
        case 27: 
          { lexeme=yytext(); return CHURROS;
          }
        case 78: break;
        case 12: 
          { lexeme=yytext(); return CANT_UNA;
          }
        case 79: break;
        case 23: 
          { lexeme=yytext(); return JUGO;
          }
        case 80: break;
        case 43: 
          { lexeme=yytext(); return PIE_LIMON;
          }
        case 81: break;
        case 8: 
          { lexeme=yytext(); return CANT_UN;
          }
        case 82: break;
        case 31: 
          { lexeme=yytext(); return TERIYAKI;
          }
        case 83: break;
        case 9: 
          { lexeme=yytext(); return LA;
          }
        case 84: break;
        case 19: 
          { lexeme=yytext(); return PEPSI;
          }
        case 85: break;
        case 49: 
          { lexeme=yytext(); return HELADO_CACAO;
          }
        case 86: break;
        case 24: 
          { lexeme=yytext(); return CAFE;
          }
        case 87: break;
        case 17: 
          { lexeme=yytext(); return TRAER;
          }
        case 88: break;
        case 29: 
          { lexeme=yytext(); return VAMPIRO;
          }
        case 89: break;
        case 20: 
          { lexeme = yytext(); return FAVOR;
          }
        case 90: break;
        case 21: 
          { lexeme=yytext(); return QUIERO;
          }
        case 91: break;
        case 39: 
          { lexeme=yytext(); return TRES_QUESOS;
          }
        case 92: break;
        case 45: 
          { lexeme=yytext(); return PIÑA_COLADA;
          }
        case 93: break;
        case 1: 
          { lexeme=yytext(); return CADENA;
          }
        case 94: break;
        case 28: 
          { lexeme=yytext(); return BOMBAZO;
          }
        case 95: break;
        case 42: 
          { lexeme=yytext(); return PIE_QUESO;
          }
        case 96: break;
        case 30: 
          { lexeme=yytext(); return FONDANT;
          }
        case 97: break;
        case 2: 
          { return ERROR;
          }
        case 98: break;
        case 7: 
          { lexeme=yytext(); return EL;
          }
        case 99: break;
        case 52: 
          { lexeme=yytext(); return FRUTA_CARAMELO;
          }
        case 100: break;
        case 53: 
          { lexeme=yytext(); return HELADO_VAINILLA;
          }
        case 101: break;
        case 26: 
          { lexeme=yytext(); return MARTINI;
          }
        case 102: break;
        case 6: 
          { lexeme=yytext(); return Coma;
          }
        case 103: break;
        case 4: 
          { /*Ignore*/
          }
        case 104: break;
        case 50: 
          { lexeme=yytext(); return SUSHI_CAMARON;
          }
        case 105: break;
        case 46: 
          { lexeme=yytext(); return HACER;
          }
        case 106: break;
        case 15: 
          { lexeme = yytext(); return POR;
          }
        case 107: break;
        case 35: 
          { lexeme=yytext(); return VICTORIA;
          }
        case 108: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
