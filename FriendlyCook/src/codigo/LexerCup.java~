/* The following code was generated by JFlex 1.4.3 on 22/12/20 03:36 PM */


package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/12/20 03:36 PM from the specification file
 * <tt>C:/FriendlyCook/FriendlyCook/src/codigo/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 45,  0,  0,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0, 44, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 10,  1,  1,  1,  1,  1,  1,  1, 13, 12,  1,  1, 15, 11, 23, 
     1, 26,  1,  5,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1, 
     1,  6, 37, 28, 32, 19, 40, 38, 27,  9,  8, 39, 29, 20,  7, 21, 
    31, 24, 16, 14, 18, 25, 17,  1, 42, 22, 30,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1, 33,  1,  1,  1,  1,  1,  1,  1, 35,  1,  1,  1, 43,  1,  1, 
     1, 34,  0, 41,  0,  0,  0,  0,  0,  0, 36,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\2\3\13\1\1\4\13\1\1\2"+
    "\1\5\20\1\1\6\11\1\1\7\10\1\1\10\11\1"+
    "\1\11\5\1\1\3\14\1\1\12\13\1\1\13\2\1"+
    "\1\14\16\1\1\15\2\1\1\16\4\1\1\17\3\1"+
    "\1\20\11\1\1\21\1\1\1\22\5\1\1\23\1\24"+
    "\5\1\2\25\1\1\1\26\1\27\10\1\1\30\10\1"+
    "\1\0\3\1\1\23\1\31\1\1\1\32\4\1\1\33"+
    "\1\1\1\34\1\35\5\1\1\36\10\1\1\37\1\1"+
    "\1\40\2\1\1\41\1\1\1\0\4\1\1\42\2\0"+
    "\1\43\2\1\1\44\3\1\1\0\7\1\1\45\1\46"+
    "\4\1\1\47\1\0\1\50\1\51\2\1\2\0\1\52"+
    "\1\1\1\0\2\1\1\0\1\53\4\1\1\54\1\1"+
    "\1\0\1\55\1\1\1\0\1\56\1\1\2\0\1\57"+
    "\1\0\1\60\1\1\1\0\1\61\1\62\1\63\1\64"+
    "\1\1\1\0\1\1\1\0\1\65\6\0\1\66\1\0"+
    "\1\1\1\0\1\1\1\67\11\0\1\1\1\0\1\70"+
    "\11\0\1\71\2\0\1\72\3\0\1\73\1\0\1\74"+
    "\4\0\1\75\1\76\1\77\7\0\1\100\5\0\1\101"+
    "\1\0\1\102\3\0\1\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\134\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4"+
    "\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\212\0\u0508\0\u0536"+
    "\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6"+
    "\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\134\0\u07e8"+
    "\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958"+
    "\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8"+
    "\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38"+
    "\0\u0c66\0\u0c94\0\u0cc2\0\134\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a"+
    "\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea"+
    "\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\134\0\u102c"+
    "\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c"+
    "\0\u11ca\0\u11f8\0\134\0\u1226\0\u1254\0\134\0\u1282\0\u12b0"+
    "\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420"+
    "\0\u144e\0\u147c\0\u14aa\0\u14d8\0\134\0\u1506\0\u1534\0\134"+
    "\0\u1562\0\u1590\0\u15be\0\u15ec\0\134\0\u161a\0\u1648\0\u1676"+
    "\0\134\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8"+
    "\0\u17e6\0\u1814\0\134\0\u1842\0\134\0\u1870\0\u189e\0\u18cc"+
    "\0\u18fa\0\u1928\0\u0c94\0\134\0\u1956\0\u1984\0\u19b2\0\u19e0"+
    "\0\u1a0e\0\134\0\56\0\u1a3c\0\134\0\134\0\u1a6a\0\u1a98"+
    "\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\134\0\u1bda"+
    "\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a"+
    "\0\u1d78\0\u1da6\0\u1dd4\0\134\0\134\0\u1e02\0\134\0\u1e30"+
    "\0\u1e5e\0\u1e8c\0\u1eba\0\134\0\u1ee8\0\134\0\134\0\u1f16"+
    "\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\134\0\u1ffc\0\u202a\0\u2058"+
    "\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e\0\134\0\u216c\0\134"+
    "\0\u219a\0\u21c8\0\134\0\u21f6\0\u2224\0\u2252\0\u2280\0\u22ae"+
    "\0\u22dc\0\134\0\u230a\0\u2338\0\134\0\u2366\0\u2394\0\134"+
    "\0\u23c2\0\u23f0\0\u241e\0\u244c\0\u247a\0\u24a8\0\u24d6\0\u2504"+
    "\0\u2532\0\u2560\0\u258e\0\134\0\134\0\u25bc\0\u25ea\0\u2618"+
    "\0\u2646\0\134\0\u2674\0\134\0\134\0\u26a2\0\u26d0\0\u26fe"+
    "\0\u272c\0\134\0\u275a\0\u2788\0\u27b6\0\u27e4\0\u2812\0\134"+
    "\0\u2840\0\u286e\0\u289c\0\u28ca\0\134\0\u28f8\0\u2926\0\134"+
    "\0\u2954\0\u2982\0\134\0\u29b0\0\u29de\0\u2a0c\0\134\0\u2a3a"+
    "\0\134\0\u2a68\0\u2a96\0\134\0\134\0\134\0\134\0\u2ac4"+
    "\0\u2af2\0\u2b20\0\u2b4e\0\134\0\u2b7c\0\u2baa\0\u2bd8\0\u2c06"+
    "\0\u2c34\0\u2c62\0\134\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a\0\56"+
    "\0\u2d48\0\u2d76\0\u2da4\0\u2dd2\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a"+
    "\0\u2eb8\0\u2ee6\0\u2f14\0\134\0\u2f42\0\u2f70\0\u2f9e\0\u2fcc"+
    "\0\u2ffa\0\u3028\0\u3056\0\u3084\0\u30b2\0\134\0\u30e0\0\u310e"+
    "\0\56\0\u313c\0\u316a\0\u3198\0\56\0\u31c6\0\56\0\u31f4"+
    "\0\u3222\0\u3250\0\u327e\0\56\0\56\0\56\0\u32ac\0\u32da"+
    "\0\u3308\0\u3336\0\u3364\0\u3392\0\u33c0\0\56\0\u33ee\0\u341c"+
    "\0\u344a\0\u3478\0\u34a6\0\56\0\u34d4\0\56\0\u3502\0\u3530"+
    "\0\u355e\0\56\0\56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\3\1\7"+
    "\1\10\5\3\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\3\1\31\1\32\3\3\1\2\1\33"+
    "\2\3\1\34\1\2\2\3\1\35\1\4\57\0\1\3"+
    "\3\0\37\3\1\0\4\3\1\0\2\3\4\0\3\4"+
    "\50\0\1\4\2\0\2\4\1\36\50\0\1\4\1\0"+
    "\1\3\3\0\1\3\1\37\3\3\1\40\31\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\1\3\1\41"+
    "\22\3\1\42\12\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\24\3\1\43\12\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\1\3\1\37\2\3\1\44"+
    "\11\3\1\45\5\3\1\46\12\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\1\3\1\47\35\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\16\3\1\50"+
    "\20\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\1\3\1\51\2\3\1\52\11\3\1\53\20\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\13\3\1\54"+
    "\2\3\1\55\20\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\2\3\1\56\25\3\1\57\6\3\1\0"+
    "\4\3\1\0\1\60\1\3\3\0\1\3\3\0\1\3"+
    "\1\61\2\3\1\62\11\3\1\63\5\3\1\64\12\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\2\3"+
    "\1\65\16\3\1\66\5\3\1\67\7\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\21\3\1\66\15\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\24\3"+
    "\1\70\12\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\2\3\1\71\34\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\24\3\1\72\12\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\1\3\1\73\14\3"+
    "\1\74\20\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\1\3\1\75\2\3\1\76\13\3\1\77\3\3"+
    "\1\100\1\3\1\101\10\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\1\3\1\102\2\3\1\103\11\3"+
    "\1\104\1\3\1\105\15\3\1\104\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\1\3\1\106\2\3\1\107"+
    "\11\3\1\110\1\3\1\111\16\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\1\3\1\112\2\3\1\113"+
    "\11\3\1\114\1\3\1\115\16\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\20\3\1\116\16\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\1\3\1\117"+
    "\11\3\1\120\4\3\1\121\16\3\1\0\4\3\1\0"+
    "\2\3\56\0\1\122\2\0\1\3\3\0\2\3\1\123"+
    "\34\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\6\3\1\124\30\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\13\3\1\125\23\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\16\3\1\126\20\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\37\3\1\0"+
    "\1\3\1\127\2\3\1\0\2\3\3\0\1\3\3\0"+
    "\16\3\1\130\20\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\4\3\1\131\32\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\11\3\1\132\25\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\13\3\1\133"+
    "\23\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\1\3\1\134\35\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\17\3\1\135\17\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\27\3\1\136\7\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\13\3\1\137"+
    "\23\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\1\3\1\140\14\3\1\141\15\3\1\142\2\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\13\3\1\143"+
    "\23\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\11\3\1\144\25\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\32\3\1\145\4\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\13\3\1\146\23\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\13\3\1\147"+
    "\23\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\2\3\1\150\34\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\16\3\1\151\17\3\1\151\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\27\3\1\152\7\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\16\3"+
    "\1\153\20\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\26\3\1\154\10\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\4\3\1\155\32\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\1\3\1\156\35\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\4\3"+
    "\1\157\32\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\17\3\1\160\7\3\1\161\7\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\30\3\1\162\6\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\13\3"+
    "\1\163\1\3\1\164\1\3\1\165\17\3\1\0\3\3"+
    "\1\166\1\0\2\3\3\0\1\3\3\0\2\3\1\167"+
    "\34\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\13\3\1\170\13\3\1\171\7\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\1\3\1\172\14\3\1\173"+
    "\20\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\24\3\1\174\12\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\11\3\1\175\25\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\17\3\1\176\17\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\16\3\1\177"+
    "\20\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\11\3\1\200\25\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\21\3\1\201\15\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\35\3\1\202\1\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\32\3\1\203"+
    "\1\204\3\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\13\3\1\205\23\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\17\3\1\206\17\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\16\3\1\207\10\3"+
    "\1\210\7\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\11\3\1\211\15\3\1\212\7\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\17\3\1\213\17\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\14\3"+
    "\1\214\22\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\24\3\1\215\12\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\2\3\1\216\34\3\1\0\4\3"+
    "\1\0\2\3\2\0\55\122\2\0\1\3\3\0\3\3"+
    "\1\217\33\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\7\3\1\220\27\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\1\3\1\221\35\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\14\3\1\222\22\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\20\3"+
    "\1\223\16\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\15\3\1\224\21\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\11\3\1\225\25\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\26\3\1\226\10\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\14\3"+
    "\1\227\22\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\30\3\1\230\6\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\32\3\1\231\4\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\15\3\1\232\21\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\16\3"+
    "\1\233\20\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\11\3\1\234\15\3\1\235\7\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\16\3\1\112\20\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\4\3"+
    "\1\236\32\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\16\3\1\237\20\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\13\3\1\240\23\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\15\3\1\241\21\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\1\3"+
    "\1\53\35\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\24\3\1\242\12\3\1\243\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\11\3\1\244\25\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\16\3\1\245\20\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\20\3"+
    "\1\246\16\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\2\3\1\247\13\3\1\250\20\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\16\3\1\250\20\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\37\3"+
    "\1\0\1\251\3\3\1\0\2\3\3\0\1\3\3\0"+
    "\16\3\1\252\20\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\1\3\1\253\35\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\15\3\1\254\21\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\20\3\1\255"+
    "\16\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\1\3\1\256\35\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\16\3\1\257\17\3\1\257\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\27\3\1\260\7\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\20\3"+
    "\1\261\16\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\1\3\1\262\35\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\15\3\1\263\21\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\2\3\1\264\34\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\13\3"+
    "\1\265\23\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\20\3\1\266\16\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\17\3\1\267\17\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\2\0\1\270\37\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\1\3\1\271"+
    "\35\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\11\3\1\272\25\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\4\3\1\273\32\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\16\3\1\274\20\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\31\3\1\275"+
    "\5\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\15\3\1\276\21\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\16\3\1\277\20\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\37\3\1\0\1\300\3\3"+
    "\1\0\2\3\3\0\1\3\3\0\20\3\1\301\16\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\15\3"+
    "\1\302\21\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\33\3\1\303\3\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\4\3\1\304\32\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\10\3\1\304\26\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\2\3"+
    "\1\305\34\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\16\3\1\306\20\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\16\3\1\307\20\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\4\3\1\310\32\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\4\3"+
    "\1\311\32\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\4\3\1\312\32\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\4\3\1\313\32\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\20\3\1\314\16\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\16\3"+
    "\1\315\20\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\21\3\1\316\15\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\35\3\1\317\1\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\16\3\1\320\20\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\4\3"+
    "\1\321\32\3\1\0\4\3\1\0\1\3\1\321\3\0"+
    "\1\3\3\0\15\3\1\322\21\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\27\3\1\323\7\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\13\3\1\324"+
    "\23\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\24\3\1\325\12\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\13\3\1\326\23\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\33\3\1\327\3\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\1\3\1\330"+
    "\35\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\13\3\1\331\23\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\13\3\1\332\23\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\20\3\1\333\16\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\2\3\1\334"+
    "\34\3\1\0\4\3\1\0\2\3\3\0\1\3\2\0"+
    "\1\335\37\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\13\3\1\336\23\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\15\3\1\337\21\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\13\3\1\340\23\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\2\3"+
    "\1\341\34\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\16\3\1\342\20\3\1\0\4\3\1\0\2\3"+
    "\42\0\1\343\16\0\1\3\2\0\1\344\37\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\4\3\1\345"+
    "\32\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\33\3\1\346\3\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\1\3\1\177\35\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\1\3\1\347\35\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\13\3\1\350"+
    "\23\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\1\3\1\351\35\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\1\3\1\352\35\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\3\3\1\353\33\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\2\0\1\354\37\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\2\3"+
    "\1\304\34\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\31\3\1\355\5\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\13\3\1\356\23\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\13\3\1\357\23\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\1\3"+
    "\1\360\35\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\1\3\1\361\35\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\11\3\1\362\25\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\2\3\1\363\34\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\13\3"+
    "\1\317\23\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\16\3\1\364\20\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\20\3\1\365\16\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\13\3\1\366\23\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\20\3"+
    "\1\367\16\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\27\3\1\370\7\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\20\3\1\371\16\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\1\3\1\372\35\3"+
    "\1\0\4\3\1\0\2\3\36\0\1\373\22\0\1\3"+
    "\3\0\20\3\1\374\16\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\1\3\1\375\35\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\20\3\1\376\16\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\1\3"+
    "\1\377\35\3\1\0\4\3\1\0\2\3\25\0\1\u0100"+
    "\66\0\1\u0101\22\0\1\3\3\0\20\3\1\u0102\16\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\31\3"+
    "\1\u0103\5\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\2\0\1\u0104\37\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\2\3\1\u0105\34\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\1\3\1\u0106\35\3\1\0"+
    "\4\3\1\0\2\3\42\0\1\u0107\16\0\1\3\3\0"+
    "\1\3\1\252\35\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\20\3\1\u0108\16\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\4\3\1\u0109\32\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\37\3\1\0"+
    "\2\3\1\u010a\1\3\1\0\2\3\3\0\1\3\3\0"+
    "\17\3\1\u010b\17\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\11\3\1\u010c\25\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\4\3\1\u010d\32\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\37\3\1\0"+
    "\1\3\1\u010e\2\3\1\0\2\3\3\0\1\3\2\0"+
    "\1\u010f\37\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\16\3\1\u0110\20\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\2\3\1\u0111\34\3\1\0\4\3"+
    "\1\0\2\3\27\0\1\u0112\31\0\1\3\3\0\11\3"+
    "\1\u0113\25\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\33\3\1\u0114\3\3\1\0\4\3\1\0\2\3"+
    "\6\0\1\u0115\76\0\1\u0116\31\0\1\3\3\0\20\3"+
    "\1\u0117\16\3\1\0\4\3\1\0\2\3\25\0\1\u0118"+
    "\33\0\1\3\3\0\15\3\1\u0119\21\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\33\3\1\u011a\3\3"+
    "\1\0\4\3\1\0\2\3\25\0\1\u011b\33\0\1\3"+
    "\3\0\1\3\1\u011c\35\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\4\3\1\u011d\32\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\16\3\1\u011e\20\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\20\3"+
    "\1\u011f\16\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\24\3\1\u0120\12\3\1\0\4\3\1\0\2\3"+
    "\42\0\1\u0121\16\0\1\3\3\0\4\3\1\u0122\32\3"+
    "\1\0\4\3\1\0\2\3\37\0\1\u0123\21\0\1\3"+
    "\3\0\1\3\1\u0124\35\3\1\0\4\3\1\0\2\3"+
    "\26\0\1\u0125\3\0\1\u0126\4\0\1\u0127\12\0\1\u0128"+
    "\42\0\1\u0129\27\0\1\u012a\47\0\1\3\3\0\1\3"+
    "\1\u012b\35\3\1\0\4\3\1\0\2\3\6\0\1\u012c"+
    "\52\0\1\3\3\0\16\3\1\u012d\20\3\1\0\4\3"+
    "\1\0\2\3\25\0\1\u012e\33\0\1\3\3\0\15\3"+
    "\1\u012f\21\3\1\0\4\3\1\0\2\3\10\0\1\u0130"+
    "\74\0\1\u0131\61\0\1\u0132\35\0\1\u0133\64\0\1\u0134"+
    "\43\0\1\u0135\53\0\1\u0136\71\0\1\u0137\13\0\1\u0138"+
    "\2\0\1\u0139\17\0\1\3\3\0\11\3\1\u013a\25\3"+
    "\1\0\4\3\1\0\2\3\6\0\1\u013b\52\0\1\3"+
    "\3\0\20\3\1\u013c\16\3\1\0\4\3\1\0\2\3"+
    "\22\0\1\u013d\60\0\1\u013e\56\0\1\u013f\54\0\1\u0140"+
    "\72\0\1\u0141\51\0\1\u0142\44\0\1\u0143\40\0\1\u0144"+
    "\74\0\1\u0145\31\0\1\3\3\0\1\3\1\u0146\35\3"+
    "\1\0\4\3\1\0\2\3\23\0\1\u0147\12\0\1\u0148"+
    "\27\0\1\u0149\65\0\1\u014a\64\0\1\u014b\23\0\1\u014b"+
    "\22\0\1\u014c\45\0\1\u014d\55\0\1\u014e\65\0\1\u014f"+
    "\63\0\1\u0150\66\0\1\u0151\26\0\1\u0152\55\0\1\u0153"+
    "\74\0\1\u0154\37\0\1\u0155\54\0\1\u0156\67\0\1\u0157"+
    "\43\0\1\u0158\104\0\1\u0159\31\0\1\u015a\100\0\1\u015b"+
    "\27\0\1\u015c\67\0\1\u015d\62\0\1\u015e\37\0\1\u015f"+
    "\54\0\1\u0160\73\0\1\u0161\56\0\1\u0162\41\0\1\u0163"+
    "\71\0\1\u0164\53\0\1\u0165\41\0\1\u0166\103\0\1\u0167"+
    "\55\0\1\u0168\55\0\1\u0169\45\0\1\u016a\36\0\1\u016b"+
    "\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13708];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\240\1\1\11\24\1\1\0\44\1\1\0"+
    "\5\1\2\0\7\1\1\0\16\1\1\0\4\1\2\0"+
    "\2\1\1\0\2\1\1\0\7\1\1\0\2\1\1\0"+
    "\2\1\2\0\1\1\1\0\2\1\1\0\5\1\1\0"+
    "\1\1\1\0\1\1\6\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\11\0\1\1\1\0\1\1\11\0\1\1"+
    "\2\0\1\11\3\0\1\11\1\0\1\11\4\0\3\11"+
    "\7\0\1\11\5\0\1\11\1\0\1\11\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type,yyline,yycolumn,value);
    }
    private Symbol symbol(int type){
        return new Symbol(type,yyline,yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 59: 
          { return new Symbol(sym.PIÑA_COLADA,yychar,yyline,yytext());
          }
        case 69: break;
        case 38: 
          { return new Symbol(sym.QUIERO,yychar,yyline,yytext());
          }
        case 70: break;
        case 29: 
          { return new Symbol(sym.SIETE,yychar,yyline,yytext());
          }
        case 71: break;
        case 51: 
          { return new Symbol(sym.MOSTRAR,yychar,yyline,yytext());
          }
        case 72: break;
        case 57: 
          { return new Symbol(sym.HAMBURGUESA_ARROZ,yychar,yyline,yytext());
          }
        case 73: break;
        case 40: 
          { return new Symbol(sym.CUATRO,yychar,yyline,yytext());
          }
        case 74: break;
        case 1: 
          { return new Symbol(sym.CADENA,yychar,yyline,yytext());
          }
        case 75: break;
        case 65: 
          { return new Symbol(sym.HELADO_CACAO,yychar,yyline,yytext());
          }
        case 76: break;
        case 55: 
          { return new Symbol(sym.COCA_COLA,yychar,yyline,yytext());
          }
        case 77: break;
        case 28: 
          { return new Symbol(sym.NUEVE,yychar,yyline,yytext());
          }
        case 78: break;
        case 67: 
          { return new Symbol(sym.FRUTA_CARAMELO,yychar,yyline,yytext());
          }
        case 79: break;
        case 49: 
          { return new Symbol(sym.VICTORIA,yychar,yyline,yytext());
          }
        case 80: break;
        case 24: 
          { return new Symbol(sym.CAFE,yychar,yyline,yytext());
          }
        case 81: break;
        case 25: 
          { return new Symbol(sym.DIEZ,yychar,yyline,yytext());
          }
        case 82: break;
        case 58: 
          { return new Symbol(sym.PIE_MORA,yychar,yyline,yytext());
          }
        case 83: break;
        case 21: 
          { return new Symbol(sym.MENU,yychar,yyline,yytext());
          }
        case 84: break;
        case 41: 
          { return new Symbol(sym.CUENTA,yychar,yyline,yytext());
          }
        case 85: break;
        case 8: 
          { return new Symbol(sym.LA,yychar,yyline,yytext());
          }
        case 86: break;
        case 48: 
          { return new Symbol(sym.FONDANT,yychar,yyline,yytext());
          }
        case 87: break;
        case 43: 
          { return new Symbol(sym.VAMPIRO,yychar,yyline,yytext());
          }
        case 88: break;
        case 27: 
          { return new Symbol(sym.SANJI,yychar,yyline,yytext());
          }
        case 89: break;
        case 44: 
          { return new Symbol(sym.MARTINI,yychar,yyline,yytext());
          }
        case 90: break;
        case 11: 
          { return new Symbol(sym.OYE,yychar,yyline,yytext());
          }
        case 91: break;
        case 61: 
          { return new Symbol(sym.PIE_QUESO,yychar,yyline,yytext());
          }
        case 92: break;
        case 14: 
          { return new Symbol(sym.LOS,yychar,yyline,yytext());
          }
        case 93: break;
        case 23: 
          { return new Symbol(sym.OCHO,yychar,yyline,yytext());
          }
        case 94: break;
        case 17: 
          { return new Symbol(sym.JUGO,yychar,yyline,yytext());
          }
        case 95: break;
        case 9: 
          { return new Symbol(sym.DE,yychar,yyline,yytext());
          }
        case 96: break;
        case 54: 
          { return new Symbol(sym.NARANJADA,yychar,yyline,yytext());
          }
        case 97: break;
        case 5: 
          { return new Symbol(sym.Coma,yychar,yyline,yytext());
          }
        case 98: break;
        case 30: 
          { return new Symbol(sym.TRECE,yychar,yyline,yytext());
          }
        case 99: break;
        case 68: 
          { return new Symbol(sym.HELADO_VAINILLA,yychar,yyline,yytext());
          }
        case 100: break;
        case 13: 
          { return new Symbol(sym.LAS,yychar,yyline,yytext());
          }
        case 101: break;
        case 33: 
          { return new Symbol(sym.CINCO,yychar,yyline,yytext());
          }
        case 102: break;
        case 34: 
          { return new Symbol(sym.LEER,yychar,yyline,yytext());
          }
        case 103: break;
        case 26: 
          { return new Symbol(sym.DOCE,yychar,yyline,yytext());
          }
        case 104: break;
        case 37: 
          { return new Symbol(sym.QUINCE,yychar,yyline,yytext());
          }
        case 105: break;
        case 4: 
          { return new Symbol(sym.Y,yychar,yyline,yytext());
          }
        case 106: break;
        case 50: 
          { return new Symbol(sym.TERIYAKI,yychar,yyline,yytext());
          }
        case 107: break;
        case 64: 
          { return new Symbol(sym.SUSHI_POLLO,yychar,yyline,yytext());
          }
        case 108: break;
        case 31: 
          { return new Symbol(sym.HACER,yychar,yyline,yytext());
          }
        case 109: break;
        case 22: 
          { return new Symbol(sym.ONCE,yychar,yyline,yytext());
          }
        case 110: break;
        case 46: 
          { return new Symbol(sym.CHURROS,yychar,yyline,yytext());
          }
        case 111: break;
        case 45: 
          { return new Symbol(sym.CATORCE,yychar,yyline,yytext());
          }
        case 112: break;
        case 6: 
          { return new Symbol(sym.EL,yychar,yyline,yytext());
          }
        case 113: break;
        case 60: 
          { return new Symbol(sym.SUSHI_RES,yychar,yyline,yytext());
          }
        case 114: break;
        case 63: 
          { return new Symbol(sym.PIE_FRESA,yychar,yyline,yytext());
          }
        case 115: break;
        case 20: 
          { return new Symbol(sym.TRES,yychar,yyline,yytext());
          }
        case 116: break;
        case 52: 
          { return new Symbol(sym.EXPRESSO,yychar,yyline,yytext());
          }
        case 117: break;
        case 10: 
          { return new Symbol(sym.VER,yychar,yyline,yytext());
          }
        case 118: break;
        case 18: 
          { return new Symbol(sym.SEIS,yychar,yyline,yytext());
          }
        case 119: break;
        case 35: 
          { return new Symbol(sym.PEPSI,yychar,yyline,yytext());
          }
        case 120: break;
        case 32: 
          { return new Symbol(sym.CARTA,yychar,yyline,yytext());
          }
        case 121: break;
        case 53: 
          { return new Symbol(sym.LIMONADA,yychar,yyline,yytext());
          }
        case 122: break;
        case 47: 
          { return new Symbol(sym.BOMBAZO,yychar,yyline,yytext());
          }
        case 123: break;
        case 39: 
          { return new Symbol(sym.CORONA,yychar,yyline,yytext());
          }
        case 124: break;
        case 36: 
          { return new Symbol(sym.FAVOR,yychar,yyline,yytext());
          }
        case 125: break;
        case 66: 
          { return new Symbol(sym.SUSHI_CAMARON,yychar,yyline,yytext());
          }
        case 126: break;
        case 16: 
          { return new Symbol(sym.DOS,yychar,yyline,yytext());
          }
        case 127: break;
        case 3: 
          { /*Ignore*/
          }
        case 128: break;
        case 62: 
          { return new Symbol(sym.PIE_LIMON,yychar,yyline,yytext());
          }
        case 129: break;
        case 56: 
          { return new Symbol(sym.CAMARONITO,yychar,yyline,yytext());
          }
        case 130: break;
        case 12: 
          { return new Symbol(sym.CANT_UNA,yychar,yyline,yytext());
          }
        case 131: break;
        case 15: 
          { return new Symbol(sym.POR,yychar,yyline,yytext());
          }
        case 132: break;
        case 2: 
          { return new Symbol (sym.ERROR,yychar,yyline,yytext());
          }
        case 133: break;
        case 42: 
          { return new Symbol(sym.PEDIDO,yychar,yyline,yytext());
          }
        case 134: break;
        case 7: 
          { return new Symbol(sym.CANT_UN,yychar,yyline,yytext());
          }
        case 135: break;
        case 19: 
          { return new Symbol(sym.TRAER,yychar,yyline,yytext());
          }
        case 136: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
