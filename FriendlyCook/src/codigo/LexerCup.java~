/* The following code was generated by JFlex 1.4.3 on 28/12/20 05:27 PM */


package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/12/20 05:27 PM from the specification file
 * <tt>C:/FriendlyCook/FriendlyCook/src/codigo/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 46,  0,  0,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0, 45, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 10,  1,  1,  1,  1,  1,  1,  1, 13, 12,  1, 34, 15, 11, 23, 
     1, 26,  1,  5,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1, 
     1,  6, 38, 28, 32, 19, 41, 39, 27,  9,  8, 40, 29, 20,  7, 21, 
    31, 24, 16, 14, 18, 25, 17,  1, 43, 22, 30,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1, 33,  1,  1,  1,  1,  1,  1,  1, 36,  1,  1,  1, 44,  1,  1, 
     1, 35,  0, 42,  0,  0,  0,  0,  0,  0, 37,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\2\3\13\1\1\4\14\1\1\2"+
    "\1\5\20\1\1\6\11\1\1\7\10\1\1\10\11\1"+
    "\1\11\6\1\1\3\14\1\1\12\13\1\1\13\2\1"+
    "\1\14\16\1\1\15\3\1\1\16\4\1\1\17\3\1"+
    "\1\20\11\1\1\21\1\1\1\22\5\1\1\23\1\24"+
    "\5\1\2\25\1\1\1\26\1\27\10\1\1\30\11\1"+
    "\1\0\3\1\1\23\1\31\1\1\1\32\4\1\1\33"+
    "\1\1\1\34\1\35\5\1\1\36\10\1\1\37\1\1"+
    "\1\40\2\1\1\41\1\1\1\0\3\1\1\42\1\1"+
    "\1\43\2\0\1\44\2\1\1\45\3\1\1\0\7\1"+
    "\1\46\1\47\4\1\1\50\1\0\1\51\1\52\2\1"+
    "\2\0\1\53\1\1\1\0\2\1\1\0\1\54\4\1"+
    "\1\55\1\1\1\0\1\56\1\1\1\0\1\57\1\1"+
    "\2\0\1\60\1\0\1\61\1\1\1\0\1\62\1\63"+
    "\1\64\1\65\1\1\1\0\1\1\1\0\1\66\6\0"+
    "\1\67\1\0\1\1\1\0\1\1\1\70\11\0\1\1"+
    "\1\0\1\71\11\0\1\72\2\0\1\73\3\0\1\74"+
    "\1\0\1\75\4\0\1\76\1\77\1\100\7\0\1\101"+
    "\5\0\1\102\1\0\1\103\3\0\1\104\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\136\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a"+
    "\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\215\0\u0553"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb"+
    "\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\136"+
    "\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c"+
    "\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04"+
    "\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c"+
    "\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\136\0\u0d67\0\u0d96\0\u0dc5"+
    "\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d"+
    "\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5"+
    "\0\136\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe"+
    "\0\u122d\0\u125c\0\u128b\0\u12ba\0\136\0\u12e9\0\u1318\0\136"+
    "\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490"+
    "\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\136\0\u15d9"+
    "\0\u1608\0\u1637\0\136\0\u1666\0\u1695\0\u16c4\0\u16f3\0\136"+
    "\0\u1722\0\u1751\0\u1780\0\136\0\u17af\0\u17de\0\u180d\0\u183c"+
    "\0\u186b\0\u189a\0\u18c9\0\u18f8\0\u1927\0\136\0\u1956\0\136"+
    "\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u0d09\0\136\0\u1a70"+
    "\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\136\0\57\0\u1b5b\0\136"+
    "\0\136\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4"+
    "\0\u1cd3\0\136\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded"+
    "\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\136"+
    "\0\136\0\u1f65\0\136\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\136"+
    "\0\u2050\0\136\0\136\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b"+
    "\0\136\0\u216a\0\u2199\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284"+
    "\0\u22b3\0\136\0\u22e2\0\136\0\u2311\0\u2340\0\136\0\u236f"+
    "\0\u239e\0\u23cd\0\u23fc\0\u242b\0\136\0\u245a\0\136\0\u2489"+
    "\0\u24b8\0\136\0\u24e7\0\u2516\0\136\0\u2545\0\u2574\0\u25a3"+
    "\0\u25d2\0\u2601\0\u2630\0\u265f\0\u268e\0\u26bd\0\u26ec\0\u271b"+
    "\0\136\0\136\0\u274a\0\u2779\0\u27a8\0\u27d7\0\136\0\u2806"+
    "\0\136\0\136\0\u2835\0\u2864\0\u2893\0\u28c2\0\136\0\u28f1"+
    "\0\u2920\0\u294f\0\u297e\0\u29ad\0\136\0\u29dc\0\u2a0b\0\u2a3a"+
    "\0\u2a69\0\136\0\u2a98\0\u2ac7\0\136\0\u2af6\0\u2b25\0\136"+
    "\0\u2b54\0\u2b83\0\u2bb2\0\136\0\u2be1\0\136\0\u2c10\0\u2c3f"+
    "\0\136\0\136\0\136\0\136\0\u2c6e\0\u2c9d\0\u2ccc\0\u2cfb"+
    "\0\136\0\u2d2a\0\u2d59\0\u2d88\0\u2db7\0\u2de6\0\u2e15\0\136"+
    "\0\u2e44\0\u2e73\0\u2ea2\0\u2ed1\0\57\0\u2f00\0\u2f2f\0\u2f5e"+
    "\0\u2f8d\0\u2fbc\0\u2feb\0\u301a\0\u3049\0\u3078\0\u30a7\0\u30d6"+
    "\0\136\0\u3105\0\u3134\0\u3163\0\u3192\0\u31c1\0\u31f0\0\u321f"+
    "\0\u324e\0\u327d\0\136\0\u32ac\0\u32db\0\57\0\u330a\0\u3339"+
    "\0\u3368\0\57\0\u3397\0\57\0\u33c6\0\u33f5\0\u3424\0\u3453"+
    "\0\57\0\57\0\57\0\u3482\0\u34b1\0\u34e0\0\u350f\0\u353e"+
    "\0\u356d\0\u359c\0\57\0\u35cb\0\u35fa\0\u3629\0\u3658\0\u3687"+
    "\0\57\0\u36b6\0\57\0\u36e5\0\u3714\0\u3743\0\57\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\3\1\7"+
    "\1\10\5\3\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\3\1\31\1\32\1\3\1\33\2\3"+
    "\1\2\1\34\2\3\1\35\1\2\2\3\1\36\1\4"+
    "\60\0\1\3\3\0\40\3\1\0\4\3\1\0\2\3"+
    "\4\0\3\4\51\0\1\4\2\0\2\4\1\37\51\0"+
    "\1\4\1\0\1\3\3\0\1\3\1\40\3\3\1\41"+
    "\32\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\1\3\1\42\22\3\1\43\13\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\24\3\1\44\13\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\1\3\1\40"+
    "\2\3\1\45\11\3\1\46\5\3\1\47\13\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\1\3\1\50"+
    "\36\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\16\3\1\51\21\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\1\3\1\52\2\3\1\53\11\3\1\54"+
    "\21\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\13\3\1\55\2\3\1\56\21\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\2\3\1\57\25\3\1\60"+
    "\7\3\1\0\4\3\1\0\1\61\1\3\3\0\1\3"+
    "\3\0\1\3\1\62\2\3\1\63\11\3\1\64\5\3"+
    "\1\65\13\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\2\3\1\66\16\3\1\67\5\3\1\70\10\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\21\3"+
    "\1\67\16\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\24\3\1\71\13\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\2\3\1\72\35\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\24\3\1\73\13\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\1\3"+
    "\1\74\14\3\1\75\21\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\1\3\1\76\2\3\1\77\13\3"+
    "\1\100\3\3\1\101\1\3\1\102\11\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\1\3\1\103\2\3"+
    "\1\104\11\3\1\105\1\3\1\106\16\3\1\105\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\1\3\1\107"+
    "\2\3\1\110\11\3\1\111\1\3\1\112\17\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\1\3\1\113"+
    "\2\3\1\114\11\3\1\115\1\3\1\116\17\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\4\3\1\117"+
    "\33\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\20\3\1\120\17\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\1\3\1\121\11\3\1\122\4\3\1\123"+
    "\17\3\1\0\4\3\1\0\2\3\57\0\1\124\2\0"+
    "\1\3\3\0\2\3\1\125\35\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\6\3\1\126\31\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\13\3\1\127"+
    "\24\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\16\3\1\130\21\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\40\3\1\0\1\3\1\131\2\3\1\0"+
    "\2\3\3\0\1\3\3\0\16\3\1\132\21\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\4\3\1\133"+
    "\33\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\11\3\1\134\26\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\13\3\1\135\24\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\1\3\1\136\36\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\17\3\1\137"+
    "\20\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\27\3\1\140\10\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\13\3\1\141\24\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\1\3\1\142\14\3\1\143"+
    "\15\3\1\144\3\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\13\3\1\145\24\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\11\3\1\146\26\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\32\3\1\147"+
    "\5\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\13\3\1\150\24\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\13\3\1\151\24\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\2\3\1\152\35\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\16\3\1\153"+
    "\20\3\1\153\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\27\3\1\154\10\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\16\3\1\155\21\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\26\3\1\156\11\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\4\3"+
    "\1\157\33\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\1\3\1\160\36\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\4\3\1\161\33\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\17\3\1\162\7\3"+
    "\1\163\10\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\30\3\1\164\7\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\13\3\1\165\1\3\1\166\1\3"+
    "\1\167\20\3\1\0\3\3\1\170\1\0\2\3\3\0"+
    "\1\3\3\0\2\3\1\171\35\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\13\3\1\172\13\3\1\173"+
    "\10\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\1\3\1\174\14\3\1\175\21\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\24\3\1\176\13\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\11\3\1\177"+
    "\26\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\11\3\1\200\5\3\1\201\20\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\16\3\1\202\21\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\11\3\1\203"+
    "\26\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\21\3\1\204\16\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\36\3\1\205\1\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\32\3\1\206\1\207\4\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\13\3"+
    "\1\210\24\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\17\3\1\211\20\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\16\3\1\212\10\3\1\213\10\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\11\3"+
    "\1\214\15\3\1\215\10\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\11\3\1\200\26\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\17\3\1\216\20\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\14\3"+
    "\1\217\23\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\24\3\1\220\13\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\2\3\1\221\35\3\1\0\4\3"+
    "\1\0\2\3\2\0\56\124\2\0\1\3\3\0\3\3"+
    "\1\222\34\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\7\3\1\223\30\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\1\3\1\224\36\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\14\3\1\225\23\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\20\3"+
    "\1\226\17\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\15\3\1\227\22\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\11\3\1\230\26\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\26\3\1\231\11\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\14\3"+
    "\1\232\23\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\30\3\1\233\7\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\32\3\1\234\5\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\15\3\1\235\22\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\16\3"+
    "\1\236\21\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\11\3\1\237\15\3\1\240\10\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\16\3\1\113\21\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\4\3"+
    "\1\241\33\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\16\3\1\242\21\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\13\3\1\243\24\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\15\3\1\244\22\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\1\3"+
    "\1\54\36\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\24\3\1\245\13\3\1\246\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\11\3\1\247\26\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\16\3\1\250\21\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\20\3"+
    "\1\251\17\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\2\3\1\252\13\3\1\253\21\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\16\3\1\253\21\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\40\3"+
    "\1\0\1\254\3\3\1\0\2\3\3\0\1\3\3\0"+
    "\16\3\1\255\21\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\1\3\1\256\36\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\15\3\1\257\22\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\20\3\1\260"+
    "\17\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\1\3\1\261\36\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\16\3\1\262\20\3\1\262\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\27\3\1\263\10\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\20\3"+
    "\1\264\17\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\1\3\1\265\36\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\15\3\1\266\22\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\2\3\1\267\35\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\13\3"+
    "\1\270\24\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\15\3\1\271\22\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\20\3\1\272\17\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\17\3\1\273\20\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\2\0\1\274"+
    "\40\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\1\3\1\275\36\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\11\3\1\276\26\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\4\3\1\277\33\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\16\3\1\300"+
    "\21\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\31\3\1\301\6\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\15\3\1\302\22\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\16\3\1\303\21\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\40\3\1\0"+
    "\1\304\3\3\1\0\2\3\3\0\1\3\3\0\20\3"+
    "\1\305\17\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\15\3\1\306\22\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\33\3\1\307\4\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\4\3\1\310\33\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\10\3"+
    "\1\310\27\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\2\3\1\311\35\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\16\3\1\312\21\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\16\3\1\313\21\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\4\3"+
    "\1\314\33\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\4\3\1\315\33\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\4\3\1\316\33\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\4\3\1\317\33\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\20\3"+
    "\1\320\17\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\16\3\1\321\21\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\21\3\1\322\16\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\36\3\1\323\1\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\16\3"+
    "\1\324\21\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\4\3\1\325\33\3\1\0\4\3\1\0\1\3"+
    "\1\325\3\0\1\3\3\0\15\3\1\326\22\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\27\3\1\327"+
    "\10\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\13\3\1\330\24\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\24\3\1\331\13\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\13\3\1\332\24\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\33\3\1\333"+
    "\4\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\1\3\1\334\36\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\13\3\1\335\24\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\13\3\1\336\24\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\20\3\1\337"+
    "\17\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\2\3\1\340\35\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\2\0\1\341\40\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\13\3\1\342\24\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\15\3\1\343\22\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\13\3"+
    "\1\344\24\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\20\3\1\345\17\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\2\3\1\346\35\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\16\3\1\347\21\3"+
    "\1\0\4\3\1\0\2\3\42\0\1\350\17\0\1\3"+
    "\2\0\1\351\40\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\4\3\1\352\33\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\33\3\1\353\4\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\1\3\1\202"+
    "\36\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\1\3\1\354\36\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\13\3\1\355\24\3\1\0\4\3\1\0"+
    "\2\3\3\0\1\3\3\0\1\3\1\356\36\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\1\3\1\357"+
    "\36\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\3\3\1\360\34\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\2\0\1\361\40\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\2\3\1\310\35\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\31\3\1\362\6\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\13\3"+
    "\1\363\24\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\13\3\1\364\24\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\1\3\1\365\36\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\1\3\1\366\36\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\11\3"+
    "\1\367\26\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\2\3\1\370\35\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\13\3\1\323\24\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\16\3\1\371\21\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\20\3"+
    "\1\372\17\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\13\3\1\373\24\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\20\3\1\374\17\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\27\3\1\375\10\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\20\3"+
    "\1\376\17\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\1\3\1\377\36\3\1\0\4\3\1\0\2\3"+
    "\36\0\1\u0100\23\0\1\3\3\0\20\3\1\u0101\17\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\1\3"+
    "\1\u0102\36\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\20\3\1\u0103\17\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\1\3\1\u0104\36\3\1\0\4\3"+
    "\1\0\2\3\25\0\1\u0105\67\0\1\u0106\23\0\1\3"+
    "\3\0\20\3\1\u0107\17\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\31\3\1\u0108\6\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\2\0\1\u0109\40\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\2\3\1\u010a"+
    "\35\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\1\3\1\u010b\36\3\1\0\4\3\1\0\2\3\42\0"+
    "\1\u010c\17\0\1\3\3\0\1\3\1\255\36\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\20\3\1\u010d"+
    "\17\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\4\3\1\u010e\33\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\40\3\1\0\2\3\1\u010f\1\3\1\0"+
    "\2\3\3\0\1\3\3\0\17\3\1\u0110\20\3\1\0"+
    "\4\3\1\0\2\3\3\0\1\3\3\0\11\3\1\u0111"+
    "\26\3\1\0\4\3\1\0\2\3\3\0\1\3\3\0"+
    "\4\3\1\u0112\33\3\1\0\4\3\1\0\2\3\3\0"+
    "\1\3\3\0\40\3\1\0\1\3\1\u0113\2\3\1\0"+
    "\2\3\3\0\1\3\2\0\1\u0114\40\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\16\3\1\u0115\21\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\2\3"+
    "\1\u0116\35\3\1\0\4\3\1\0\2\3\27\0\1\u0117"+
    "\32\0\1\3\3\0\11\3\1\u0118\26\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\33\3\1\u0119\4\3"+
    "\1\0\4\3\1\0\2\3\6\0\1\u011a\77\0\1\u011b"+
    "\32\0\1\3\3\0\20\3\1\u011c\17\3\1\0\4\3"+
    "\1\0\2\3\25\0\1\u011d\34\0\1\3\3\0\15\3"+
    "\1\u011e\22\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\33\3\1\u011f\4\3\1\0\4\3\1\0\2\3"+
    "\25\0\1\u0120\34\0\1\3\3\0\1\3\1\u0121\36\3"+
    "\1\0\4\3\1\0\2\3\3\0\1\3\3\0\4\3"+
    "\1\u0122\33\3\1\0\4\3\1\0\2\3\3\0\1\3"+
    "\3\0\16\3\1\u0123\21\3\1\0\4\3\1\0\2\3"+
    "\3\0\1\3\3\0\20\3\1\u0124\17\3\1\0\4\3"+
    "\1\0\2\3\3\0\1\3\3\0\24\3\1\u0125\13\3"+
    "\1\0\4\3\1\0\2\3\42\0\1\u0126\17\0\1\3"+
    "\3\0\4\3\1\u0127\33\3\1\0\4\3\1\0\2\3"+
    "\37\0\1\u0128\22\0\1\3\3\0\1\3\1\u0129\36\3"+
    "\1\0\4\3\1\0\2\3\26\0\1\u012a\3\0\1\u012b"+
    "\4\0\1\u012c\13\0\1\u012d\42\0\1\u012e\30\0\1\u012f"+
    "\50\0\1\3\3\0\1\3\1\u0130\36\3\1\0\4\3"+
    "\1\0\2\3\6\0\1\u0131\53\0\1\3\3\0\16\3"+
    "\1\u0132\21\3\1\0\4\3\1\0\2\3\25\0\1\u0133"+
    "\34\0\1\3\3\0\15\3\1\u0134\22\3\1\0\4\3"+
    "\1\0\2\3\10\0\1\u0135\75\0\1\u0136\62\0\1\u0137"+
    "\36\0\1\u0138\65\0\1\u0139\44\0\1\u013a\54\0\1\u013b"+
    "\72\0\1\u013c\13\0\1\u013d\2\0\1\u013e\20\0\1\3"+
    "\3\0\11\3\1\u013f\26\3\1\0\4\3\1\0\2\3"+
    "\6\0\1\u0140\53\0\1\3\3\0\20\3\1\u0141\17\3"+
    "\1\0\4\3\1\0\2\3\22\0\1\u0142\61\0\1\u0143"+
    "\57\0\1\u0144\55\0\1\u0145\73\0\1\u0146\52\0\1\u0147"+
    "\45\0\1\u0148\41\0\1\u0149\75\0\1\u014a\32\0\1\3"+
    "\3\0\1\3\1\u014b\36\3\1\0\4\3\1\0\2\3"+
    "\23\0\1\u014c\12\0\1\u014d\30\0\1\u014e\66\0\1\u014f"+
    "\65\0\1\u0150\24\0\1\u0150\22\0\1\u0151\46\0\1\u0152"+
    "\56\0\1\u0153\66\0\1\u0154\64\0\1\u0155\67\0\1\u0156"+
    "\27\0\1\u0157\56\0\1\u0158\75\0\1\u0159\40\0\1\u015a"+
    "\55\0\1\u015b\70\0\1\u015c\44\0\1\u015d\105\0\1\u015e"+
    "\32\0\1\u015f\101\0\1\u0160\30\0\1\u0161\70\0\1\u0162"+
    "\63\0\1\u0163\40\0\1\u0164\55\0\1\u0165\74\0\1\u0166"+
    "\57\0\1\u0167\42\0\1\u0168\72\0\1\u0169\54\0\1\u016a"+
    "\42\0\1\u016b\104\0\1\u016c\56\0\1\u016d\56\0\1\u016e"+
    "\46\0\1\u016f\37\0\1\u0170\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14194];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\243\1\1\11\25\1\1\0\44\1\1\0"+
    "\6\1\2\0\7\1\1\0\16\1\1\0\4\1\2\0"+
    "\2\1\1\0\2\1\1\0\7\1\1\0\2\1\1\0"+
    "\2\1\2\0\1\1\1\0\2\1\1\0\5\1\1\0"+
    "\1\1\1\0\1\1\6\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\11\0\1\1\1\0\1\1\11\0\1\1"+
    "\2\0\1\11\3\0\1\11\1\0\1\11\4\0\3\11"+
    "\7\0\1\11\5\0\1\11\1\0\1\11\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type,yyline,yycolumn,value);
    }
    private Symbol symbol(int type){
        return new Symbol(type,yyline,yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 60: 
          { return new Symbol(sym.PIÑA_COLADA,yychar,yyline,yytext());
          }
        case 70: break;
        case 39: 
          { return new Symbol(sym.QUIERO,yychar,yyline,yytext());
          }
        case 71: break;
        case 29: 
          { return new Symbol(sym.SIETE,yychar,yyline,yytext());
          }
        case 72: break;
        case 52: 
          { return new Symbol(sym.MOSTRAR,yychar,yyline,yytext());
          }
        case 73: break;
        case 58: 
          { return new Symbol(sym.HAMBURGUESA_ARROZ,yychar,yyline,yytext());
          }
        case 74: break;
        case 41: 
          { return new Symbol(sym.CUATRO,yychar,yyline,yytext());
          }
        case 75: break;
        case 1: 
          { return new Symbol(sym.CADENA,yychar,yyline,yytext());
          }
        case 76: break;
        case 66: 
          { return new Symbol(sym.HELADO_CACAO,yychar,yyline,yytext());
          }
        case 77: break;
        case 56: 
          { return new Symbol(sym.COCA_COLA,yychar,yyline,yytext());
          }
        case 78: break;
        case 28: 
          { return new Symbol(sym.NUEVE,yychar,yyline,yytext());
          }
        case 79: break;
        case 68: 
          { return new Symbol(sym.FRUTA_CARAMELO,yychar,yyline,yytext());
          }
        case 80: break;
        case 50: 
          { return new Symbol(sym.VICTORIA,yychar,yyline,yytext());
          }
        case 81: break;
        case 24: 
          { return new Symbol(sym.CAFE,yychar,yyline,yytext());
          }
        case 82: break;
        case 25: 
          { return new Symbol(sym.DIEZ,yychar,yyline,yytext());
          }
        case 83: break;
        case 59: 
          { return new Symbol(sym.PIE_MORA,yychar,yyline,yytext());
          }
        case 84: break;
        case 21: 
          { return new Symbol(sym.MENU,yychar,yyline,yytext());
          }
        case 85: break;
        case 42: 
          { return new Symbol(sym.CUENTA,yychar,yyline,yytext());
          }
        case 86: break;
        case 8: 
          { return new Symbol(sym.LA,yychar,yyline,yytext());
          }
        case 87: break;
        case 49: 
          { return new Symbol(sym.FONDANT,yychar,yyline,yytext());
          }
        case 88: break;
        case 44: 
          { return new Symbol(sym.VAMPIRO,yychar,yyline,yytext());
          }
        case 89: break;
        case 27: 
          { return new Symbol(sym.SANJI,yychar,yyline,yytext());
          }
        case 90: break;
        case 45: 
          { return new Symbol(sym.MARTINI,yychar,yyline,yytext());
          }
        case 91: break;
        case 11: 
          { return new Symbol(sym.OYE,yychar,yyline,yytext());
          }
        case 92: break;
        case 62: 
          { return new Symbol(sym.PIE_QUESO,yychar,yyline,yytext());
          }
        case 93: break;
        case 14: 
          { return new Symbol(sym.LOS,yychar,yyline,yytext());
          }
        case 94: break;
        case 34: 
          { return new Symbol(sym.LISTO,yychar,yyline,yytext());
          }
        case 95: break;
        case 23: 
          { return new Symbol(sym.OCHO,yychar,yyline,yytext());
          }
        case 96: break;
        case 17: 
          { return new Symbol(sym.JUGO,yychar,yyline,yytext());
          }
        case 97: break;
        case 9: 
          { return new Symbol(sym.DE,yychar,yyline,yytext());
          }
        case 98: break;
        case 55: 
          { return new Symbol(sym.NARANJADA,yychar,yyline,yytext());
          }
        case 99: break;
        case 5: 
          { return new Symbol(sym.Coma,yychar,yyline,yytext());
          }
        case 100: break;
        case 30: 
          { return new Symbol(sym.TRECE,yychar,yyline,yytext());
          }
        case 101: break;
        case 69: 
          { return new Symbol(sym.HELADO_VAINILLA,yychar,yyline,yytext());
          }
        case 102: break;
        case 13: 
          { return new Symbol(sym.LAS,yychar,yyline,yytext());
          }
        case 103: break;
        case 33: 
          { return new Symbol(sym.CINCO,yychar,yyline,yytext());
          }
        case 104: break;
        case 35: 
          { return new Symbol(sym.LEER,yychar,yyline,yytext());
          }
        case 105: break;
        case 26: 
          { return new Symbol(sym.DOCE,yychar,yyline,yytext());
          }
        case 106: break;
        case 38: 
          { return new Symbol(sym.QUINCE,yychar,yyline,yytext());
          }
        case 107: break;
        case 4: 
          { return new Symbol(sym.Y,yychar,yyline,yytext());
          }
        case 108: break;
        case 51: 
          { return new Symbol(sym.TERIYAKI,yychar,yyline,yytext());
          }
        case 109: break;
        case 65: 
          { return new Symbol(sym.SUSHI_POLLO,yychar,yyline,yytext());
          }
        case 110: break;
        case 31: 
          { return new Symbol(sym.HACER,yychar,yyline,yytext());
          }
        case 111: break;
        case 22: 
          { return new Symbol(sym.ONCE,yychar,yyline,yytext());
          }
        case 112: break;
        case 47: 
          { return new Symbol(sym.CHURROS,yychar,yyline,yytext());
          }
        case 113: break;
        case 46: 
          { return new Symbol(sym.CATORCE,yychar,yyline,yytext());
          }
        case 114: break;
        case 6: 
          { return new Symbol(sym.EL,yychar,yyline,yytext());
          }
        case 115: break;
        case 61: 
          { return new Symbol(sym.SUSHI_RES,yychar,yyline,yytext());
          }
        case 116: break;
        case 64: 
          { return new Symbol(sym.PIE_FRESA,yychar,yyline,yytext());
          }
        case 117: break;
        case 20: 
          { return new Symbol(sym.TRES,yychar,yyline,yytext());
          }
        case 118: break;
        case 53: 
          { return new Symbol(sym.EXPRESSO,yychar,yyline,yytext());
          }
        case 119: break;
        case 10: 
          { return new Symbol(sym.VER,yychar,yyline,yytext());
          }
        case 120: break;
        case 36: 
          { return new Symbol(sym.PEPSI,yychar,yyline,yytext());
          }
        case 121: break;
        case 18: 
          { return new Symbol(sym.SEIS,yychar,yyline,yytext());
          }
        case 122: break;
        case 32: 
          { return new Symbol(sym.CARTA,yychar,yyline,yytext());
          }
        case 123: break;
        case 54: 
          { return new Symbol(sym.LIMONADA,yychar,yyline,yytext());
          }
        case 124: break;
        case 48: 
          { return new Symbol(sym.BOMBAZO,yychar,yyline,yytext());
          }
        case 125: break;
        case 40: 
          { return new Symbol(sym.CORONA,yychar,yyline,yytext());
          }
        case 126: break;
        case 37: 
          { return new Symbol(sym.FAVOR,yychar,yyline,yytext());
          }
        case 127: break;
        case 67: 
          { return new Symbol(sym.SUSHI_CAMARON,yychar,yyline,yytext());
          }
        case 128: break;
        case 16: 
          { return new Symbol(sym.DOS,yychar,yyline,yytext());
          }
        case 129: break;
        case 3: 
          { /*Ignore*/
          }
        case 130: break;
        case 63: 
          { return new Symbol(sym.PIE_LIMON,yychar,yyline,yytext());
          }
        case 131: break;
        case 57: 
          { return new Symbol(sym.CAMARONITO,yychar,yyline,yytext());
          }
        case 132: break;
        case 12: 
          { return new Symbol(sym.CANT_UNA,yychar,yyline,yytext());
          }
        case 133: break;
        case 15: 
          { return new Symbol(sym.POR,yychar,yyline,yytext());
          }
        case 134: break;
        case 2: 
          { return new Symbol (sym.ERROR,yychar,yyline,yytext());
          }
        case 135: break;
        case 43: 
          { return new Symbol(sym.PEDIDO,yychar,yyline,yytext());
          }
        case 136: break;
        case 7: 
          { return new Symbol(sym.CANT_UN,yychar,yyline,yytext());
          }
        case 137: break;
        case 19: 
          { return new Symbol(sym.TRAER,yychar,yyline,yytext());
          }
        case 138: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
