
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jan 11 07:44:11 MST 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jan 11 07:44:11 MST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\002\007\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\006" +
    "\000\002\002\006\000\002\002\005\000\002\002\004\000" +
    "\002\002\003\000\002\002\003\000\002\002\006\000\002" +
    "\002\006\000\002\002\005\000\002\002\007\000\002\002" +
    "\006\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\004\000\002\022\003\000\002\022" +
    "\003\000\002\023\005\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\003\000\002\005" +
    "\006\000\002\005\006\000\002\005\005\000\002\005\005" +
    "\000\002\006\005\000\002\006\004\000\002\006\004\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\004\004\000\002\004\005\000" +
    "\002\004\005\000\002\004\004\000\002\004\005\000\002" +
    "\004\005\000\002\027\003\000\002\027\003\000\002\026" +
    "\004\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\026\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\004\000\002\026" +
    "\004\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\026\004\000\002\026\004\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\032\004\022\005\013\006\014\007\024\010" +
    "\020\013\017\014\012\016\026\050\023\076\016\077\010" +
    "\100\005\001\002\000\014\002\uffed\015\242\031\uffed\032" +
    "\uffed\033\241\001\002\000\012\014\236\016\235\101\234" +
    "\102\233\001\002\000\004\031\231\001\002\000\010\002" +
    "\uffeb\031\uffeb\032\uffeb\001\002\000\006\014\226\016\225" +
    "\001\002\000\010\002\uffe8\031\uffe8\032\uffe8\001\002\000" +
    "\006\010\224\102\223\001\002\000\142\002\uffcd\014\122" +
    "\021\107\022\137\031\uffcd\032\uffcd\036\154\043\103\044" +
    "\123\045\144\046\105\047\131\051\146\052\101\053\151" +
    "\054\121\055\132\056\141\057\074\060\143\061\127\062" +
    "\116\063\106\064\075\065\147\066\136\067\110\070\155" +
    "\071\104\072\124\073\120\074\111\075\133\077\135\103" +
    "\117\104\130\105\134\106\152\107\114\110\100\111\113" +
    "\112\142\113\156\114\145\115\102\116\076\117\073\120" +
    "\150\001\002\000\026\002\ufff8\004\061\005\013\007\024" +
    "\010\020\014\012\016\026\076\016\077\010\100\005\001" +
    "\002\000\010\002\uffec\031\uffec\032\uffec\001\002\000\006" +
    "\014\054\016\053\001\002\000\014\004\052\037\051\040" +
    "\050\041\047\042\046\001\002\000\010\002\uffd9\031\uffd9" +
    "\032\uffd9\001\002\000\010\002\uffea\031\uffea\032\uffea\001" +
    "\002\000\024\002\ufff7\005\013\007\024\010\020\014\012" +
    "\016\026\076\016\077\010\100\005\001\002\000\004\004" +
    "\041\001\002\000\014\014\036\024\035\025\034\026\037" +
    "\027\033\001\002\000\010\002\uffe9\031\uffe9\032\uffe9\001" +
    "\002\000\004\101\031\001\002\000\004\002\030\001\002" +
    "\000\004\002\001\001\002\000\010\002\uffcf\031\uffcf\032" +
    "\uffcf\001\002\000\010\002\uffe7\031\uffe7\032\uffe7\001\002" +
    "\000\010\002\uffe2\031\uffe2\032\uffe2\001\002\000\010\002" +
    "\uffe1\031\uffe1\032\uffe1\001\002\000\010\002\uffe3\031\uffe3" +
    "\032\uffe3\001\002\000\012\002\uffdc\010\040\031\uffdc\032" +
    "\uffdc\001\002\000\010\002\uffe0\031\uffe0\032\uffe0\001\002" +
    "\000\010\002\uffde\031\uffde\032\uffde\001\002\000\004\002" +
    "\ufffd\001\002\000\004\031\043\001\002\000\004\032\044" +
    "\001\002\000\004\002\ufff6\001\002\000\004\002\ufffe\001" +
    "\002\000\004\002\uffee\001\002\000\004\002\uffef\001\002" +
    "\000\004\002\ufff0\001\002\000\004\002\ufff1\001\002\000" +
    "\004\002\uffff\001\002\000\012\002\uffd2\031\uffd2\032\uffd2" +
    "\101\057\001\002\000\014\002\uffdb\010\056\031\uffdb\032" +
    "\uffdb\102\055\001\002\000\010\002\uffd5\031\uffd5\032\uffd5" +
    "\001\002\000\010\002\uffdd\031\uffdd\032\uffdd\001\002\000" +
    "\010\002\uffd6\031\uffd6\032\uffd6\001\002\000\004\031\071" +
    "\001\002\000\026\002\ufff9\005\013\007\024\010\020\014" +
    "\012\016\026\031\063\076\016\077\010\100\005\001\002" +
    "\000\010\002\ufffa\031\067\032\066\001\002\000\004\032" +
    "\064\001\002\000\024\002\ufff2\005\013\007\024\010\020" +
    "\014\012\016\026\076\016\077\010\100\005\001\002\000" +
    "\004\002\ufff3\001\002\000\004\002\ufffb\001\002\000\006" +
    "\002\ufffc\032\070\001\002\000\004\002\000\001\002\000" +
    "\004\032\072\001\002\000\004\002\ufff5\001\002\000\102" +
    "\002\uff73\015\uff73\031\uff73\032\uff73\033\uff73\036\uff73\043" +
    "\uff73\044\uff73\045\uff73\046\uff73\047\uff73\051\uff73\052\uff73" +
    "\053\uff73\054\uff73\055\uff73\056\uff73\057\uff73\060\uff73\061" +
    "\uff73\062\uff73\063\uff73\064\uff73\065\uff73\066\uff73\067\uff73" +
    "\070\uff73\071\uff73\072\uff73\073\uff73\074\uff73\075\uff73\001" +
    "\002\000\014\002\uff98\015\uff98\031\uff98\032\uff98\033\uff98" +
    "\001\002\000\014\002\uff93\015\uff93\031\uff93\032\uff93\033" +
    "\uff93\001\002\000\102\002\uff74\015\uff74\031\uff74\032\uff74" +
    "\033\uff74\036\uff74\043\uff74\044\uff74\045\uff74\046\uff74\047" +
    "\uff74\051\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74" +
    "\057\uff74\060\uff74\061\uff74\062\uff74\063\uff74\064\uff74\065" +
    "\uff74\066\uff74\067\uff74\070\uff74\071\uff74\072\uff74\073\uff74" +
    "\074\uff74\075\uff74\001\002\000\014\002\uffc0\015\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\001\002\000\102\002\uff7a\015\uff7a" +
    "\031\uff7a\032\uff7a\033\uff7a\036\uff7a\043\uff7a\044\uff7a\045" +
    "\uff7a\046\uff7a\047\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a" +
    "\055\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a\062\uff7a\063" +
    "\uff7a\064\uff7a\065\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a" +
    "\072\uff7a\073\uff7a\074\uff7a\075\uff7a\001\002\000\014\002" +
    "\uff9d\015\uff9d\031\uff9d\032\uff9d\033\uff9d\001\002\000\102" +
    "\002\uff75\015\uff75\031\uff75\032\uff75\033\uff75\036\uff75\043" +
    "\uff75\044\uff75\045\uff75\046\uff75\047\uff75\051\uff75\052\uff75" +
    "\053\uff75\054\uff75\055\uff75\056\uff75\057\uff75\060\uff75\061" +
    "\uff75\062\uff75\063\uff75\064\uff75\065\uff75\066\uff75\067\uff75" +
    "\070\uff75\071\uff75\072\uff75\073\uff75\074\uff75\075\uff75\001" +
    "\002\000\014\002\uffa2\015\uffa2\031\uffa2\032\uffa2\033\uffa2" +
    "\001\002\000\014\002\uff89\015\uff89\031\uff89\032\uff89\033" +
    "\uff89\001\002\000\014\002\uff9f\015\uff9f\031\uff9f\032\uff9f" +
    "\033\uff9f\001\002\000\014\002\uff94\015\uff94\031\uff94\032" +
    "\uff94\033\uff94\001\002\000\102\002\uff83\015\uff83\031\uff83" +
    "\032\uff83\033\uff83\036\154\043\103\044\123\045\144\046" +
    "\105\047\217\051\146\052\101\053\221\054\121\055\132" +
    "\056\141\057\074\060\143\061\127\062\116\063\106\064" +
    "\075\065\212\066\222\067\216\070\214\071\213\072\124" +
    "\073\120\074\215\075\133\001\002\000\014\002\uff8c\015" +
    "\uff8c\031\uff8c\032\uff8c\033\uff8c\001\002\000\014\002\uff8b" +
    "\015\uff8b\031\uff8b\032\uff8b\033\uff8b\001\002\000\102\002" +
    "\uff84\015\uff84\031\uff84\032\uff84\033\uff84\036\154\043\103" +
    "\044\123\045\144\046\105\047\131\051\146\052\101\053" +
    "\151\054\121\055\132\056\141\057\074\060\143\061\127" +
    "\062\116\063\106\064\075\065\147\066\136\067\110\070" +
    "\155\071\104\072\124\073\120\074\111\075\133\001\002" +
    "\000\102\002\uff79\015\uff79\031\uff79\032\uff79\033\uff79\036" +
    "\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79\051\uff79" +
    "\052\uff79\053\uff79\054\uff79\055\uff79\056\uff79\057\uff79\060" +
    "\uff79\061\uff79\062\uff79\063\uff79\064\uff79\065\uff79\066\uff79" +
    "\067\uff79\070\uff79\071\uff79\072\uff79\073\uff79\074\uff79\075" +
    "\uff79\001\002\000\102\002\uff7b\015\uff7b\031\uff7b\032\uff7b" +
    "\033\uff7b\036\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047" +
    "\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b" +
    "\057\uff7b\060\uff7b\061\uff7b\062\uff7b\063\uff7b\064\uff7b\065" +
    "\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b" +
    "\074\uff7b\075\uff7b\001\002\000\014\002\uffc3\015\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\001\002\000\014\002\uff95\015\uff95" +
    "\031\uff95\032\uff95\033\uff95\001\002\000\102\002\uff7f\015" +
    "\uff7f\031\uff7f\032\uff7f\033\uff7f\036\uff7f\043\uff7f\044\uff7f" +
    "\045\uff7f\046\uff7f\047\uff7f\051\uff7f\052\uff7f\053\uff7f\054" +
    "\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f" +
    "\063\uff7f\064\uff7f\065\uff7f\066\uff7f\067\uff7f\070\uff7f\071" +
    "\uff7f\072\uff7f\073\uff7f\074\uff7f\075\uff7f\001\002\000\014" +
    "\002\uff91\015\uff91\031\uff91\032\uff91\033\uff91\001\002\000" +
    "\014\002\uff9b\015\uff9b\031\uff9b\032\uff9b\033\uff9b\001\002" +
    "\000\004\010\207\001\002\000\014\002\uffa1\015\uffa1\031" +
    "\uffa1\032\uffa1\033\uffa1\001\002\000\014\002\uff92\015\uff92" +
    "\031\uff92\032\uff92\033\uff92\001\002\000\014\002\uffc6\015" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\001\002\000\014\002\uff81" +
    "\015\uff81\031\uff81\032\uff81\033\uff81\001\002\000\014\002" +
    "\uff96\015\uff96\031\uff96\032\uff96\033\uff96\001\002\000\102" +
    "\002\uff7e\015\uff7e\031\uff7e\032\uff7e\033\uff7e\036\uff7e\043" +
    "\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\051\uff7e\052\uff7e" +
    "\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e\061" +
    "\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e" +
    "\070\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e\001" +
    "\002\000\014\002\uff90\015\uff90\031\uff90\032\uff90\033\uff90" +
    "\001\002\000\014\002\uff9a\015\uff9a\031\uff9a\032\uff9a\033" +
    "\uff9a\001\002\000\014\002\uff9c\015\uff9c\031\uff9c\032\uff9c" +
    "\033\uff9c\001\002\000\102\002\uff7d\015\uff7d\031\uff7d\032" +
    "\uff7d\033\uff7d\036\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d" +
    "\047\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056" +
    "\uff7d\057\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d" +
    "\065\uff7d\066\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d\073" +
    "\uff7d\074\uff7d\075\uff7d\001\002\000\014\002\uffd3\014\204" +
    "\016\203\031\uffd3\032\uffd3\001\002\000\014\002\uff8d\015" +
    "\uff8d\031\uff8d\032\uff8d\033\uff8d\001\002\000\102\002\uff82" +
    "\015\uff82\031\uff82\032\uff82\033\uff82\036\177\043\173\044" +
    "\166\045\172\046\160\047\131\051\174\052\162\053\151" +
    "\054\167\055\161\056\157\057\164\060\201\061\202\062" +
    "\163\063\165\064\176\065\147\066\136\067\110\070\155" +
    "\071\104\072\171\073\175\074\111\075\170\001\002\000" +
    "\014\002\uff80\015\uff80\031\uff80\032\uff80\033\uff80\001\002" +
    "\000\014\002\uff99\015\uff99\031\uff99\032\uff99\033\uff99\001" +
    "\002\000\102\002\uff78\015\uff78\031\uff78\032\uff78\033\uff78" +
    "\036\uff78\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\051" +
    "\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78\057\uff78" +
    "\060\uff78\061\uff78\062\uff78\063\uff78\064\uff78\065\uff78\066" +
    "\uff78\067\uff78\070\uff78\071\uff78\072\uff78\073\uff78\074\uff78" +
    "\075\uff78\001\002\000\014\002\uff97\015\uff97\031\uff97\032" +
    "\uff97\033\uff97\001\002\000\014\002\uffa0\015\uffa0\031\uffa0" +
    "\032\uffa0\033\uffa0\001\002\000\102\002\uff76\015\uff76\031" +
    "\uff76\032\uff76\033\uff76\036\uff76\043\uff76\044\uff76\045\uff76" +
    "\046\uff76\047\uff76\051\uff76\052\uff76\053\uff76\054\uff76\055" +
    "\uff76\056\uff76\057\uff76\060\uff76\061\uff76\062\uff76\063\uff76" +
    "\064\uff76\065\uff76\066\uff76\067\uff76\070\uff76\071\uff76\072" +
    "\uff76\073\uff76\074\uff76\075\uff76\001\002\000\014\002\uff9e" +
    "\015\uff9e\031\uff9e\032\uff9e\033\uff9e\001\002\000\014\002" +
    "\uff8e\015\uff8e\031\uff8e\032\uff8e\033\uff8e\001\002\000\102" +
    "\002\uff72\015\uff72\031\uff72\032\uff72\033\uff72\036\uff72\043" +
    "\uff72\044\uff72\045\uff72\046\uff72\047\uff72\051\uff72\052\uff72" +
    "\053\uff72\054\uff72\055\uff72\056\uff72\057\uff72\060\uff72\061" +
    "\uff72\062\uff72\063\uff72\064\uff72\065\uff72\066\uff72\067\uff72" +
    "\070\uff72\071\uff72\072\uff72\073\uff72\074\uff72\075\uff72\001" +
    "\002\000\014\002\uff8f\015\uff8f\031\uff8f\032\uff8f\033\uff8f" +
    "\001\002\000\102\002\uff7c\015\uff7c\031\uff7c\032\uff7c\033" +
    "\uff7c\036\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c" +
    "\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057" +
    "\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c\065\uff7c" +
    "\066\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074" +
    "\uff7c\075\uff7c\001\002\000\014\002\uffbf\015\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\001\002\000\014\002\uffa3\015\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\001\002\000\014\002\uff8a\015\uff8a" +
    "\031\uff8a\032\uff8a\033\uff8a\001\002\000\102\002\uff77\015" +
    "\uff77\031\uff77\032\uff77\033\uff77\036\uff77\043\uff77\044\uff77" +
    "\045\uff77\046\uff77\047\uff77\051\uff77\052\uff77\053\uff77\054" +
    "\uff77\055\uff77\056\uff77\057\uff77\060\uff77\061\uff77\062\uff77" +
    "\063\uff77\064\uff77\065\uff77\066\uff77\067\uff77\070\uff77\071" +
    "\uff77\072\uff77\073\uff77\074\uff77\075\uff77\001\002\000\014" +
    "\002\uffb4\015\uffb4\031\uffb4\032\uffb4\033\uffb4\001\002\000" +
    "\014\002\uffba\015\uffba\031\uffba\032\uffba\033\uffba\001\002" +
    "\000\014\002\uffb5\015\uffb5\031\uffb5\032\uffb5\033\uffb5\001" +
    "\002\000\014\002\uffb8\015\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\001\002\000\014\002\uffb0\015\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\001\002\000\014\002\uffb3\015\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\001\002\000\014\002\uffaf\015\uffaf\031\uffaf\032" +
    "\uffaf\033\uffaf\001\002\000\014\002\uffbc\015\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\001\002\000\014\002\uffb6\015\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\001\002\000\014\002\uffb7\015\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\001\002\000\014\002\uffad\015" +
    "\uffad\031\uffad\032\uffad\033\uffad\001\002\000\014\002\uffbb" +
    "\015\uffbb\031\uffbb\032\uffbb\033\uffbb\001\002\000\014\002" +
    "\uffbd\015\uffbd\031\uffbd\032\uffbd\033\uffbd\001\002\000\014" +
    "\002\uffb9\015\uffb9\031\uffb9\032\uffb9\033\uffb9\001\002\000" +
    "\014\002\uffac\015\uffac\031\uffac\032\uffac\033\uffac\001\002" +
    "\000\014\002\uffae\015\uffae\031\uffae\032\uffae\033\uffae\001" +
    "\002\000\014\002\uffbe\015\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\001\002\000\014\002\uff87\015\uff87\031\uff87\032\uff87\033" +
    "\uff87\001\002\000\014\002\uffb2\015\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\001\002\000\014\002\uffb1\015\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\001\002\000\012\002\uffd4\031\uffd4\032\uffd4" +
    "\101\206\001\002\000\004\102\205\001\002\000\010\002" +
    "\uffd7\031\uffd7\032\uffd7\001\002\000\010\002\uffd8\031\uffd8" +
    "\032\uffd8\001\002\000\010\002\uffdf\031\uffdf\032\uffdf\001" +
    "\002\000\014\002\uff85\015\uff85\031\uff85\032\uff85\033\uff85" +
    "\001\002\000\014\002\uff86\015\uff86\031\uff86\032\uff86\033" +
    "\uff86\001\002\000\014\002\uffa9\015\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\001\002\000\014\002\uffa4\015\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\001\002\000\014\002\uffa5\015\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\001\002\000\014\002\uffa6\015\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\001\002\000\014\002\uffa7\015\uffa7" +
    "\031\uffa7\032\uffa7\033\uffa7\001\002\000\014\002\uffab\015" +
    "\uffab\031\uffab\032\uffab\033\uffab\001\002\000\014\002\uff88" +
    "\015\uff88\031\uff88\032\uff88\033\uff88\001\002\000\014\002" +
    "\uffaa\015\uffaa\031\uffaa\032\uffaa\033\uffaa\001\002\000\014" +
    "\002\uffa8\015\uffa8\031\uffa8\032\uffa8\033\uffa8\001\002\000" +
    "\010\002\uffce\031\uffce\032\uffce\001\002\000\010\002\uffda" +
    "\031\uffda\032\uffda\001\002\000\004\101\230\001\002\000" +
    "\004\102\227\001\002\000\010\002\uffd0\031\uffd0\032\uffd0" +
    "\001\002\000\010\002\uffd1\031\uffd1\032\uffd1\001\002\000" +
    "\004\032\232\001\002\000\004\002\ufff4\001\002\000\010" +
    "\002\uffc7\031\uffc7\032\uffc7\001\002\000\010\002\uffc8\031" +
    "\uffc8\032\uffc8\001\002\000\012\002\uffca\031\uffca\032\uffca" +
    "\101\240\001\002\000\012\002\uffc9\031\uffc9\032\uffc9\102" +
    "\237\001\002\000\010\002\uffcb\031\uffcb\032\uffcb\001\002" +
    "\000\010\002\uffcc\031\uffcc\032\uffcc\001\002\000\130\021" +
    "\107\022\137\036\154\043\103\044\123\045\144\046\105" +
    "\047\131\051\146\052\101\053\151\054\121\055\132\056" +
    "\141\057\074\060\143\061\127\062\116\063\106\064\075" +
    "\065\147\066\136\067\110\070\155\071\104\072\124\073" +
    "\120\074\111\075\133\103\117\104\130\105\134\106\152" +
    "\107\114\110\100\111\113\112\142\113\156\114\145\115" +
    "\102\116\076\117\073\120\150\001\002\000\130\021\107" +
    "\022\137\036\154\043\103\044\123\045\144\046\105\047" +
    "\131\051\146\052\101\053\151\054\121\055\132\056\141" +
    "\057\074\060\143\061\127\062\116\063\106\064\075\065" +
    "\147\066\136\067\110\070\155\071\104\072\124\073\120" +
    "\074\111\075\133\103\117\104\130\105\134\106\152\107" +
    "\114\110\100\111\113\112\142\113\156\114\145\115\102" +
    "\116\076\117\073\120\150\001\002\000\014\002\uffc1\015" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\001\002\000\014\002\uffc4" +
    "\015\uffc4\031\uffc4\032\uffc4\033\uffc4\001\002\000\014\002" +
    "\uffc2\015\uffc2\031\uffc2\032\uffc2\033\uffc2\001\002\000\014" +
    "\002\uffc5\015\uffc5\031\uffc5\032\uffc5\033\uffc5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\022\002\026\003\005\004\003\005\006\006" +
    "\020\015\024\017\010\024\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\007\124\016\111\025\152\026\076\027\114\030\137\031" +
    "\125\001\001\000\020\003\057\004\003\005\006\006\020" +
    "\015\024\017\010\024\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\041\004\003\005\006\006" +
    "\020\015\024\017\010\024\014\001\001\000\002\001\001" +
    "\000\004\020\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\061\004\003\005\006\006\020\015\024" +
    "\017\010\024\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\064\004\003\005\006\006\020\015\024" +
    "\017\010\024\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\210\031\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\245\016\111\025\152\026" +
    "\076\027\244\030\137\031\125\001\001\000\020\007\243" +
    "\016\111\025\152\026\076\027\242\030\137\031\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    Ventana v=new Ventana();    

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CANT_PLURALES ::= QUINCE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("15"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CANT_PLURALES ::= CATORCE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("14"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CANT_PLURALES ::= TRECE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("13"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CANT_PLURALES ::= DOCE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("12"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CANT_PLURALES ::= ONCE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("11"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CANT_PLURALES ::= DIEZ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("10"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CANT_PLURALES ::= NUEVE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("9"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CANT_PLURALES ::= OCHO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("8"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CANT_PLURALES ::= SIETE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("7"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CANT_PLURALES ::= SEIS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("6"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CANT_PLURALES ::= CINCO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("5"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CANT_PLURALES ::= CUATRO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("4"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CANT_PLURALES ::= TRES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("3"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CANT_PLURALES ::= DOS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("2"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PLATILLO ::= PLATILLOS_A 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 33. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.clear(); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PLATILLO ::= PLATILLOS_O 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 32. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.clear(); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PLATILLO ::= CANT_UNA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 31. LINEA:"+(sright+1)+"\n Se especifica cantidad pero no un platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroCantidadPorfavor.png"); v.audio.clear(); v.audio.add(17);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PLATILLO ::= CANT_UN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 30. LINEA:"+(sright+1)+"\n Se especifica cantidad pero no un platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroCantidadPorfavor.png"); v.audio.clear(); v.audio.add(17);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PLATILLO ::= CANT_PLURALES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 29. LINEA:"+(sright+1)+"\n Se especifica cantidad pero no un platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroCantidadPorfavor.png"); v.audio.clear(); v.audio.add(17);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PLATILLO ::= CANT_PLURALES PLATILLOS_O 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PLATILLO ::= CANT_PLURALES PLATILLOS_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PLATILLO ::= CANT_UNA PLATILLOS_A 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("1"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PLATILLO ::= CANT_UN PLATILLOS_O 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("1"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PLATILLOS_A ::= PIÑA_COLADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,25");/* Piña colada - $45.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_A",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PLATILLOS_A ::= VICTORIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,24");/* Victoria - $39.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_A",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PLATILLOS_A ::= CORONA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,23");/* Corona - $39.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_A",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PLATILLOS_A ::= COCA_COLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,22");/* Coca-cola - $18.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_A",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PLATILLOS_A ::= NARANJADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,21");/* Naranjada - $22.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_A",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PLATILLOS_A ::= LIMONADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,20");/* Limonada - $22.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_A",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PLATILLOS_A ::= FRUTA_CARAMELO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,8");/* Fruta en caramelo - $28.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_A",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PLATILLOS_A ::= HAMBURGUESA_ARROZ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,5"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_A",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PLATILLOS_O ::= VAMPIRO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,27");/* Vampiro - $55.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PLATILLOS_O ::= JUGO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,26");/* Jugo - $25.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PLATILLOS_O ::= MARTINI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,19");/* Martini - $45.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PLATILLOS_O ::= EXPRESSO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,18");/* Expresso - $35.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PLATILLOS_O ::= CAFE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,17");/* Cafe - $20.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PLATILLOS_O ::= CHURROS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,15");/* Churros - $6.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PLATILLOS_O ::= PIE_QUESO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,14");/* Pie de queso - $26.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PLATILLOS_O ::= PIE_MORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,13");/* Pie de mora - $26.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PLATILLOS_O ::= PIE_FRESA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,12");/* Pie de fresa - $26.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PLATILLOS_O ::= PIE_LIMON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,11");/* Pie de limon - $26.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PLATILLOS_O ::= HELADO_CACAO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,10");/* Helado de cacao - $30.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PLATILLOS_O ::= FONDANT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,9");/* Fondant - $40.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PLATILLOS_O ::= HELADO_VAINILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		   v.codObjPeticion.add("add,cuenta,7");/* Helado de vainilla - $30.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PLATILLOS_O ::= TERIYAKI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,6");/* Teriyaki - $120.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PLATILLOS_O ::= BOMBAZO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,4"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PLATILLOS_O ::= CAMARONITO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,3"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PLATILLOS_O ::= SUSHI_RES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,2"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PLATILLOS_O ::= SUSHI_POLLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,1"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PLATILLOS_O ::= SUSHI_CAMARON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("add,cuenta,0"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLOS_O",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PLATILLO_ERR_UN ::= CANT_UN PIÑA_COLADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 2. LINEA:"+(sright+1)+"\n No es posible pedir un piña colada. \n Ejemplo: ' ...quiero 'una' piña colada'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PLATILLO_ERR_UN ::= CANT_UN VICTORIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 2. LINEA:"+(sright+1)+"\n No es posible pedir un victoria. \n Ejemplo: ' ...quiero 'una' victoria'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PLATILLO_ERR_UN ::= CANT_UN CORONA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 2. LINEA:"+(sright+1)+"\n No es posible pedir un corona. \n Ejemplo: ' ...quiero 'una' corona'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PLATILLO_ERR_UN ::= CANT_UN COCA_COLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 2. LINEA:"+(sright+1)+"\n No es posible pedir un coca cola. \n Ejemplo: ' ...quiero 'una' coca cola'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PLATILLO_ERR_UN ::= CANT_UN NARANJADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 2. LINEA:"+(sright+1)+"\n No es posible pedir un naranjada. \n Ejemplo: ' ...quiero 'una' naranjada'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PLATILLO_ERR_UN ::= CANT_UN LIMONADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 2. LINEA:"+(sright+1)+"\n No es posible pedir un limonada. \n Ejemplo: ' ...quiero 'una' limonada'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PLATILLO_ERR_UN ::= CANT_UN FRUTA_CARAMELO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 2. LINEA:"+(sright+1)+"\n No es posible pedir un fruta en caramelo. \n Ejemplo: ' ...quiero 'una' fruta en caramelo'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PLATILLO_ERR_UN ::= CANT_UN HAMBURGUESA_ARROZ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 2. LINEA:"+(sright+1)+"\n No es posible pedir un hamburguesa de arroz. \n Ejemplo: ' ...quiero 'una' hamburguesa de arroz'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PLATILLO_ERR_UNA ::= CANT_UNA VAMPIRO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una vampiro. \n Ejemplo: ' ...quiero 'un' vampiro'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PLATILLO_ERR_UNA ::= CANT_UNA JUGO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una jugo. \n Ejemplo: ' ...quiero 'un' jugo'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PLATILLO_ERR_UNA ::= CANT_UNA MARTINI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una martini. \n Ejemplo: ' ...quiero 'un' martini'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PLATILLO_ERR_UNA ::= CANT_UNA EXPRESSO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una expresso. \n Ejemplo: ' ...quiero 'un' expresso'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PLATILLO_ERR_UNA ::= CANT_UNA CAFE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una cafe. \n Ejemplo: ' ...quiero 'un' cafe'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PLATILLO_ERR_UNA ::= CANT_UNA CHURROS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una churro. \n Ejemplo: ' ...quiero 'un' churro'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PLATILLO_ERR_UNA ::= CANT_UNA PIE_QUESO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una pie de queso. \n Ejemplo: ' ...quiero 'un' pie de queso'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PLATILLO_ERR_UNA ::= CANT_UNA PIE_MORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una pie de mora. \n Ejemplo: ' ...quiero 'un' pie de mora'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PLATILLO_ERR_UNA ::= CANT_UNA PIE_FRESA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una pie de fresa. \n Ejemplo: ' ...quiero 'un' pie de fresa'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PLATILLO_ERR_UNA ::= CANT_UNA PIE_LIMON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una pie de limon. \n Ejemplo: ' ...quiero 'un' pie de limon'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PLATILLO_ERR_UNA ::= CANT_UNA HELADO_CACAO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una helado de cacao. \n Ejemplo: ' ...quiero 'un' helado de cacao'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PLATILLO_ERR_UNA ::= CANT_UNA FONDANT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una fondant. \n Ejemplo: ' ...quiero 'un' fondant'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PLATILLO_ERR_UNA ::= CANT_UNA HELADO_VAINILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una helado de vainilla. \n Ejemplo: ' ...quiero 'un' helado de vainilla'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PLATILLO_ERR_UNA ::= CANT_UNA TERIYAKI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una teriyaki. \n Ejemplo: ' ...quiero 'un' teriyaki'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PLATILLO_ERR_UNA ::= CANT_UNA BOMBAZO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una bombazo. \n Ejemplo: ' ...quiero 'un' bombazo'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PLATILLO_ERR_UNA ::= CANT_UNA CAMARONITO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una camaronito. \n Ejemplo: ' ...quiero 'un' camaronito'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PLATILLO_ERR_UNA ::= CANT_UNA SUSHI_RES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una sushi de res. \n Ejemplo: ' ...quiero 'un' sushi de res'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PLATILLO_ERR_UNA ::= CANT_UNA SUSHI_POLLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una sushi de pollo. \n Ejemplo: ' ...quiero 'un' sushi de pollo'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PLATILLO_ERR_UNA ::= CANT_UNA SUSHI_CAMARON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una sushi de camaron. \n Ejemplo: ' ...quiero 'un' sushi de camaron'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PLATILLO_ERR_UNA_UN ::= PLATILLO_ERR_UN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.clear(); v.audio.clear(); v.audio.add(15);  v.hayError=true; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA_UN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PLATILLO_ERR_UNA_UN ::= PLATILLO_ERR_UNA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.clear(); v.audio.clear(); v.audio.add(14); v.hayError=true; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA_UN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO Y PLATILLO_ERR_UNA_UN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO Coma PLATILLO_ERR_UNA_UN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENT_HACER_PEDIDO ::= QUIERO PLATILLO_ERR_UNA_UN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO Y PLATILLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(12); v.rutaAutomata.add("/automatas/hacerPedido.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO Coma PLATILLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(12); v.rutaAutomata.add("/automatas/hacerPedido.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENT_HACER_PEDIDO ::= QUIERO PLATILLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(12); v.rutaAutomata.add("/automatas/hacerPedido.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENT_DICTAR_MENU ::= LEER CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 28. LINEA:"+(sright+1)+"\n Se debe indicar 'la' o 'el' objeto. \n Ejemplo: '...la carta...' "); v.rutaAutomata.add("/automatas/leerMenu.png"); v.audio.clear(); v.audio.add(22); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENT_DICTAR_MENU ::= LEER MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 27. LINEA:"+(sright+1)+"\n Se debe de indicar 'la' o 'el' objeto. \n Ejemplo: '...el menu...' "); v.audio.clear(); v.audio.add(22); v.rutaAutomata.add("/automatas/leerMenu.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENT_DICTAR_MENU ::= LEER LA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 26. LINEA:"+(sright+1)+"\n No se especifica el objeto a leer. \n Ejemplo: 'Oye Marvin leeme la carta por favor' "); v.rutaAutomata.add("/automatas/leerEl.png"); v.audio.clear(); v.audio.add(21); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENT_DICTAR_MENU ::= LEER EL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 25. LINEA:"+(sright+1)+"\n No se especifica el objeto a leer. \n Ejemplo: 'Oye Marvin leeme el menu por favor' "); v.rutaAutomata.add("/automatas/leerEl.png");  v.audio.clear(); v.audio.add(21); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENT_DICTAR_MENU ::= LEER LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  v.audio.add(3); v.rutaAutomata.add("/automatas/leerMenu.png");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENT_DICTAR_MENU ::= LEER EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  v.audio.add(3); v.rutaAutomata.add("/automatas/leerMenu.png");   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENT_MOSTRAR_MENU_ERR ::= QUIERO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 24. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición. No se especifíca que es lo que se quiere.\n Ejemplo: '...quiero la carta...', 'quiero el menu', '...quiero un sushi de pollo...'"); v.audio.clear(); v.audio.add(24); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU_ERR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENT_MOSTRAR_MENU_ERR ::= LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 23. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición. Falta un 'quiero' o 'muestrame' antes de 'la'.\n Ejemplo: '...quiero la carta...' "); v.rutaAutomata.add("/automatas/sinQuieroVer.png"); v.audio.clear(); v.audio.add(24); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU_ERR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENT_MOSTRAR_MENU_ERR ::= EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 22. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición. Falta un 'ver' o 'muestrame' antes de 'menu'. \n Ejemplo: '...muestrame el menu...' "); v.rutaAutomata.add("/automatas/sinQuieroVer.png"); v.audio.clear(); v.audio.add(24); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU_ERR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENT_MOSTRAR_MENU_ERR ::= VER LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 21. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición. Falta un 'quiero' antes de 'ver'. \n Ejemplo: 'Oye Marvin quiero ver la carta...' "); v.rutaAutomata.add("/automatas/sinQuiero.png"); v.audio.clear(); v.audio.add(24); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU_ERR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENT_MOSTRAR_MENU_ERR ::= VER EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 20. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición. Falta un 'quiero' antes de 'ver'. \n Ejemplo: 'Oye Marvin muestrame el menu...' "); v.rutaAutomata.add("/automatas/sinQuiero.png"); v.audio.clear(); v.audio.add(24); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU_ERR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENT_MOSTRAR_MENU_ERR ::= MOSTRAR EL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 19. LINEA:"+(sright+1)+"\n No se reconoce la petición.  Falta indicar 'menu' despues de 'el' \n Ejemplo: 'Oye Marvin muestrame el menu...' "); v.rutaAutomata.add("/automatas/mostrarEl.png");  v.audio.clear(); v.audio.add(19); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU_ERR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENT_MOSTRAR_MENU_ERR ::= QUIERO VER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true;v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se reconoce la petición.  Falta indicar 'el menu' despues de 'ver'\n Ejemplo: 'Oye Marvin quiero ver el menu...' "); v.rutaAutomata.add("/automatas/quieroVer.png"); v.audio.clear(); v.audio.add(18); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU_ERR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENT_MOSTRAR_MENU_ERR ::= QUIERO VER EL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 17. LINEA:"+(sright+1)+"\n No se reconoce la solicitud de acción. Falta indicar 'menu' despues de 'ver' \n Ejemplo: 'Oye Marvin quiero ver el menu...' "); v.rutaAutomata.add("/automatas/quieroVer.png"); v.audio.clear(); v.audio.add(18); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU_ERR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENT_MOSTRAR_MENU ::= MOSTRAR LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , "); v.audio.add(1); v.rutaAutomata.add("/automatas/mostrarMenu.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENT_MOSTRAR_MENU ::= MOSTRAR EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , "); v.audio.add(1); v.rutaAutomata.add("/automatas/mostrarMenu.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENT_MOSTRAR_MENU ::= QUIERO VER LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , "); v.audio.add(1); v.rutaAutomata.add("/automatas/mostrarMenu.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENT_MOSTRAR_MENU ::= QUIERO VER EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , "); v.audio.add(1); v.rutaAutomata.add("/automatas/mostrarMenu.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENT_DAR_CUENTA ::= CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 16. LINEA:"+(sright+1)+"\n No se reconoce la solicitud de acción. Se debe indicar 'la' o 'el' objeto. \n Ejemplo: 'Oye Marvin traeme la cuenta por favor' "); v.rutaAutomata.add("/automatas/cuenta.png"); v.audio.clear(); v.audio.add(24); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENT_DAR_CUENTA ::= LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 15. LINEA:"+(sright+1)+"\n No se reconoce la solicitud de acción. Se requiere un 'traeme' o 'quiero' antes de indicar el objeto 'cuenta'.\n Ejemplo: 'Oye Marvin quiero la cuenta por favor' "); v.rutaAutomata.add("/automatas/laCuenta.png"); v.audio.clear(); v.audio.add(24); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENT_DAR_CUENTA ::= MOSTRAR LA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 14. LINEA:"+(sright+1)+"\n No especifica lo que se desea que se muestre. \n Ejemplo: 'Oye Marvin muéstrame el menú por favor' "); v.rutaAutomata.add("/automatas/quieroLa.png"); v.audio.clear(); v.audio.add(23); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENT_DAR_CUENTA ::= TRAER LA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.hayError=true; v.genErrores.add("Error sintáctico 13. LINEA:"+(sright+1)+"\n No especifica lo que requiere. \n Ejemplo: 'Oye Marvin traeme la cuenta por favor' ");  v.rutaAutomata.add("/automatas/quieroLa.png"); v.audio.clear(); v.audio.add(23); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT_DAR_CUENTA ::= MOSTRAR LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,cuenta,mesa, ");v.audio.add(2); v.rutaAutomata.add("/automatas/mostrarCuenta.png");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT_DAR_CUENTA ::= TRAER LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,cuenta,mesa, "); v.audio.add(2); v.rutaAutomata.add("/automatas/mostrarCuenta.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT_DAR_CUENTA ::= QUIERO LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,cuenta,mesa, ");  v.audio.add(2); v.rutaAutomata.add("/automatas/mostrarCuenta.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // UTENCILIOS ::= TENEDORES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("traer,mesa,tene, "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UTENCILIOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // UTENCILIOS ::= CUCHARAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("traer,mesa,cuch, "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UTENCILIOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // UTENCILIOS ::= SERVILLETAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("traer,mesa,serv, "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UTENCILIOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // UTENCILIOS ::= VASOS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("traer,mesa,vaso, "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UTENCILIOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENT_DAR_CUENTA_ERR ::= QUIERO LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 12. LINEA:"+(sright+1)+"\n No especifica lo que requiere. \n Ejemplo: 'OYE SANJI QUIERO LA CUENTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA_ERR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ERROR_SENTENCIAS ::= SENT_MOSTRAR_MENU_ERR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERROR_SENTENCIAS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ERROR_SENTENCIAS ::= SENT_DAR_CUENTA_ERR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERROR_SENTENCIAS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAS ::= TRAER UTENCILIOS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(4); v.rutaAutomata.add("/automatas/traerUtencilios.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS ::= SENT_DICTAR_MENU 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS ::= SENT_DAR_CUENTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS ::= SENT_MOSTRAR_MENU_ERR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS ::= SENT_MOSTRAR_MENU 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= SENT_HACER_PEDIDO_ERR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= SENT_HACER_PEDIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MESAS ::= MESAD 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("entregar,mesad, , "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MESAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MESAS ::= MESAC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("entregar,mesac, , "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MESAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MESAS ::= MESAB 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("entregar,mesab, , "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MESAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MESAS ::= MESAA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("entregar,mesaa, , "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MESAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= OYE SANJI POR FAVOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 11. LINEA:"+(sright+1)+"\n Debe de incluir peticiones en su pedido.\n Ejemplo:  'Oye Marvin traeme servilletas por favor'\n"); v.rutaAutomata.add("/automatas/sinSentencias.png"); v.audio.clear(); v.audio.add(28); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO ::= OYE SANJI POR FAVOR SENTENCIAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 10. LINEA:"+(sright+1)+"\n Estructura de oraciones incorrecta. Cada petición debe tener el orden 'Oye Marvin [peticion] por favor'\n Ejemplo:  'Oye Marvin quiero la cuenta por favor' \n"); v.rutaAutomata.add("/automatas/sentenciasFuera.png"); v.audio.clear(); v.audio.add(26); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= SENTENCIAS POR FAVOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true;  v.genErrores.add("Error sintáctico 9. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición. Se debe iniciar la petición con un 'Oye Marvin' si se desea realizar una petición.\n Ejemplo: 'Oye Marvin ...'\n"); v.rutaAutomata.add("/automatas/sinOyeMarvin.png"); v.audio.clear(); v.audio.add(27); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= OYE SENTENCIAS POR FAVOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 8. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición. Falta un 'Marvin' despues de 'Oye'\n Ejemplo: 'Oye Marvin ...'\n"); v.rutaAutomata.add("/automatas/sinMarvin.png"); v.audio.clear(); v.audio.add(27); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= SANJI SENTENCIAS POR FAVOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 7. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición. Falta un 'Oye' al inicio. \n Ejemplo: 'Oye Marvin ...'\n"); v.rutaAutomata.add("/automatas/sinOye.png"); v.audio.clear(); v.audio.clear(); v.audio.add(27); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= SANJI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 6. LINEA:"+(sright+1)+"\n Estructura de oraciones incorrecta.\n Ejemplo: 'Oye Marvin ...'\n"); v.rutaAutomata.add("/automatas/soloMarvin.png"); v.audio.clear(); v.audio.add(26); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= OYE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 5. LINEA:"+(sright+1)+"\n Estructura de oraciones incorrecta. No se encuentra la orden 'Marvin' después de 'Oye'\n Ejemplo: 'Oye Marvin...'\n"); v.rutaAutomata.add("/automatas/oye.png"); v.audio.clear(); v.audio.add(26); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= OYE SANJI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 4. LINEA:"+(sright+1)+"\n Estructura de oraciones incorrecta. Se espera un petición después de 'Oye Marvin'\n Ejemplo: 'Oye Marvin [petición] por favor'\n"); v.rutaAutomata.add("/automatas/oyeSanji.png"); v.audio.clear(); v.audio.add(26); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= OYE SANJI SENTENCIAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 3. LINEA:"+(sright+1)+"\n No se reconoce el fin de la petición. Se espera un por favor al finalizar la petición.\n Ejemplo: 'Oye Marvin [petición] por favor'\n"); v.rutaAutomata.add("/automatas/sinPorFavor.png"); v.audio.clear(); v.audio.add(25);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= OYE SANJI SENTENCIAS FAVOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 2. LINEA:"+(sright+1)+"\n No se reconoce el fin de la petición. Hace falta un 'por' al finalizar la sentencia\n Ejemplo: 'Oye Marvin [petición] por favor'\n"); v.rutaAutomata.add("/automatas/sinPor.png"); v.audio.clear(); v.audio.add(25);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= OYE SANJI SENTENCIAS POR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.hayError=true; v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el fin de la petición. Se espera un 'favor' al final. \n Ejemplo: 'Oye Marvin [petición] por favor'\n"); v.rutaAutomata.add("/automatas/sinFavor.png"); v.audio.clear(); v.audio.add(25); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= ADIOS SANJI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("free,marvin,mesa, "); v.delete=true;  v.audio.add(6);  v.rutaAutomata.add("/automatas/adiosMarvin.png");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= LISTO MESAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.rutaAutomata.add("/automatas/listoMesas.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= LISTO SANJI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("free,marvin,mesa, "); v.audio.add(5); v.rutaAutomata.add("/automatas/listoMarvin.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= OYE SANJI SENTENCIAS POR FAVOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

