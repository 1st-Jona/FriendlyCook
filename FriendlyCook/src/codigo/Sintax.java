
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 28 18:19:01 MST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 28 18:19:01 MST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\007\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\005\006\000\002\005\006\000\002" +
    "\005\005\000\002\005\005\000\002\016\005\000\002\016" +
    "\005\000\002\004\004\000\002\004\005\000\002\004\005" +
    "\000\002\004\004\000\002\004\005\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\012\003\000\002\012\003\000\002" +
    "\013\003\000\002\013\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\006\006\004\014\005\001\002\000\004\004" +
    "\011\001\002\000\004\004\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\002\uffff\001" +
    "\002\000\012\005\016\007\022\067\015\071\020\001\002" +
    "\000\004\026\166\001\002\000\004\026\ufffb\001\002\000" +
    "\004\026\ufffc\001\002\000\006\015\162\017\161\001\002" +
    "\000\046\015\152\022\036\023\052\070\151\074\047\075" +
    "\043\076\034\077\037\100\044\101\033\102\045\103\051" +
    "\104\025\105\031\106\027\107\041\110\030\111\042\001" +
    "\002\000\004\026\ufffd\001\002\000\006\015\146\017\145" +
    "\001\002\000\052\005\040\016\026\022\036\023\052\026" +
    "\ufffe\031\035\074\047\075\043\076\034\077\037\100\044" +
    "\101\033\102\045\103\051\104\025\105\031\106\027\107" +
    "\041\110\030\111\042\001\002\000\004\015\023\001\002" +
    "\000\004\010\024\001\002\000\004\026\ufff9\001\002\000" +
    "\070\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050" +
    "\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065" +
    "\uffaa\066\uffaa\001\002\000\042\022\036\023\052\074\047" +
    "\075\043\076\034\077\037\100\044\101\033\102\045\103" +
    "\051\104\025\105\031\106\027\107\041\110\030\111\042" +
    "\001\002\000\070\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8" +
    "\064\uffa8\065\uffa8\066\uffa8\001\002\000\070\034\uffa6\035" +
    "\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6" +
    "\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\001" +
    "\002\000\070\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064" +
    "\uffa9\065\uffa9\066\uffa9\001\002\000\050\034\141\035\135" +
    "\036\130\037\133\040\122\042\136\043\124\045\131\046" +
    "\123\047\121\050\126\051\142\052\143\053\125\054\127" +
    "\055\140\063\134\064\137\066\132\001\002\000\070\034" +
    "\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad" +
    "\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066" +
    "\uffad\001\002\000\070\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\uffb0\066\uffb0\001\002\000\042\022\036" +
    "\023\052\074\047\075\043\076\034\077\037\100\044\101" +
    "\033\102\045\103\051\104\025\105\031\106\027\107\041" +
    "\110\030\111\042\001\002\000\070\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\041\116\042\uffb6\043\uffb6\044\113" +
    "\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\056\115\057\112\060\111\061\114" +
    "\062\117\063\uffb6\064\uffb6\065\110\066\uffb6\001\002\000" +
    "\070\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065" +
    "\uffaf\066\uffaf\001\002\000\042\022\036\023\052\074\047" +
    "\075\043\076\034\077\037\100\044\101\033\102\045\103" +
    "\051\104\025\105\031\106\027\107\041\110\030\111\042" +
    "\001\002\000\070\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\064\uffa7\065\uffa7\066\uffa7\001\002\000\070\034\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052" +
    "\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5" +
    "\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\001" +
    "\002\000\070\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064" +
    "\uffb1\065\uffb1\066\uffb1\001\002\000\070\034\uffae\035\uffae" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044" +
    "\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\001\002" +
    "\000\070\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac" +
    "\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056" +
    "\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac" +
    "\065\uffac\066\uffac\001\002\000\022\041\106\044\102\056" +
    "\104\057\101\060\100\061\103\062\105\065\077\001\002" +
    "\000\070\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2" +
    "\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2" +
    "\065\uffb2\066\uffb2\001\002\000\052\005\uffee\016\uffee\022" +
    "\uffee\023\uffee\026\uffee\031\uffee\074\uffee\075\uffee\076\uffee" +
    "\077\uffee\100\uffee\101\uffee\102\uffee\103\uffee\104\uffee\105" +
    "\uffee\106\uffee\107\uffee\110\uffee\111\uffee\001\002\000\070" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab" +
    "\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057" +
    "\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab" +
    "\066\uffab\001\002\000\070\034\074\035\070\036\064\037" +
    "\066\040\055\041\uffb4\042\071\043\057\044\uffb4\045\063" +
    "\046\056\047\054\050\061\051\075\052\076\053\060\054" +
    "\062\055\073\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\063\067\064\072\065\uffb4\066\065\001\002\000\070\034" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb3\042\uffb5" +
    "\043\uffb5\044\uffb3\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb5\064\uffb5\065\uffb3\066" +
    "\uffb5\001\002\000\052\005\uffd3\016\uffd3\022\uffd3\023\uffd3" +
    "\026\uffd3\031\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100" +
    "\uffd3\101\uffd3\102\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3" +
    "\107\uffd3\110\uffd3\111\uffd3\001\002\000\052\005\uffe3\016" +
    "\uffe3\022\uffe3\023\uffe3\026\uffe3\031\uffe3\074\uffe3\075\uffe3" +
    "\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3\103\uffe3\104" +
    "\uffe3\105\uffe3\106\uffe3\107\uffe3\110\uffe3\111\uffe3\001\002" +
    "\000\052\005\uffd5\016\uffd5\022\uffd5\023\uffd5\026\uffd5\031" +
    "\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5" +
    "\102\uffd5\103\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5\110" +
    "\uffd5\111\uffd5\001\002\000\052\005\uffdd\016\uffdd\022\uffdd" +
    "\023\uffdd\026\uffdd\031\uffdd\074\uffdd\075\uffdd\076\uffdd\077" +
    "\uffdd\100\uffdd\101\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd" +
    "\106\uffdd\107\uffdd\110\uffdd\111\uffdd\001\002\000\052\005" +
    "\uffcb\016\uffcb\022\uffcb\023\uffcb\026\uffcb\031\uffcb\074\uffcb" +
    "\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103" +
    "\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb\110\uffcb\111\uffcb" +
    "\001\002\000\052\005\uffd1\016\uffd1\022\uffd1\023\uffd1\026" +
    "\uffd1\031\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1" +
    "\101\uffd1\102\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1\107" +
    "\uffd1\110\uffd1\111\uffd1\001\002\000\052\005\uffc9\016\uffc9" +
    "\022\uffc9\023\uffc9\026\uffc9\031\uffc9\074\uffc9\075\uffc9\076" +
    "\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9" +
    "\105\uffc9\106\uffc9\107\uffc9\110\uffc9\111\uffc9\001\002\000" +
    "\052\005\uffd7\016\uffd7\022\uffd7\023\uffd7\026\uffd7\031\uffd7" +
    "\074\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7\102" +
    "\uffd7\103\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7\110\uffd7" +
    "\111\uffd7\001\002\000\052\005\uffe7\016\uffe7\022\uffe7\023" +
    "\uffe7\026\uffe7\031\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7" +
    "\100\uffe7\101\uffe7\102\uffe7\103\uffe7\104\uffe7\105\uffe7\106" +
    "\uffe7\107\uffe7\110\uffe7\111\uffe7\001\002\000\052\005\uffd9" +
    "\016\uffd9\022\uffd9\023\uffd9\026\uffd9\031\uffd9\074\uffd9\075" +
    "\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\103\uffd9" +
    "\104\uffd9\105\uffd9\106\uffd9\107\uffd9\110\uffd9\111\uffd9\001" +
    "\002\000\052\005\uffe5\016\uffe5\022\uffe5\023\uffe5\026\uffe5" +
    "\031\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\101" +
    "\uffe5\102\uffe5\103\uffe5\104\uffe5\105\uffe5\106\uffe5\107\uffe5" +
    "\110\uffe5\111\uffe5\001\002\000\052\005\uffb9\016\uffb9\022" +
    "\uffb9\023\uffb9\026\uffb9\031\uffb9\074\uffb9\075\uffb9\076\uffb9" +
    "\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105" +
    "\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\001\002\000\052" +
    "\005\uffe9\016\uffe9\022\uffe9\023\uffe9\026\uffe9\031\uffe9\074" +
    "\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9\101\uffe9\102\uffe9" +
    "\103\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9\110\uffe9\111" +
    "\uffe9\001\002\000\052\005\uffdf\016\uffdf\022\uffdf\023\uffdf" +
    "\026\uffdf\031\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100" +
    "\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf" +
    "\107\uffdf\110\uffdf\111\uffdf\001\002\000\052\005\uffb7\016" +
    "\uffb7\022\uffb7\023\uffb7\026\uffb7\031\uffb7\074\uffb7\075\uffb7" +
    "\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104" +
    "\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\001\002" +
    "\000\052\005\uffc7\016\uffc7\022\uffc7\023\uffc7\026\uffc7\031" +
    "\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7" +
    "\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110" +
    "\uffc7\111\uffc7\001\002\000\052\005\uffeb\016\uffeb\022\uffeb" +
    "\023\uffeb\026\uffeb\031\uffeb\074\uffeb\075\uffeb\076\uffeb\077" +
    "\uffeb\100\uffeb\101\uffeb\102\uffeb\103\uffeb\104\uffeb\105\uffeb" +
    "\106\uffeb\107\uffeb\110\uffeb\111\uffeb\001\002\000\052\005" +
    "\uffcf\016\uffcf\022\uffcf\023\uffcf\026\uffcf\031\uffcf\074\uffcf" +
    "\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf\103" +
    "\uffcf\104\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf\111\uffcf" +
    "\001\002\000\052\005\uffcd\016\uffcd\022\uffcd\023\uffcd\026" +
    "\uffcd\031\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd" +
    "\101\uffcd\102\uffcd\103\uffcd\104\uffcd\105\uffcd\106\uffcd\107" +
    "\uffcd\110\uffcd\111\uffcd\001\002\000\052\005\uffc0\016\uffc0" +
    "\022\uffc0\023\uffc0\026\uffc0\031\uffc0\074\uffc0\075\uffc0\076" +
    "\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0" +
    "\105\uffc0\106\uffc0\107\uffc0\110\uffc0\111\uffc0\001\002\000" +
    "\052\005\uffc2\016\uffc2\022\uffc2\023\uffc2\026\uffc2\031\uffc2" +
    "\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102" +
    "\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2" +
    "\111\uffc2\001\002\000\052\005\uffc4\016\uffc4\022\uffc4\023" +
    "\uffc4\026\uffc4\031\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4" +
    "\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106" +
    "\uffc4\107\uffc4\110\uffc4\111\uffc4\001\002\000\052\005\uffdc" +
    "\016\uffdc\022\uffdc\023\uffdc\026\uffdc\031\uffdc\074\uffdc\075" +
    "\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc" +
    "\104\uffdc\105\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc\001" +
    "\002\000\052\005\uffbe\016\uffbe\022\uffbe\023\uffbe\026\uffbe" +
    "\031\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101" +
    "\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe" +
    "\110\uffbe\111\uffbe\001\002\000\052\005\uffc6\016\uffc6\022" +
    "\uffc6\023\uffc6\026\uffc6\031\uffc6\074\uffc6\075\uffc6\076\uffc6" +
    "\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105" +
    "\uffc6\106\uffc6\107\uffc6\110\uffc6\111\uffc6\001\002\000\052" +
    "\005\uffbc\016\uffbc\022\uffbc\023\uffbc\026\uffbc\031\uffbc\074" +
    "\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc" +
    "\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\111" +
    "\uffbc\001\002\000\052\005\uffe2\016\uffe2\022\uffe2\023\uffe2" +
    "\026\uffe2\031\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100" +
    "\uffe2\101\uffe2\102\uffe2\103\uffe2\104\uffe2\105\uffe2\106\uffe2" +
    "\107\uffe2\110\uffe2\111\uffe2\001\002\000\052\005\ufff0\016" +
    "\ufff0\022\ufff0\023\ufff0\026\ufff0\031\ufff0\074\ufff0\075\ufff0" +
    "\076\ufff0\077\ufff0\100\ufff0\101\ufff0\102\ufff0\103\ufff0\104" +
    "\ufff0\105\ufff0\106\ufff0\107\ufff0\110\ufff0\111\ufff0\001\002" +
    "\000\052\005\uffbf\016\uffbf\022\uffbf\023\uffbf\026\uffbf\031" +
    "\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf" +
    "\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\110" +
    "\uffbf\111\uffbf\001\002\000\052\005\uffc1\016\uffc1\022\uffc1" +
    "\023\uffc1\026\uffc1\031\uffc1\074\uffc1\075\uffc1\076\uffc1\077" +
    "\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1" +
    "\106\uffc1\107\uffc1\110\uffc1\111\uffc1\001\002\000\052\005" +
    "\uffc3\016\uffc3\022\uffc3\023\uffc3\026\uffc3\031\uffc3\074\uffc3" +
    "\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103" +
    "\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3" +
    "\001\002\000\052\005\uffdb\016\uffdb\022\uffdb\023\uffdb\026" +
    "\uffdb\031\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb" +
    "\101\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb\106\uffdb\107" +
    "\uffdb\110\uffdb\111\uffdb\001\002\000\052\005\uffbd\016\uffbd" +
    "\022\uffbd\023\uffbd\026\uffbd\031\uffbd\074\uffbd\075\uffbd\076" +
    "\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd" +
    "\105\uffbd\106\uffbd\107\uffbd\110\uffbd\111\uffbd\001\002\000" +
    "\052\005\uffc5\016\uffc5\022\uffc5\023\uffc5\026\uffc5\031\uffc5" +
    "\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102" +
    "\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5" +
    "\111\uffc5\001\002\000\052\005\uffe1\016\uffe1\022\uffe1\023" +
    "\uffe1\026\uffe1\031\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1" +
    "\100\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1\106" +
    "\uffe1\107\uffe1\110\uffe1\111\uffe1\001\002\000\052\005\uffbb" +
    "\016\uffbb\022\uffbb\023\uffbb\026\uffbb\031\uffbb\074\uffbb\075" +
    "\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb" +
    "\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\111\uffbb\001" +
    "\002\000\052\005\uffef\016\uffef\022\uffef\023\uffef\026\uffef" +
    "\031\uffef\074\uffef\075\uffef\076\uffef\077\uffef\100\uffef\101" +
    "\uffef\102\uffef\103\uffef\104\uffef\105\uffef\106\uffef\107\uffef" +
    "\110\uffef\111\uffef\001\002\000\052\005\uffd4\016\uffd4\022" +
    "\uffd4\023\uffd4\026\uffd4\031\uffd4\074\uffd4\075\uffd4\076\uffd4" +
    "\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4\104\uffd4\105" +
    "\uffd4\106\uffd4\107\uffd4\110\uffd4\111\uffd4\001\002\000\052" +
    "\005\uffe4\016\uffe4\022\uffe4\023\uffe4\026\uffe4\031\uffe4\074" +
    "\uffe4\075\uffe4\076\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4" +
    "\103\uffe4\104\uffe4\105\uffe4\106\uffe4\107\uffe4\110\uffe4\111" +
    "\uffe4\001\002\000\052\005\uffd6\016\uffd6\022\uffd6\023\uffd6" +
    "\026\uffd6\031\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6\100" +
    "\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6\105\uffd6\106\uffd6" +
    "\107\uffd6\110\uffd6\111\uffd6\001\002\000\052\005\uffde\016" +
    "\uffde\022\uffde\023\uffde\026\uffde\031\uffde\074\uffde\075\uffde" +
    "\076\uffde\077\uffde\100\uffde\101\uffde\102\uffde\103\uffde\104" +
    "\uffde\105\uffde\106\uffde\107\uffde\110\uffde\111\uffde\001\002" +
    "\000\052\005\uffcc\016\uffcc\022\uffcc\023\uffcc\026\uffcc\031" +
    "\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc" +
    "\102\uffcc\103\uffcc\104\uffcc\105\uffcc\106\uffcc\107\uffcc\110" +
    "\uffcc\111\uffcc\001\002\000\052\005\uffd2\016\uffd2\022\uffd2" +
    "\023\uffd2\026\uffd2\031\uffd2\074\uffd2\075\uffd2\076\uffd2\077" +
    "\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2" +
    "\106\uffd2\107\uffd2\110\uffd2\111\uffd2\001\002\000\052\005" +
    "\uffca\016\uffca\022\uffca\023\uffca\026\uffca\031\uffca\074\uffca" +
    "\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca\102\uffca\103" +
    "\uffca\104\uffca\105\uffca\106\uffca\107\uffca\110\uffca\111\uffca" +
    "\001\002\000\052\005\uffe8\016\uffe8\022\uffe8\023\uffe8\026" +
    "\uffe8\031\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\100\uffe8" +
    "\101\uffe8\102\uffe8\103\uffe8\104\uffe8\105\uffe8\106\uffe8\107" +
    "\uffe8\110\uffe8\111\uffe8\001\002\000\052\005\uffd8\016\uffd8" +
    "\022\uffd8\023\uffd8\026\uffd8\031\uffd8\074\uffd8\075\uffd8\076" +
    "\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\103\uffd8\104\uffd8" +
    "\105\uffd8\106\uffd8\107\uffd8\110\uffd8\111\uffd8\001\002\000" +
    "\052\005\uffda\016\uffda\022\uffda\023\uffda\026\uffda\031\uffda" +
    "\074\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda\102" +
    "\uffda\103\uffda\104\uffda\105\uffda\106\uffda\107\uffda\110\uffda" +
    "\111\uffda\001\002\000\052\005\uffe6\016\uffe6\022\uffe6\023" +
    "\uffe6\026\uffe6\031\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6" +
    "\100\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6\105\uffe6\106" +
    "\uffe6\107\uffe6\110\uffe6\111\uffe6\001\002\000\052\005\uffba" +
    "\016\uffba\022\uffba\023\uffba\026\uffba\031\uffba\074\uffba\075" +
    "\uffba\076\uffba\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba" +
    "\104\uffba\105\uffba\106\uffba\107\uffba\110\uffba\111\uffba\001" +
    "\002\000\052\005\uffea\016\uffea\022\uffea\023\uffea\026\uffea" +
    "\031\uffea\074\uffea\075\uffea\076\uffea\077\uffea\100\uffea\101" +
    "\uffea\102\uffea\103\uffea\104\uffea\105\uffea\106\uffea\107\uffea" +
    "\110\uffea\111\uffea\001\002\000\052\005\uffe0\016\uffe0\022" +
    "\uffe0\023\uffe0\026\uffe0\031\uffe0\074\uffe0\075\uffe0\076\uffe0" +
    "\077\uffe0\100\uffe0\101\uffe0\102\uffe0\103\uffe0\104\uffe0\105" +
    "\uffe0\106\uffe0\107\uffe0\110\uffe0\111\uffe0\001\002\000\052" +
    "\005\uffb8\016\uffb8\022\uffb8\023\uffb8\026\uffb8\031\uffb8\074" +
    "\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8" +
    "\103\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8\111" +
    "\uffb8\001\002\000\052\005\uffc8\016\uffc8\022\uffc8\023\uffc8" +
    "\026\uffc8\031\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100" +
    "\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8" +
    "\107\uffc8\110\uffc8\111\uffc8\001\002\000\052\005\uffec\016" +
    "\uffec\022\uffec\023\uffec\026\uffec\031\uffec\074\uffec\075\uffec" +
    "\076\uffec\077\uffec\100\uffec\101\uffec\102\uffec\103\uffec\104" +
    "\uffec\105\uffec\106\uffec\107\uffec\110\uffec\111\uffec\001\002" +
    "\000\052\005\uffd0\016\uffd0\022\uffd0\023\uffd0\026\uffd0\031" +
    "\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0" +
    "\102\uffd0\103\uffd0\104\uffd0\105\uffd0\106\uffd0\107\uffd0\110" +
    "\uffd0\111\uffd0\001\002\000\052\005\uffce\016\uffce\022\uffce" +
    "\023\uffce\026\uffce\031\uffce\074\uffce\075\uffce\076\uffce\077" +
    "\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce\105\uffce" +
    "\106\uffce\107\uffce\110\uffce\111\uffce\001\002\000\052\005" +
    "\uffed\016\uffed\022\uffed\023\uffed\026\uffed\031\uffed\074\uffed" +
    "\075\uffed\076\uffed\077\uffed\100\uffed\101\uffed\102\uffed\103" +
    "\uffed\104\uffed\105\uffed\106\uffed\107\uffed\110\uffed\111\uffed" +
    "\001\002\000\004\072\150\001\002\000\004\073\147\001" +
    "\002\000\004\026\ufff2\001\002\000\004\026\ufff3\001\002" +
    "\000\006\015\156\017\155\001\002\000\004\010\154\001" +
    "\002\000\052\005\ufff1\016\ufff1\022\ufff1\023\ufff1\026\ufff1" +
    "\031\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101" +
    "\ufff1\102\ufff1\103\ufff1\104\ufff1\105\ufff1\106\ufff1\107\ufff1" +
    "\110\ufff1\111\ufff1\001\002\000\004\026\ufffa\001\002\000" +
    "\004\072\160\001\002\000\004\073\157\001\002\000\004" +
    "\026\ufff6\001\002\000\004\026\ufff7\001\002\000\004\072" +
    "\165\001\002\000\006\010\164\073\163\001\002\000\004" +
    "\026\ufff4\001\002\000\004\026\ufff8\001\002\000\004\026" +
    "\ufff5\001\002\000\004\027\167\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\011\004\020\005\016\014\013\016" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\152\012\031\013" +
    "\045\015\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\047\012\031\013\045\015\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\143\012\031\013\045\015\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\117\012\031\013\045\015\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\106\012\031\013" +
    "\045\015\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    Ventana v=new Ventana();    

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CANT_PLURALES ::= QUINCE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("15"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CANT_PLURALES ::= CATORCE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("14"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CANT_PLURALES ::= TRECE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("13"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CANT_PLURALES ::= DOCE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("12"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CANT_PLURALES ::= ONCE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("11"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CANT_PLURALES ::= DIEZ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("10"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CANT_PLURALES ::= NUEVE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("9"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CANT_PLURALES ::= OCHO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("8"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CANT_PLURALES ::= SIETE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("7"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CANT_PLURALES ::= SEIS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("6"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CANT_PLURALES ::= CINCO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("5"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CANT_PLURALES ::= CUATRO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("4"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CANT_PLURALES ::= TRES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("3"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CANT_PLURALES ::= DOS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("2"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CANTIDAD_CORRECTO_A ::= CANT_PLURALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANTIDAD_CORRECTO_A",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CANTIDAD_CORRECTO_A ::= CANT_UNA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("1"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANTIDAD_CORRECTO_A",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CANTIDAD_CORRECTO_O ::= CANT_PLURALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANTIDAD_CORRECTO_O",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CANTIDAD_CORRECTO_O ::= CANT_UN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("1"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANTIDAD_CORRECTO_O",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PLATILLO ::= CANT_UNA VAMPIRO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una vampiro. \n Ejemplo: ' ...quiero 'un' vampiro'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PLATILLO ::= CANTIDAD_CORRECTO_O VAMPIRO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,27");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PLATILLO ::= CANT_UNA JUGO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una jugo. \n Ejemplo: ' ...quiero 'un' jugo'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PLATILLO ::= CANTIDAD_CORRECTO_O JUGO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,26");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PLATILLO ::= CANT_UN PIÑA_COLADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir un piña colada. \n Ejemplo: ' ...quiero 'una' piña colada'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PLATILLO ::= CANTIDAD_CORRECTO_A PIÑA_COLADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,25");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PLATILLO ::= CANT_UN VICTORIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir un victoria. \n Ejemplo: ' ...quiero 'una' victoria'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PLATILLO ::= CANTIDAD_CORRECTO_A VICTORIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,24");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PLATILLO ::= CANT_UN CORONA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir un corona. \n Ejemplo: ' ...quiero 'una' corona'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PLATILLO ::= CANTIDAD_CORRECTO_A CORONA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,23");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PLATILLO ::= CANT_UN COCA_COLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir un coca cola. \n Ejemplo: ' ...quiero 'una' coca cola'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PLATILLO ::= CANTIDAD_CORRECTO_A COCA_COLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,22");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PLATILLO ::= CANT_UN NARANJADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir un naranjada. \n Ejemplo: ' ...quiero 'una' naranjada'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PLATILLO ::= CANTIDAD_CORRECTO_A NARANJADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,21");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PLATILLO ::= CANT_UN LIMONADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir un limonada. \n Ejemplo: ' ...quiero 'una' limonada'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PLATILLO ::= CANTIDAD_CORRECTO_A LIMONADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,20");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PLATILLO ::= CANT_UNA MARTINI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una martini. \n Ejemplo: ' ...quiero 'un' martini'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PLATILLO ::= CANTIDAD_CORRECTO_O MARTINI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,19");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PLATILLO ::= CANT_UNA EXPRESSO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una expresso. \n Ejemplo: ' ...quiero 'un' expresso'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PLATILLO ::= CANTIDAD_CORRECTO_O EXPRESSO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,18");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PLATILLO ::= CANT_UNA CAFE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una cafe. \n Ejemplo: ' ...quiero 'un' cafe'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PLATILLO ::= CANTIDAD_CORRECTO_O CAFE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,17");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PLATILLO ::= CANT_UNA CHURROS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una churro. \n Ejemplo: ' ...quiero 'un' churro'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PLATILLO ::= CANTIDAD_CORRECTO_O CHURROS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,15");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PLATILLO ::= CANT_UNA PIE_QUESO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una pie de queso. \n Ejemplo: ' ...quiero 'un' pie de queso'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PLATILLO ::= CANTIDAD_CORRECTO_O PIE_QUESO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,14");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PLATILLO ::= CANT_UNA PIE_MORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una pie de mora. \n Ejemplo: ' ...quiero 'un' pie de mora'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PLATILLO ::= CANTIDAD_CORRECTO_O PIE_MORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,13");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PLATILLO ::= CANT_UNA PIE_FRESA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una pie de fresa. \n Ejemplo: ' ...quiero 'un' pie de fresa'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PLATILLO ::= CANTIDAD_CORRECTO_O PIE_FRESA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,12");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PLATILLO ::= CANT_UNA PIE_LIMON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una pie de limon. \n Ejemplo: ' ...quiero 'un' pie de limon'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PLATILLO ::= CANTIDAD_CORRECTO_O PIE_LIMON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,11");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PLATILLO ::= CANT_UNA HELADO_CACAO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una helado de cacao. \n Ejemplo: ' ...quiero 'un' helado de cacao'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PLATILLO ::= CANTIDAD_CORRECTO_O HELADO_CACAO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,10");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PLATILLO ::= CANT_UNA FONDANT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una fondant. \n Ejemplo: ' ...quiero 'un' fondant'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PLATILLO ::= CANTIDAD_CORRECTO_O FONDANT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,9");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PLATILLO ::= CANT_UN FRUTA_CARAMELO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir un fruta en caramelo. \n Ejemplo: ' ...quiero 'una' fruta en caramelo'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PLATILLO ::= CANTIDAD_CORRECTO_A FRUTA_CARAMELO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,8");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PLATILLO ::= CANT_UNA HELADO_VAINILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una helado de vainilla. \n Ejemplo: ' ...quiero 'un' helado de vainilla'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PLATILLO ::= CANTIDAD_CORRECTO_O HELADO_VAINILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,7");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PLATILLO ::= CANT_UNA TERIYAKI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una teriyaki. \n Ejemplo: ' ...quiero 'un' teriyaki'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PLATILLO ::= CANTIDAD_CORRECTO_O TERIYAKI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,6");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PLATILLO ::= CANT_UN HAMBURGUESA_ARROZ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir un hamburguesa de arroz. \n Ejemplo: ' ...quiero 'una' hamburguesa de arroz'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PLATILLO ::= CANTIDAD_CORRECTO_A HAMBURGUESA_ARROZ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,5");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PLATILLO ::= CANT_UNA BOMBAZO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una bombazo. \n Ejemplo: ' ...quiero 'un' bombazo'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PLATILLO ::= CANTIDAD_CORRECTO_O BOMBAZO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,4");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PLATILLO ::= CANT_UNA CAMARONITO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una camaronito. \n Ejemplo: ' ...quiero 'un' camaronito'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PLATILLO ::= CANTIDAD_CORRECTO_O CAMARONITO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,3");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PLATILLO ::= CANT_UNA SUSHI_RES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una sushi de res. \n Ejemplo: ' ...quiero 'un' sushi de res'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PLATILLO ::= CANTIDAD_CORRECTO_O SUSHI_RES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,2");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PLATILLO ::= CANT_UNA SUSHI_POLLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una sushi de pollo. \n Ejemplo: ' ...quiero 'un' sushi de pollo'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PLATILLO ::= CANTIDAD_CORRECTO_O SUSHI_POLLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,1");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PLATILLO ::= CANT_UNA SUSHI_CAMARON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    /*Errores platillo 0*/
                        v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una sushi de camaron. \n Ejemplo: ' ...quiero 'un' sushi de camaron'\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PLATILLO ::= CANTIDAD_CORRECTO_O SUSHI_CAMARON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,0");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO Y PLATILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO PLATILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO Coma PLATILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO QUIERO PLATILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT_HACER_PEDIDO ::= QUIERO PLATILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT_DICTAR_MENU ::= LEER LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENT_DICTAR_MENU ::= LEER EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENT_MOSTRAR_MENU ::= MOSTRAR LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENT_MOSTRAR_MENU ::= MOSTRAR EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENT_MOSTRAR_MENU ::= QUIERO VER LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENT_MOSTRAR_MENU ::= QUIERO VER EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENT_DAR_CUENTA ::= MOSTRAR LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,cuenta,mesa, ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENT_DAR_CUENTA ::= TRAER LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,cuenta,mesa, ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENT_DAR_CUENTA ::= QUIERO LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,cuenta,mesa, ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAS ::= SENT_DICTAR_MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(3);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= SENT_DAR_CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(2);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIAS ::= SENT_MOSTRAR_MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(1);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= SENT_HACER_PEDIDO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(0);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= LISTO SANJI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.statusMarvin=false; v.peticionesMarvin.remove(v.peticionesMarvin.size()-1);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= OYE SANJI SENTENCIAS POR FAVOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

