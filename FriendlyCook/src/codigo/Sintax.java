
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 07 22:34:46 MST 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 07 22:34:46 MST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\250\000\002\002\004\000\002\002\007\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\006" +
    "\000\002\002\006\000\002\002\005\000\002\002\004\000" +
    "\002\002\003\000\002\002\003\000\002\002\006\000\002" +
    "\002\006\000\002\002\005\000\002\002\007\000\002\002" +
    "\006\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\004\000\002\022\003\000\002\022\003\000\002\023" +
    "\005\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\003\000\002\005\006\000\002\005" +
    "\006\000\002\005\005\000\002\005\005\000\002\006\005" +
    "\000\002\006\004\000\002\006\004\000\002\006\005\000" +
    "\002\006\005\000\002\006\004\000\002\006\004\000\002" +
    "\017\005\000\002\017\005\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\004\004" +
    "\000\002\004\005\000\002\004\005\000\002\004\004\000" +
    "\002\004\005\000\002\004\004\000\002\004\005\000\002" +
    "\004\005\000\002\004\004\000\002\004\005\000\002\027" +
    "\003\000\002\027\003\000\002\026\004\000\002\026\004" +
    "\000\002\026\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\004\000\002\026" +
    "\004\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\026\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\026\004\023\005\013\006\006\007\022\010" +
    "\024\013\017\014\020\051\011\077\012\101\015\001\002" +
    "\000\004\031\313\001\002\000\010\002\uffe9\031\uffe9\032" +
    "\uffe9\001\002\000\022\002\ufff8\004\256\005\013\007\022" +
    "\010\024\014\020\077\012\101\015\001\002\000\010\002" +
    "\uffea\031\uffea\032\uffea\001\002\000\004\002\254\001\002" +
    "\000\004\004\253\001\002\000\006\014\247\016\246\001" +
    "\002\000\134\014\236\021\065\022\113\037\130\044\060" +
    "\045\101\046\120\047\062\050\106\052\121\053\056\054" +
    "\125\055\100\056\107\057\114\060\051\061\116\062\104" +
    "\063\075\064\064\065\052\066\122\067\112\070\067\071" +
    "\127\072\061\073\102\074\077\075\066\076\111\100\240" +
    "\104\076\105\105\106\110\107\126\110\073\111\055\112" +
    "\071\113\115\114\132\115\117\116\057\117\053\120\047" +
    "\121\123\001\002\000\010\002\uffeb\031\uffeb\032\uffeb\001" +
    "\002\000\012\014\232\016\231\102\227\103\230\001\002" +
    "\000\144\002\uffed\005\131\015\050\021\065\022\113\031" +
    "\uffed\032\uffed\034\046\037\130\044\060\045\101\046\120" +
    "\047\062\050\106\052\121\053\056\054\125\055\100\056" +
    "\107\057\114\060\051\061\116\062\104\063\075\064\064" +
    "\065\052\066\122\067\112\070\067\071\127\072\061\073" +
    "\102\074\077\075\066\076\111\104\076\105\105\106\110" +
    "\107\126\110\073\111\055\112\071\113\115\114\132\115" +
    "\117\116\057\117\053\120\047\121\123\001\002\000\014" +
    "\004\045\040\044\041\043\042\042\043\041\001\002\000" +
    "\004\010\037\001\002\000\010\002\uffec\031\uffec\032\uffec" +
    "\001\002\000\014\014\034\024\033\025\031\026\035\027" +
    "\032\001\002\000\020\002\ufff7\005\013\007\022\010\024" +
    "\014\020\077\012\101\015\001\002\000\010\002\uffda\031" +
    "\uffda\032\uffda\001\002\000\004\031\026\001\002\000\004" +
    "\032\027\001\002\000\004\002\ufff6\001\002\000\010\002" +
    "\uffe8\031\uffe8\032\uffe8\001\002\000\010\002\uffe2\031\uffe2" +
    "\032\uffe2\001\002\000\010\002\uffe3\031\uffe3\032\uffe3\001" +
    "\002\000\010\002\uffe4\031\uffe4\032\uffe4\001\002\000\012" +
    "\002\uffdd\010\036\031\uffdd\032\uffdd\001\002\000\010\002" +
    "\uffe1\031\uffe1\032\uffe1\001\002\000\010\002\uffdf\031\uffdf" +
    "\032\uffdf\001\002\000\010\002\uffdb\031\uffdb\032\uffdb\001" +
    "\002\000\004\002\ufffe\001\002\000\004\002\uffee\001\002" +
    "\000\004\002\uffef\001\002\000\004\002\ufff0\001\002\000" +
    "\004\002\ufff1\001\002\000\004\002\uffff\001\002\000\130" +
    "\021\065\022\113\037\130\044\060\045\101\046\120\047" +
    "\062\050\106\052\121\053\056\054\125\055\100\056\107" +
    "\057\114\060\051\061\116\062\104\063\075\064\064\065" +
    "\052\066\122\067\112\070\067\071\127\072\061\073\102" +
    "\074\077\075\066\076\111\104\076\105\105\106\110\107" +
    "\126\110\073\111\055\112\071\113\115\114\132\115\117" +
    "\116\057\117\053\120\047\121\123\001\002\000\070\037" +
    "\uff5b\044\uff5b\045\uff5b\046\uff5b\047\uff5b\050\uff5b\052\uff5b" +
    "\053\uff5b\054\uff5b\055\uff5b\056\uff5b\057\uff5b\060\uff5b\061" +
    "\uff5b\062\uff5b\063\uff5b\064\uff5b\065\uff5b\066\uff5b\067\uff5b" +
    "\070\uff5b\071\uff5b\072\uff5b\073\uff5b\074\uff5b\075\uff5b\076" +
    "\uff5b\001\002\000\130\021\065\022\113\037\130\044\060" +
    "\045\101\046\120\047\062\050\106\052\121\053\056\054" +
    "\125\055\100\056\107\057\114\060\051\061\116\062\104" +
    "\063\075\064\064\065\052\066\122\067\112\070\067\071" +
    "\127\072\061\073\102\074\077\075\066\076\111\104\076" +
    "\105\105\106\110\107\126\110\073\111\055\112\071\113" +
    "\115\114\132\115\117\116\057\117\053\120\047\121\123" +
    "\001\002\000\144\002\uff79\005\uff79\015\uff79\021\uff79\022" +
    "\uff79\031\uff79\032\uff79\034\uff79\037\uff79\044\uff79\045\uff79" +
    "\046\uff79\047\uff79\050\uff79\052\uff79\053\uff79\054\uff79\055" +
    "\uff79\056\uff79\057\uff79\060\uff79\061\uff79\062\uff79\063\uff79" +
    "\064\uff79\065\uff79\066\uff79\067\uff79\070\uff79\071\uff79\072" +
    "\uff79\073\uff79\074\uff79\075\uff79\076\uff79\104\uff79\105\uff79" +
    "\106\uff79\107\uff79\110\uff79\111\uff79\112\uff79\113\uff79\114" +
    "\uff79\115\uff79\116\uff79\117\uff79\120\uff79\121\uff79\001\002" +
    "\000\144\002\uff74\005\uff74\015\uff74\021\uff74\022\uff74\031" +
    "\uff74\032\uff74\034\uff74\037\uff74\044\uff74\045\uff74\046\uff74" +
    "\047\uff74\050\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056" +
    "\uff74\057\uff74\060\uff74\061\uff74\062\uff74\063\uff74\064\uff74" +
    "\065\uff74\066\uff74\067\uff74\070\uff74\071\uff74\072\uff74\073" +
    "\uff74\074\uff74\075\uff74\076\uff74\104\uff74\105\uff74\106\uff74" +
    "\107\uff74\110\uff74\111\uff74\112\uff74\113\uff74\114\uff74\115" +
    "\uff74\116\uff74\117\uff74\120\uff74\121\uff74\001\002\000\070" +
    "\037\uff5c\044\uff5c\045\uff5c\046\uff5c\047\uff5c\050\uff5c\052" +
    "\uff5c\053\uff5c\054\uff5c\055\uff5c\056\uff5c\057\uff5c\060\uff5c" +
    "\061\uff5c\062\uff5c\063\uff5c\064\uff5c\065\uff5c\066\uff5c\067" +
    "\uff5c\070\uff5c\071\uff5c\072\uff5c\073\uff5c\074\uff5c\075\uff5c" +
    "\076\uff5c\001\002\000\144\002\uffbe\005\uffbe\015\uffbe\021" +
    "\uffbe\022\uffbe\031\uffbe\032\uffbe\034\uffbe\037\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071" +
    "\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\104\uffbe" +
    "\105\uffbe\106\uffbe\107\uffbe\110\uffbe\111\uffbe\112\uffbe\113" +
    "\uffbe\114\uffbe\115\uffbe\116\uffbe\117\uffbe\120\uffbe\121\uffbe" +
    "\001\002\000\070\037\uff62\044\uff62\045\uff62\046\uff62\047" +
    "\uff62\050\uff62\052\uff62\053\uff62\054\uff62\055\uff62\056\uff62" +
    "\057\uff62\060\uff62\061\uff62\062\uff62\063\uff62\064\uff62\065" +
    "\uff62\066\uff62\067\uff62\070\uff62\071\uff62\072\uff62\073\uff62" +
    "\074\uff62\075\uff62\076\uff62\001\002\000\144\002\uff7f\005" +
    "\uff7f\015\uff7f\021\uff7f\022\uff7f\031\uff7f\032\uff7f\034\uff7f" +
    "\037\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\052" +
    "\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f" +
    "\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f\066\uff7f\067" +
    "\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f\075\uff7f" +
    "\076\uff7f\104\uff7f\105\uff7f\106\uff7f\107\uff7f\110\uff7f\111" +
    "\uff7f\112\uff7f\113\uff7f\114\uff7f\115\uff7f\116\uff7f\117\uff7f" +
    "\120\uff7f\121\uff7f\001\002\000\070\037\uff5d\044\uff5d\045" +
    "\uff5d\046\uff5d\047\uff5d\050\uff5d\052\uff5d\053\uff5d\054\uff5d" +
    "\055\uff5d\056\uff5d\057\uff5d\060\uff5d\061\uff5d\062\uff5d\063" +
    "\uff5d\064\uff5d\065\uff5d\066\uff5d\067\uff5d\070\uff5d\071\uff5d" +
    "\072\uff5d\073\uff5d\074\uff5d\075\uff5d\076\uff5d\001\002\000" +
    "\144\002\uff85\005\uff85\015\uff85\021\uff85\022\uff85\031\uff85" +
    "\032\uff85\034\uff85\037\uff85\044\uff85\045\uff85\046\uff85\047" +
    "\uff85\050\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85" +
    "\057\uff85\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85\065" +
    "\uff85\066\uff85\067\uff85\070\uff85\071\uff85\072\uff85\073\uff85" +
    "\074\uff85\075\uff85\076\uff85\104\uff85\105\uff85\106\uff85\107" +
    "\uff85\110\uff85\111\uff85\112\uff85\113\uff85\114\uff85\115\uff85" +
    "\116\uff85\117\uff85\120\uff85\121\uff85\001\002\000\144\002" +
    "\uff6e\005\uff6e\015\uff6e\021\uff6e\022\uff6e\031\uff6e\032\uff6e" +
    "\034\uff6e\037\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050" +
    "\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e" +
    "\060\uff6e\061\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e\066" +
    "\uff6e\067\uff6e\070\uff6e\071\uff6e\072\uff6e\073\uff6e\074\uff6e" +
    "\075\uff6e\076\uff6e\104\uff6e\105\uff6e\106\uff6e\107\uff6e\110" +
    "\uff6e\111\uff6e\112\uff6e\113\uff6e\114\uff6e\115\uff6e\116\uff6e" +
    "\117\uff6e\120\uff6e\121\uff6e\001\002\000\144\002\uff82\005" +
    "\uff82\015\uff82\021\uff82\022\uff82\031\uff82\032\uff82\034\uff82" +
    "\037\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82\052" +
    "\uff82\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82\060\uff82" +
    "\061\uff82\062\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067" +
    "\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82" +
    "\076\uff82\104\uff82\105\uff82\106\uff82\107\uff82\110\uff82\111" +
    "\uff82\112\uff82\113\uff82\114\uff82\115\uff82\116\uff82\117\uff82" +
    "\120\uff82\121\uff82\001\002\000\050\037\220\044\214\045" +
    "\207\046\212\047\201\052\215\053\203\055\210\056\202" +
    "\057\200\060\205\061\221\062\222\063\204\064\206\065" +
    "\217\073\213\074\216\076\211\001\002\000\144\002\uff75" +
    "\005\uff75\015\uff75\021\uff75\022\uff75\031\uff75\032\uff75\034" +
    "\uff75\037\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75" +
    "\052\uff75\053\uff75\054\uff75\055\uff75\056\uff75\057\uff75\060" +
    "\uff75\061\uff75\062\uff75\063\uff75\064\uff75\065\uff75\066\uff75" +
    "\067\uff75\070\uff75\071\uff75\072\uff75\073\uff75\074\uff75\075" +
    "\uff75\076\uff75\104\uff75\105\uff75\106\uff75\107\uff75\110\uff75" +
    "\111\uff75\112\uff75\113\uff75\114\uff75\115\uff75\116\uff75\117" +
    "\uff75\120\uff75\121\uff75\001\002\000\070\037\uff6b\044\uff6b" +
    "\045\uff6b\046\uff6b\047\uff6b\050\177\052\uff6b\053\uff6b\054" +
    "\173\055\uff6b\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b" +
    "\063\uff6b\064\uff6b\065\uff6b\066\175\067\172\070\171\071" +
    "\174\072\176\073\uff6b\074\uff6b\075\170\076\uff6b\001\002" +
    "\000\144\002\uff70\005\uff70\015\uff70\021\uff70\022\uff70\031" +
    "\uff70\032\uff70\034\uff70\037\uff70\044\uff70\045\uff70\046\uff70" +
    "\047\uff70\050\uff70\052\uff70\053\uff70\054\uff70\055\uff70\056" +
    "\uff70\057\uff70\060\uff70\061\uff70\062\uff70\063\uff70\064\uff70" +
    "\065\uff70\066\uff70\067\uff70\070\uff70\071\uff70\072\uff70\073" +
    "\uff70\074\uff70\075\uff70\076\uff70\104\uff70\105\uff70\106\uff70" +
    "\107\uff70\110\uff70\111\uff70\112\uff70\113\uff70\114\uff70\115" +
    "\uff70\116\uff70\117\uff70\120\uff70\121\uff70\001\002\000\144" +
    "\002\uff71\005\uff71\015\uff71\021\uff71\022\uff71\031\uff71\032" +
    "\uff71\034\uff71\037\uff71\044\uff71\045\uff71\046\uff71\047\uff71" +
    "\050\uff71\052\uff71\053\uff71\054\uff71\055\uff71\056\uff71\057" +
    "\uff71\060\uff71\061\uff71\062\uff71\063\uff71\064\uff71\065\uff71" +
    "\066\uff71\067\uff71\070\uff71\071\uff71\072\uff71\073\uff71\074" +
    "\uff71\075\uff71\076\uff71\104\uff71\105\uff71\106\uff71\107\uff71" +
    "\110\uff71\111\uff71\112\uff71\113\uff71\114\uff71\115\uff71\116" +
    "\uff71\117\uff71\120\uff71\121\uff71\001\002\000\070\037\uff6a" +
    "\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff68\052\uff6a\053" +
    "\uff6a\054\uff68\055\uff6a\056\uff6a\057\uff6a\060\uff6a\061\uff6a" +
    "\062\uff6a\063\uff6a\064\uff6a\065\uff6a\066\uff68\067\uff68\070" +
    "\uff68\071\uff68\072\uff68\073\uff6a\074\uff6a\075\uff68\076\uff6a" +
    "\001\002\000\070\037\uff61\044\uff61\045\uff61\046\uff61\047" +
    "\uff61\050\uff61\052\uff61\053\uff61\054\uff61\055\uff61\056\uff61" +
    "\057\uff61\060\uff61\061\uff61\062\uff61\063\uff61\064\uff61\065" +
    "\uff61\066\uff61\067\uff61\070\uff61\071\uff61\072\uff61\073\uff61" +
    "\074\uff61\075\uff61\076\uff61\001\002\000\022\050\167\054" +
    "\163\066\165\067\161\070\162\071\164\072\166\075\160" +
    "\001\002\000\070\037\uff63\044\uff63\045\uff63\046\uff63\047" +
    "\uff63\050\uff63\052\uff63\053\uff63\054\uff63\055\uff63\056\uff63" +
    "\057\uff63\060\uff63\061\uff63\062\uff63\063\uff63\064\uff63\065" +
    "\uff63\066\uff63\067\uff63\070\uff63\071\uff63\072\uff63\073\uff63" +
    "\074\uff63\075\uff63\076\uff63\001\002\000\144\002\uffc0\005" +
    "\uffc0\015\uffc0\021\uffc0\022\uffc0\031\uffc0\032\uffc0\034\uffc0" +
    "\037\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067" +
    "\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0" +
    "\076\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0\111" +
    "\uffc0\112\uffc0\113\uffc0\114\uffc0\115\uffc0\116\uffc0\117\uffc0" +
    "\120\uffc0\121\uffc0\001\002\000\144\002\uff76\005\uff76\015" +
    "\uff76\021\uff76\022\uff76\031\uff76\032\uff76\034\uff76\037\uff76" +
    "\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\052\uff76\053" +
    "\uff76\054\uff76\055\uff76\056\uff76\057\uff76\060\uff76\061\uff76" +
    "\062\uff76\063\uff76\064\uff76\065\uff76\066\uff76\067\uff76\070" +
    "\uff76\071\uff76\072\uff76\073\uff76\074\uff76\075\uff76\076\uff76" +
    "\104\uff76\105\uff76\106\uff76\107\uff76\110\uff76\111\uff76\112" +
    "\uff76\113\uff76\114\uff76\115\uff76\116\uff76\117\uff76\120\uff76" +
    "\121\uff76\001\002\000\070\037\uff67\044\uff67\045\uff67\046" +
    "\uff67\047\uff67\050\uff67\052\uff67\053\uff67\054\uff67\055\uff67" +
    "\056\uff67\057\uff67\060\uff67\061\uff67\062\uff67\063\uff67\064" +
    "\uff67\065\uff67\066\uff67\067\uff67\070\uff67\071\uff67\072\uff67" +
    "\073\uff67\074\uff67\075\uff67\076\uff67\001\002\000\144\002" +
    "\uff6c\005\uff6c\015\uff6c\021\uff6c\022\uff6c\031\uff6c\032\uff6c" +
    "\034\uff6c\037\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050" +
    "\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c" +
    "\060\uff6c\061\uff6c\062\uff6c\063\uff6c\064\uff6c\065\uff6c\066" +
    "\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c\073\uff6c\074\uff6c" +
    "\075\uff6c\076\uff6c\104\uff6c\105\uff6c\106\uff6c\107\uff6c\110" +
    "\uff6c\111\uff6c\112\uff6c\113\uff6c\114\uff6c\115\uff6c\116\uff6c" +
    "\117\uff6c\120\uff6c\121\uff6c\001\002\000\144\002\uff7c\005" +
    "\uff7c\015\uff7c\021\uff7c\022\uff7c\031\uff7c\032\uff7c\034\uff7c" +
    "\037\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\052" +
    "\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c\060\uff7c" +
    "\061\uff7c\062\uff7c\063\uff7c\064\uff7c\065\uff7c\066\uff7c\067" +
    "\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c\075\uff7c" +
    "\076\uff7c\104\uff7c\105\uff7c\106\uff7c\107\uff7c\110\uff7c\111" +
    "\uff7c\112\uff7c\113\uff7c\114\uff7c\115\uff7c\116\uff7c\117\uff7c" +
    "\120\uff7c\121\uff7c\001\002\000\144\002\uff84\005\uff84\015" +
    "\uff84\021\uff84\022\uff84\031\uff84\032\uff84\034\uff84\037\uff84" +
    "\044\uff84\045\uff84\046\uff84\047\uff84\050\uff84\052\uff84\053" +
    "\uff84\054\uff84\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84" +
    "\062\uff84\063\uff84\064\uff84\065\uff84\066\uff84\067\uff84\070" +
    "\uff84\071\uff84\072\uff84\073\uff84\074\uff84\075\uff84\076\uff84" +
    "\104\uff84\105\uff84\106\uff84\107\uff84\110\uff84\111\uff84\112" +
    "\uff84\113\uff84\114\uff84\115\uff84\116\uff84\117\uff84\120\uff84" +
    "\121\uff84\001\002\000\144\002\uff6d\005\uff6d\015\uff6d\021" +
    "\uff6d\022\uff6d\031\uff6d\032\uff6d\034\uff6d\037\uff6d\044\uff6d" +
    "\045\uff6d\046\uff6d\047\uff6d\050\uff6d\052\uff6d\053\uff6d\054" +
    "\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d" +
    "\063\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d\070\uff6d\071" +
    "\uff6d\072\uff6d\073\uff6d\074\uff6d\075\uff6d\076\uff6d\104\uff6d" +
    "\105\uff6d\106\uff6d\107\uff6d\110\uff6d\111\uff6d\112\uff6d\113" +
    "\uff6d\114\uff6d\115\uff6d\116\uff6d\117\uff6d\120\uff6d\121\uff6d" +
    "\001\002\000\144\002\uffc5\005\uffc5\015\uffc5\021\uffc5\022" +
    "\uffc5\031\uffc5\032\uffc5\034\uffc5\037\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\052\uffc5\053\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072" +
    "\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\104\uffc5\105\uffc5" +
    "\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5\114" +
    "\uffc5\115\uffc5\116\uffc5\117\uffc5\120\uffc5\121\uffc5\001\002" +
    "\000\144\002\uff77\005\uff77\015\uff77\021\uff77\022\uff77\031" +
    "\uff77\032\uff77\034\uff77\037\uff77\044\uff77\045\uff77\046\uff77" +
    "\047\uff77\050\uff77\052\uff77\053\uff77\054\uff77\055\uff77\056" +
    "\uff77\057\uff77\060\uff77\061\uff77\062\uff77\063\uff77\064\uff77" +
    "\065\uff77\066\uff77\067\uff77\070\uff77\071\uff77\072\uff77\073" +
    "\uff77\074\uff77\075\uff77\076\uff77\104\uff77\105\uff77\106\uff77" +
    "\107\uff77\110\uff77\111\uff77\112\uff77\113\uff77\114\uff77\115" +
    "\uff77\116\uff77\117\uff77\120\uff77\121\uff77\001\002\000\070" +
    "\037\uff66\044\uff66\045\uff66\046\uff66\047\uff66\050\uff66\052" +
    "\uff66\053\uff66\054\uff66\055\uff66\056\uff66\057\uff66\060\uff66" +
    "\061\uff66\062\uff66\063\uff66\064\uff66\065\uff66\066\uff66\067" +
    "\uff66\070\uff66\071\uff66\072\uff66\073\uff66\074\uff66\075\uff66" +
    "\076\uff66\001\002\000\144\002\uff81\005\uff81\015\uff81\021" +
    "\uff81\022\uff81\031\uff81\032\uff81\034\uff81\037\uff81\044\uff81" +
    "\045\uff81\046\uff81\047\uff81\050\uff81\052\uff81\053\uff81\054" +
    "\uff81\055\uff81\056\uff81\057\uff81\060\uff81\061\uff81\062\uff81" +
    "\063\uff81\064\uff81\065\uff81\066\uff81\067\uff81\070\uff81\071" +
    "\uff81\072\uff81\073\uff81\074\uff81\075\uff81\076\uff81\104\uff81" +
    "\105\uff81\106\uff81\107\uff81\110\uff81\111\uff81\112\uff81\113" +
    "\uff81\114\uff81\115\uff81\116\uff81\117\uff81\120\uff81\121\uff81" +
    "\001\002\000\144\002\uff7b\005\uff7b\015\uff7b\021\uff7b\022" +
    "\uff7b\031\uff7b\032\uff7b\034\uff7b\037\uff7b\044\uff7b\045\uff7b" +
    "\046\uff7b\047\uff7b\050\uff7b\052\uff7b\053\uff7b\054\uff7b\055" +
    "\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\063\uff7b" +
    "\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b\072" +
    "\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b\104\uff7b\105\uff7b" +
    "\106\uff7b\107\uff7b\110\uff7b\111\uff7b\112\uff7b\113\uff7b\114" +
    "\uff7b\115\uff7b\116\uff7b\117\uff7b\120\uff7b\121\uff7b\001\002" +
    "\000\070\037\uff65\044\uff65\045\uff65\046\uff65\047\uff65\050" +
    "\uff65\052\uff65\053\uff65\054\uff65\055\uff65\056\uff65\057\uff65" +
    "\060\uff65\061\uff65\062\uff65\063\uff65\064\uff65\065\uff65\066" +
    "\uff65\067\uff65\070\uff65\071\uff65\072\uff65\073\uff65\074\uff65" +
    "\075\uff65\076\uff65\001\002\000\144\002\uff7d\005\uff7d\015" +
    "\uff7d\021\uff7d\022\uff7d\031\uff7d\032\uff7d\034\uff7d\037\uff7d" +
    "\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\052\uff7d\053" +
    "\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\061\uff7d" +
    "\062\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d\070" +
    "\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\075\uff7d\076\uff7d" +
    "\104\uff7d\105\uff7d\106\uff7d\107\uff7d\110\uff7d\111\uff7d\112" +
    "\uff7d\113\uff7d\114\uff7d\115\uff7d\116\uff7d\117\uff7d\120\uff7d" +
    "\121\uff7d\001\002\000\144\002\uff72\005\uff72\015\uff72\021" +
    "\uff72\022\uff72\031\uff72\032\uff72\034\uff72\037\uff72\044\uff72" +
    "\045\uff72\046\uff72\047\uff72\050\uff72\052\uff72\053\uff72\054" +
    "\uff72\055\uff72\056\uff72\057\uff72\060\uff72\061\uff72\062\uff72" +
    "\063\uff72\064\uff72\065\uff72\066\uff72\067\uff72\070\uff72\071" +
    "\uff72\072\uff72\073\uff72\074\uff72\075\uff72\076\uff72\104\uff72" +
    "\105\uff72\106\uff72\107\uff72\110\uff72\111\uff72\112\uff72\113" +
    "\uff72\114\uff72\115\uff72\116\uff72\117\uff72\120\uff72\121\uff72" +
    "\001\002\000\070\037\155\044\151\045\144\046\147\047" +
    "\136\050\uff69\052\152\053\140\054\uff69\055\145\056\137" +
    "\057\135\060\143\061\156\062\157\063\141\064\142\065" +
    "\154\066\uff69\067\uff69\070\uff69\071\uff69\072\uff69\073\150" +
    "\074\153\075\uff69\076\146\001\002\000\144\002\uff7a\005" +
    "\uff7a\015\uff7a\021\uff7a\022\uff7a\031\uff7a\032\uff7a\034\uff7a" +
    "\037\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\052" +
    "\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a" +
    "\061\uff7a\062\uff7a\063\uff7a\064\uff7a\065\uff7a\066\uff7a\067" +
    "\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a\074\uff7a\075\uff7a" +
    "\076\uff7a\104\uff7a\105\uff7a\106\uff7a\107\uff7a\110\uff7a\111" +
    "\uff7a\112\uff7a\113\uff7a\114\uff7a\115\uff7a\116\uff7a\117\uff7a" +
    "\120\uff7a\121\uff7a\001\002\000\070\037\uff60\044\uff60\045" +
    "\uff60\046\uff60\047\uff60\050\uff60\052\uff60\053\uff60\054\uff60" +
    "\055\uff60\056\uff60\057\uff60\060\uff60\061\uff60\062\uff60\063" +
    "\uff60\064\uff60\065\uff60\066\uff60\067\uff60\070\uff60\071\uff60" +
    "\072\uff60\073\uff60\074\uff60\075\uff60\076\uff60\001\002\000" +
    "\144\002\uff78\005\uff78\015\uff78\021\uff78\022\uff78\031\uff78" +
    "\032\uff78\034\uff78\037\uff78\044\uff78\045\uff78\046\uff78\047" +
    "\uff78\050\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78" +
    "\057\uff78\060\uff78\061\uff78\062\uff78\063\uff78\064\uff78\065" +
    "\uff78\066\uff78\067\uff78\070\uff78\071\uff78\072\uff78\073\uff78" +
    "\074\uff78\075\uff78\076\uff78\104\uff78\105\uff78\106\uff78\107" +
    "\uff78\110\uff78\111\uff78\112\uff78\113\uff78\114\uff78\115\uff78" +
    "\116\uff78\117\uff78\120\uff78\121\uff78\001\002\000\070\037" +
    "\uff5e\044\uff5e\045\uff5e\046\uff5e\047\uff5e\050\uff5e\052\uff5e" +
    "\053\uff5e\054\uff5e\055\uff5e\056\uff5e\057\uff5e\060\uff5e\061" +
    "\uff5e\062\uff5e\063\uff5e\064\uff5e\065\uff5e\066\uff5e\067\uff5e" +
    "\070\uff5e\071\uff5e\072\uff5e\073\uff5e\074\uff5e\075\uff5e\076" +
    "\uff5e\001\002\000\144\002\uff83\005\uff83\015\uff83\021\uff83" +
    "\022\uff83\031\uff83\032\uff83\034\uff83\037\uff83\044\uff83\045" +
    "\uff83\046\uff83\047\uff83\050\uff83\052\uff83\053\uff83\054\uff83" +
    "\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063" +
    "\uff83\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071\uff83" +
    "\072\uff83\073\uff83\074\uff83\075\uff83\076\uff83\104\uff83\105" +
    "\uff83\106\uff83\107\uff83\110\uff83\111\uff83\112\uff83\113\uff83" +
    "\114\uff83\115\uff83\116\uff83\117\uff83\120\uff83\121\uff83\001" +
    "\002\000\144\002\uff80\005\uff80\015\uff80\021\uff80\022\uff80" +
    "\031\uff80\032\uff80\034\uff80\037\uff80\044\uff80\045\uff80\046" +
    "\uff80\047\uff80\050\uff80\052\uff80\053\uff80\054\uff80\055\uff80" +
    "\056\uff80\057\uff80\060\uff80\061\uff80\062\uff80\063\uff80\064" +
    "\uff80\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80\072\uff80" +
    "\073\uff80\074\uff80\075\uff80\076\uff80\104\uff80\105\uff80\106" +
    "\uff80\107\uff80\110\uff80\111\uff80\112\uff80\113\uff80\114\uff80" +
    "\115\uff80\116\uff80\117\uff80\120\uff80\121\uff80\001\002\000" +
    "\144\002\uff73\005\uff73\015\uff73\021\uff73\022\uff73\031\uff73" +
    "\032\uff73\034\uff73\037\uff73\044\uff73\045\uff73\046\uff73\047" +
    "\uff73\050\uff73\052\uff73\053\uff73\054\uff73\055\uff73\056\uff73" +
    "\057\uff73\060\uff73\061\uff73\062\uff73\063\uff73\064\uff73\065" +
    "\uff73\066\uff73\067\uff73\070\uff73\071\uff73\072\uff73\073\uff73" +
    "\074\uff73\075\uff73\076\uff73\104\uff73\105\uff73\106\uff73\107" +
    "\uff73\110\uff73\111\uff73\112\uff73\113\uff73\114\uff73\115\uff73" +
    "\116\uff73\117\uff73\120\uff73\121\uff73\001\002\000\070\037" +
    "\uff5a\044\uff5a\045\uff5a\046\uff5a\047\uff5a\050\uff5a\052\uff5a" +
    "\053\uff5a\054\uff5a\055\uff5a\056\uff5a\057\uff5a\060\uff5a\061" +
    "\uff5a\062\uff5a\063\uff5a\064\uff5a\065\uff5a\066\uff5a\067\uff5a" +
    "\070\uff5a\071\uff5a\072\uff5a\073\uff5a\074\uff5a\075\uff5a\076" +
    "\uff5a\001\002\000\144\002\uffbd\005\uffbd\015\uffbd\021\uffbd" +
    "\022\uffbd\031\uffbd\032\uffbd\034\uffbd\037\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\047\uffbd\050\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd" +
    "\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\104\uffbd\105" +
    "\uffbd\106\uffbd\107\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd" +
    "\114\uffbd\115\uffbd\116\uffbd\117\uffbd\120\uffbd\121\uffbd\001" +
    "\002\000\144\002\uff7e\005\uff7e\015\uff7e\021\uff7e\022\uff7e" +
    "\031\uff7e\032\uff7e\034\uff7e\037\uff7e\044\uff7e\045\uff7e\046" +
    "\uff7e\047\uff7e\050\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e" +
    "\056\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e\064" +
    "\uff7e\065\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e" +
    "\073\uff7e\074\uff7e\075\uff7e\076\uff7e\104\uff7e\105\uff7e\106" +
    "\uff7e\107\uff7e\110\uff7e\111\uff7e\112\uff7e\113\uff7e\114\uff7e" +
    "\115\uff7e\116\uff7e\117\uff7e\120\uff7e\121\uff7e\001\002\000" +
    "\070\037\uff64\044\uff64\045\uff64\046\uff64\047\uff64\050\uff64" +
    "\052\uff64\053\uff64\054\uff64\055\uff64\056\uff64\057\uff64\060" +
    "\uff64\061\uff64\062\uff64\063\uff64\064\uff64\065\uff64\066\uff64" +
    "\067\uff64\070\uff64\071\uff64\072\uff64\073\uff64\074\uff64\075" +
    "\uff64\076\uff64\001\002\000\144\002\uff6f\005\uff6f\015\uff6f" +
    "\021\uff6f\022\uff6f\031\uff6f\032\uff6f\034\uff6f\037\uff6f\044" +
    "\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f\052\uff6f\053\uff6f" +
    "\054\uff6f\055\uff6f\056\uff6f\057\uff6f\060\uff6f\061\uff6f\062" +
    "\uff6f\063\uff6f\064\uff6f\065\uff6f\066\uff6f\067\uff6f\070\uff6f" +
    "\071\uff6f\072\uff6f\073\uff6f\074\uff6f\075\uff6f\076\uff6f\104" +
    "\uff6f\105\uff6f\106\uff6f\107\uff6f\110\uff6f\111\uff6f\112\uff6f" +
    "\113\uff6f\114\uff6f\115\uff6f\116\uff6f\117\uff6f\120\uff6f\121" +
    "\uff6f\001\002\000\144\002\uff86\005\uff86\015\uff86\021\uff86" +
    "\022\uff86\031\uff86\032\uff86\034\uff86\037\uff86\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\050\uff86\052\uff86\053\uff86\054\uff86" +
    "\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062\uff86\063" +
    "\uff86\064\uff86\065\uff86\066\uff86\067\uff86\070\uff86\071\uff86" +
    "\072\uff86\073\uff86\074\uff86\075\uff86\076\uff86\104\uff86\105" +
    "\uff86\106\uff86\107\uff86\110\uff86\111\uff86\112\uff86\113\uff86" +
    "\114\uff86\115\uff86\116\uff86\117\uff86\120\uff86\121\uff86\001" +
    "\002\000\130\021\065\022\113\037\130\044\060\045\101" +
    "\046\120\047\062\050\106\052\121\053\056\054\125\055" +
    "\100\056\107\057\114\060\051\061\116\062\104\063\075" +
    "\064\064\065\052\066\122\067\112\070\067\071\127\072" +
    "\061\073\102\074\077\075\066\076\111\104\076\105\105" +
    "\106\110\107\126\110\073\111\055\112\071\113\115\114" +
    "\132\115\117\116\057\117\053\120\047\121\123\001\002" +
    "\000\070\037\uff5f\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050" +
    "\uff5f\052\uff5f\053\uff5f\054\uff5f\055\uff5f\056\uff5f\057\uff5f" +
    "\060\uff5f\061\uff5f\062\uff5f\063\uff5f\064\uff5f\065\uff5f\066" +
    "\uff5f\067\uff5f\070\uff5f\071\uff5f\072\uff5f\073\uff5f\074\uff5f" +
    "\075\uff5f\076\uff5f\001\002\000\144\002\uffc2\005\uffc2\015" +
    "\uffc2\021\uffc2\022\uffc2\031\uffc2\032\uffc2\034\uffc2\037\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070" +
    "\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2" +
    "\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2\111\uffc2\112" +
    "\uffc2\113\uffc2\114\uffc2\115\uffc2\116\uffc2\117\uffc2\120\uffc2" +
    "\121\uffc2\001\002\000\144\002\uffc7\005\uffc7\015\uffc7\021" +
    "\uffc7\022\uffc7\031\uffc7\032\uffc7\034\uffc7\037\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7" +
    "\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\071" +
    "\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\104\uffc7" +
    "\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7\112\uffc7\113" +
    "\uffc7\114\uffc7\115\uffc7\116\uffc7\117\uffc7\120\uffc7\121\uffc7" +
    "\001\002\000\144\002\uffb2\005\uffb2\015\uffb2\021\uffb2\022" +
    "\uffb2\031\uffb2\032\uffb2\034\uffb2\037\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\050\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2" +
    "\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072" +
    "\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2\104\uffb2\105\uffb2" +
    "\106\uffb2\107\uffb2\110\uffb2\111\uffb2\112\uffb2\113\uffb2\114" +
    "\uffb2\115\uffb2\116\uffb2\117\uffb2\120\uffb2\121\uffb2\001\002" +
    "\000\144\002\uffb8\005\uffb8\015\uffb8\021\uffb8\022\uffb8\031" +
    "\uffb8\032\uffb8\034\uffb8\037\uffb8\044\uffb8\045\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8" +
    "\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073" +
    "\uffb8\074\uffb8\075\uffb8\076\uffb8\104\uffb8\105\uffb8\106\uffb8" +
    "\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8\114\uffb8\115" +
    "\uffb8\116\uffb8\117\uffb8\120\uffb8\121\uffb8\001\002\000\144" +
    "\002\uffb3\005\uffb3\015\uffb3\021\uffb3\022\uffb3\031\uffb3\032" +
    "\uffb3\034\uffb3\037\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\050\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057" +
    "\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3" +
    "\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074" +
    "\uffb3\075\uffb3\076\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3" +
    "\110\uffb3\111\uffb3\112\uffb3\113\uffb3\114\uffb3\115\uffb3\116" +
    "\uffb3\117\uffb3\120\uffb3\121\uffb3\001\002\000\144\002\uffb6" +
    "\005\uffb6\015\uffb6\021\uffb6\022\uffb6\031\uffb6\032\uffb6\034" +
    "\uffb6\037\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6" +
    "\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060" +
    "\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6" +
    "\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075" +
    "\uffb6\076\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6" +
    "\111\uffb6\112\uffb6\113\uffb6\114\uffb6\115\uffb6\116\uffb6\117" +
    "\uffb6\120\uffb6\121\uffb6\001\002\000\144\002\uffae\005\uffae" +
    "\015\uffae\021\uffae\022\uffae\031\uffae\032\uffae\034\uffae\037" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae" +
    "\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076" +
    "\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae\111\uffae" +
    "\112\uffae\113\uffae\114\uffae\115\uffae\116\uffae\117\uffae\120" +
    "\uffae\121\uffae\001\002\000\144\002\uffad\005\uffad\015\uffad" +
    "\021\uffad\022\uffad\031\uffad\032\uffad\034\uffad\037\uffad\044" +
    "\uffad\045\uffad\046\uffad\047\uffad\050\uffad\052\uffad\053\uffad" +
    "\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062" +
    "\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad" +
    "\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076\uffad\104" +
    "\uffad\105\uffad\106\uffad\107\uffad\110\uffad\111\uffad\112\uffad" +
    "\113\uffad\114\uffad\115\uffad\116\uffad\117\uffad\120\uffad\121" +
    "\uffad\001\002\000\144\002\uffb1\005\uffb1\015\uffb1\021\uffb1" +
    "\022\uffb1\031\uffb1\032\uffb1\034\uffb1\037\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\052\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\104\uffb1\105" +
    "\uffb1\106\uffb1\107\uffb1\110\uffb1\111\uffb1\112\uffb1\113\uffb1" +
    "\114\uffb1\115\uffb1\116\uffb1\117\uffb1\120\uffb1\121\uffb1\001" +
    "\002\000\144\002\uffba\005\uffba\015\uffba\021\uffba\022\uffba" +
    "\031\uffba\032\uffba\034\uffba\037\uffba\044\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064" +
    "\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba" +
    "\073\uffba\074\uffba\075\uffba\076\uffba\104\uffba\105\uffba\106" +
    "\uffba\107\uffba\110\uffba\111\uffba\112\uffba\113\uffba\114\uffba" +
    "\115\uffba\116\uffba\117\uffba\120\uffba\121\uffba\001\002\000" +
    "\144\002\uffb4\005\uffb4\015\uffb4\021\uffb4\022\uffb4\031\uffb4" +
    "\032\uffb4\034\uffb4\037\uffb4\044\uffb4\045\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4" +
    "\074\uffb4\075\uffb4\076\uffb4\104\uffb4\105\uffb4\106\uffb4\107" +
    "\uffb4\110\uffb4\111\uffb4\112\uffb4\113\uffb4\114\uffb4\115\uffb4" +
    "\116\uffb4\117\uffb4\120\uffb4\121\uffb4\001\002\000\144\002" +
    "\uffb5\005\uffb5\015\uffb5\021\uffb5\022\uffb5\031\uffb5\032\uffb5" +
    "\034\uffb5\037\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066" +
    "\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5" +
    "\075\uffb5\076\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5\110" +
    "\uffb5\111\uffb5\112\uffb5\113\uffb5\114\uffb5\115\uffb5\116\uffb5" +
    "\117\uffb5\120\uffb5\121\uffb5\001\002\000\144\002\uffb9\005" +
    "\uffb9\015\uffb9\021\uffb9\022\uffb9\031\uffb9\032\uffb9\034\uffb9" +
    "\037\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067" +
    "\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9" +
    "\076\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\111" +
    "\uffb9\112\uffb9\113\uffb9\114\uffb9\115\uffb9\116\uffb9\117\uffb9" +
    "\120\uffb9\121\uffb9\001\002\000\144\002\uffab\005\uffab\015" +
    "\uffab\021\uffab\022\uffab\031\uffab\032\uffab\034\uffab\037\uffab" +
    "\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\052\uffab\053" +
    "\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab" +
    "\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070" +
    "\uffab\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab" +
    "\104\uffab\105\uffab\106\uffab\107\uffab\110\uffab\111\uffab\112" +
    "\uffab\113\uffab\114\uffab\115\uffab\116\uffab\117\uffab\120\uffab" +
    "\121\uffab\001\002\000\144\002\uffbb\005\uffbb\015\uffbb\021" +
    "\uffbb\022\uffbb\031\uffbb\032\uffbb\034\uffbb\037\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\050\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071" +
    "\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\104\uffbb" +
    "\105\uffbb\106\uffbb\107\uffbb\110\uffbb\111\uffbb\112\uffbb\113" +
    "\uffbb\114\uffbb\115\uffbb\116\uffbb\117\uffbb\120\uffbb\121\uffbb" +
    "\001\002\000\144\002\uffb7\005\uffb7\015\uffb7\021\uffb7\022" +
    "\uffb7\031\uffb7\032\uffb7\034\uffb7\037\uffb7\044\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\052\uffb7\053\uffb7\054\uffb7\055" +
    "\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7" +
    "\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072" +
    "\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\104\uffb7\105\uffb7" +
    "\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7\114" +
    "\uffb7\115\uffb7\116\uffb7\117\uffb7\120\uffb7\121\uffb7\001\002" +
    "\000\144\002\uffaa\005\uffaa\015\uffaa\021\uffaa\022\uffaa\031" +
    "\uffaa\032\uffaa\034\uffaa\037\uffaa\044\uffaa\045\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056" +
    "\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa" +
    "\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073" +
    "\uffaa\074\uffaa\075\uffaa\076\uffaa\104\uffaa\105\uffaa\106\uffaa" +
    "\107\uffaa\110\uffaa\111\uffaa\112\uffaa\113\uffaa\114\uffaa\115" +
    "\uffaa\116\uffaa\117\uffaa\120\uffaa\121\uffaa\001\002\000\144" +
    "\002\uffac\005\uffac\015\uffac\021\uffac\022\uffac\031\uffac\032" +
    "\uffac\034\uffac\037\uffac\044\uffac\045\uffac\046\uffac\047\uffac" +
    "\050\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057" +
    "\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac" +
    "\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074" +
    "\uffac\075\uffac\076\uffac\104\uffac\105\uffac\106\uffac\107\uffac" +
    "\110\uffac\111\uffac\112\uffac\113\uffac\114\uffac\115\uffac\116" +
    "\uffac\117\uffac\120\uffac\121\uffac\001\002\000\144\002\uffbc" +
    "\005\uffbc\015\uffbc\021\uffbc\022\uffbc\031\uffbc\032\uffbc\034" +
    "\uffbc\037\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc" +
    "\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075" +
    "\uffbc\076\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc" +
    "\111\uffbc\112\uffbc\113\uffbc\114\uffbc\115\uffbc\116\uffbc\117" +
    "\uffbc\120\uffbc\121\uffbc\001\002\000\144\002\uffb0\005\uffb0" +
    "\015\uffb0\021\uffb0\022\uffb0\031\uffb0\032\uffb0\034\uffb0\037" +
    "\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061" +
    "\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0" +
    "\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076" +
    "\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0" +
    "\112\uffb0\113\uffb0\114\uffb0\115\uffb0\116\uffb0\117\uffb0\120" +
    "\uffb0\121\uffb0\001\002\000\144\002\uffaf\005\uffaf\015\uffaf" +
    "\021\uffaf\022\uffaf\031\uffaf\032\uffaf\034\uffaf\037\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062" +
    "\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf" +
    "\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\104" +
    "\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\112\uffaf" +
    "\113\uffaf\114\uffaf\115\uffaf\116\uffaf\117\uffaf\120\uffaf\121" +
    "\uffaf\001\002\000\144\002\uff8b\005\uff8b\015\uff8b\021\uff8b" +
    "\022\uff8b\031\uff8b\032\uff8b\034\uff8b\037\uff8b\044\uff8b\045" +
    "\uff8b\046\uff8b\047\uff8b\050\uff8b\052\uff8b\053\uff8b\054\uff8b" +
    "\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063" +
    "\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b" +
    "\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\104\uff8b\105" +
    "\uff8b\106\uff8b\107\uff8b\110\uff8b\111\uff8b\112\uff8b\113\uff8b" +
    "\114\uff8b\115\uff8b\116\uff8b\117\uff8b\120\uff8b\121\uff8b\001" +
    "\002\000\144\002\uff8d\005\uff8d\015\uff8d\021\uff8d\022\uff8d" +
    "\031\uff8d\032\uff8d\034\uff8d\037\uff8d\044\uff8d\045\uff8d\046" +
    "\uff8d\047\uff8d\050\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d" +
    "\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064" +
    "\uff8d\065\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d" +
    "\073\uff8d\074\uff8d\075\uff8d\076\uff8d\104\uff8d\105\uff8d\106" +
    "\uff8d\107\uff8d\110\uff8d\111\uff8d\112\uff8d\113\uff8d\114\uff8d" +
    "\115\uff8d\116\uff8d\117\uff8d\120\uff8d\121\uff8d\001\002\000" +
    "\144\002\uff8c\005\uff8c\015\uff8c\021\uff8c\022\uff8c\031\uff8c" +
    "\032\uff8c\034\uff8c\037\uff8c\044\uff8c\045\uff8c\046\uff8c\047" +
    "\uff8c\050\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c" +
    "\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065" +
    "\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c" +
    "\074\uff8c\075\uff8c\076\uff8c\104\uff8c\105\uff8c\106\uff8c\107" +
    "\uff8c\110\uff8c\111\uff8c\112\uff8c\113\uff8c\114\uff8c\115\uff8c" +
    "\116\uff8c\117\uff8c\120\uff8c\121\uff8c\001\002\000\144\002" +
    "\uff99\005\uff99\015\uff99\021\uff99\022\uff99\031\uff99\032\uff99" +
    "\034\uff99\037\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050" +
    "\uff99\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99" +
    "\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066" +
    "\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99" +
    "\075\uff99\076\uff99\104\uff99\105\uff99\106\uff99\107\uff99\110" +
    "\uff99\111\uff99\112\uff99\113\uff99\114\uff99\115\uff99\116\uff99" +
    "\117\uff99\120\uff99\121\uff99\001\002\000\144\002\uff8a\005" +
    "\uff8a\015\uff8a\021\uff8a\022\uff8a\031\uff8a\032\uff8a\034\uff8a" +
    "\037\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\052" +
    "\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a" +
    "\061\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067" +
    "\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a" +
    "\076\uff8a\104\uff8a\105\uff8a\106\uff8a\107\uff8a\110\uff8a\111" +
    "\uff8a\112\uff8a\113\uff8a\114\uff8a\115\uff8a\116\uff8a\117\uff8a" +
    "\120\uff8a\121\uff8a\001\002\000\144\002\uff8e\005\uff8e\015" +
    "\uff8e\021\uff8e\022\uff8e\031\uff8e\032\uff8e\034\uff8e\037\uff8e" +
    "\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\052\uff8e\053" +
    "\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e" +
    "\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070" +
    "\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e" +
    "\104\uff8e\105\uff8e\106\uff8e\107\uff8e\110\uff8e\111\uff8e\112" +
    "\uff8e\113\uff8e\114\uff8e\115\uff8e\116\uff8e\117\uff8e\120\uff8e" +
    "\121\uff8e\001\002\000\144\002\uff89\005\uff89\015\uff89\021" +
    "\uff89\022\uff89\031\uff89\032\uff89\034\uff89\037\uff89\044\uff89" +
    "\045\uff89\046\uff89\047\uff89\050\uff89\052\uff89\053\uff89\054" +
    "\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89" +
    "\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89\071" +
    "\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89\104\uff89" +
    "\105\uff89\106\uff89\107\uff89\110\uff89\111\uff89\112\uff89\113" +
    "\uff89\114\uff89\115\uff89\116\uff89\117\uff89\120\uff89\121\uff89" +
    "\001\002\000\144\002\uff9c\005\uff9c\015\uff9c\021\uff9c\022" +
    "\uff9c\031\uff9c\032\uff9c\034\uff9c\037\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\047\uff9c\050\uff9c\052\uff9c\053\uff9c\054\uff9c\055" +
    "\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c" +
    "\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072" +
    "\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\104\uff9c\105\uff9c" +
    "\106\uff9c\107\uff9c\110\uff9c\111\uff9c\112\uff9c\113\uff9c\114" +
    "\uff9c\115\uff9c\116\uff9c\117\uff9c\120\uff9c\121\uff9c\001\002" +
    "\000\144\002\uffa4\005\uffa4\015\uffa4\021\uffa4\022\uffa4\031" +
    "\uffa4\032\uffa4\034\uffa4\037\uffa4\044\uffa4\045\uffa4\046\uffa4" +
    "\047\uffa4\050\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056" +
    "\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4" +
    "\065\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073" +
    "\uffa4\074\uffa4\075\uffa4\076\uffa4\104\uffa4\105\uffa4\106\uffa4" +
    "\107\uffa4\110\uffa4\111\uffa4\112\uffa4\113\uffa4\114\uffa4\115" +
    "\uffa4\116\uffa4\117\uffa4\120\uffa4\121\uffa4\001\002\000\144" +
    "\002\uffa5\005\uffa5\015\uffa5\021\uffa5\022\uffa5\031\uffa5\032" +
    "\uffa5\034\uffa5\037\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5" +
    "\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074" +
    "\uffa5\075\uffa5\076\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5" +
    "\110\uffa5\111\uffa5\112\uffa5\113\uffa5\114\uffa5\115\uffa5\116" +
    "\uffa5\117\uffa5\120\uffa5\121\uffa5\001\002\000\144\002\uffa6" +
    "\005\uffa6\015\uffa6\021\uffa6\022\uffa6\031\uffa6\032\uffa6\034" +
    "\uffa6\037\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6" +
    "\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060" +
    "\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6" +
    "\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075" +
    "\uffa6\076\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\110\uffa6" +
    "\111\uffa6\112\uffa6\113\uffa6\114\uffa6\115\uffa6\116\uffa6\117" +
    "\uffa6\120\uffa6\121\uffa6\001\002\000\144\002\uffa8\005\uffa8" +
    "\015\uffa8\021\uffa8\022\uffa8\031\uffa8\032\uffa8\034\uffa8\037" +
    "\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061" +
    "\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8" +
    "\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076" +
    "\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8\111\uffa8" +
    "\112\uffa8\113\uffa8\114\uffa8\115\uffa8\116\uffa8\117\uffa8\120" +
    "\uffa8\121\uffa8\001\002\000\144\002\uffa3\005\uffa3\015\uffa3" +
    "\021\uffa3\022\uffa3\031\uffa3\032\uffa3\034\uffa3\037\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\052\uffa3\053\uffa3" +
    "\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3" +
    "\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3\104" +
    "\uffa3\105\uffa3\106\uffa3\107\uffa3\110\uffa3\111\uffa3\112\uffa3" +
    "\113\uffa3\114\uffa3\115\uffa3\116\uffa3\117\uffa3\120\uffa3\121" +
    "\uffa3\001\002\000\144\002\uffa7\005\uffa7\015\uffa7\021\uffa7" +
    "\022\uffa7\031\uffa7\032\uffa7\034\uffa7\037\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\052\uffa7\053\uffa7\054\uffa7" +
    "\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063" +
    "\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7" +
    "\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\104\uffa7\105" +
    "\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\112\uffa7\113\uffa7" +
    "\114\uffa7\115\uffa7\116\uffa7\117\uffa7\120\uffa7\121\uffa7\001" +
    "\002\000\144\002\uffa2\005\uffa2\015\uffa2\021\uffa2\022\uffa2" +
    "\031\uffa2\032\uffa2\034\uffa2\037\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2" +
    "\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064" +
    "\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2" +
    "\073\uffa2\074\uffa2\075\uffa2\076\uffa2\104\uffa2\105\uffa2\106" +
    "\uffa2\107\uffa2\110\uffa2\111\uffa2\112\uffa2\113\uffa2\114\uffa2" +
    "\115\uffa2\116\uffa2\117\uffa2\120\uffa2\121\uffa2\001\002\000" +
    "\144\002\uffa9\005\uffa9\015\uffa9\021\uffa9\022\uffa9\031\uffa9" +
    "\032\uffa9\034\uffa9\037\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9" +
    "\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065" +
    "\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9" +
    "\074\uffa9\075\uffa9\076\uffa9\104\uffa9\105\uffa9\106\uffa9\107" +
    "\uffa9\110\uffa9\111\uffa9\112\uffa9\113\uffa9\114\uffa9\115\uffa9" +
    "\116\uffa9\117\uffa9\120\uffa9\121\uffa9\001\002\000\144\002" +
    "\uff95\005\uff95\015\uff95\021\uff95\022\uff95\031\uff95\032\uff95" +
    "\034\uff95\037\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050" +
    "\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95" +
    "\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065\uff95\066" +
    "\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95\074\uff95" +
    "\075\uff95\076\uff95\104\uff95\105\uff95\106\uff95\107\uff95\110" +
    "\uff95\111\uff95\112\uff95\113\uff95\114\uff95\115\uff95\116\uff95" +
    "\117\uff95\120\uff95\121\uff95\001\002\000\144\002\uff9d\005" +
    "\uff9d\015\uff9d\021\uff9d\022\uff9d\031\uff9d\032\uff9d\034\uff9d" +
    "\037\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d" +
    "\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067" +
    "\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d" +
    "\076\uff9d\104\uff9d\105\uff9d\106\uff9d\107\uff9d\110\uff9d\111" +
    "\uff9d\112\uff9d\113\uff9d\114\uff9d\115\uff9d\116\uff9d\117\uff9d" +
    "\120\uff9d\121\uff9d\001\002\000\144\002\uff96\005\uff96\015" +
    "\uff96\021\uff96\022\uff96\031\uff96\032\uff96\034\uff96\037\uff96" +
    "\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\052\uff96\053" +
    "\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96" +
    "\062\uff96\063\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070" +
    "\uff96\071\uff96\072\uff96\073\uff96\074\uff96\075\uff96\076\uff96" +
    "\104\uff96\105\uff96\106\uff96\107\uff96\110\uff96\111\uff96\112" +
    "\uff96\113\uff96\114\uff96\115\uff96\116\uff96\117\uff96\120\uff96" +
    "\121\uff96\001\002\000\144\002\uff9a\005\uff9a\015\uff9a\021" +
    "\uff9a\022\uff9a\031\uff9a\032\uff9a\034\uff9a\037\uff9a\044\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\050\uff9a\052\uff9a\053\uff9a\054" +
    "\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a" +
    "\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071" +
    "\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a\104\uff9a" +
    "\105\uff9a\106\uff9a\107\uff9a\110\uff9a\111\uff9a\112\uff9a\113" +
    "\uff9a\114\uff9a\115\uff9a\116\uff9a\117\uff9a\120\uff9a\121\uff9a" +
    "\001\002\000\144\002\uff91\005\uff91\015\uff91\021\uff91\022" +
    "\uff91\031\uff91\032\uff91\034\uff91\037\uff91\044\uff91\045\uff91" +
    "\046\uff91\047\uff91\050\uff91\052\uff91\053\uff91\054\uff91\055" +
    "\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91" +
    "\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\071\uff91\072" +
    "\uff91\073\uff91\074\uff91\075\uff91\076\uff91\104\uff91\105\uff91" +
    "\106\uff91\107\uff91\110\uff91\111\uff91\112\uff91\113\uff91\114" +
    "\uff91\115\uff91\116\uff91\117\uff91\120\uff91\121\uff91\001\002" +
    "\000\144\002\uff94\005\uff94\015\uff94\021\uff94\022\uff94\031" +
    "\uff94\032\uff94\034\uff94\037\uff94\044\uff94\045\uff94\046\uff94" +
    "\047\uff94\050\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056" +
    "\uff94\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\064\uff94" +
    "\065\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072\uff94\073" +
    "\uff94\074\uff94\075\uff94\076\uff94\104\uff94\105\uff94\106\uff94" +
    "\107\uff94\110\uff94\111\uff94\112\uff94\113\uff94\114\uff94\115" +
    "\uff94\116\uff94\117\uff94\120\uff94\121\uff94\001\002\000\144" +
    "\002\uff90\005\uff90\015\uff90\021\uff90\022\uff90\031\uff90\032" +
    "\uff90\034\uff90\037\uff90\044\uff90\045\uff90\046\uff90\047\uff90" +
    "\050\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90\057" +
    "\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065\uff90" +
    "\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074" +
    "\uff90\075\uff90\076\uff90\104\uff90\105\uff90\106\uff90\107\uff90" +
    "\110\uff90\111\uff90\112\uff90\113\uff90\114\uff90\115\uff90\116" +
    "\uff90\117\uff90\120\uff90\121\uff90\001\002\000\144\002\uff9f" +
    "\005\uff9f\015\uff9f\021\uff9f\022\uff9f\031\uff9f\032\uff9f\034" +
    "\uff9f\037\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060" +
    "\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f" +
    "\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f\075" +
    "\uff9f\076\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\110\uff9f" +
    "\111\uff9f\112\uff9f\113\uff9f\114\uff9f\115\uff9f\116\uff9f\117" +
    "\uff9f\120\uff9f\121\uff9f\001\002\000\144\002\uff97\005\uff97" +
    "\015\uff97\021\uff97\022\uff97\031\uff97\032\uff97\034\uff97\037" +
    "\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\052\uff97" +
    "\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061" +
    "\uff97\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067\uff97" +
    "\070\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97\076" +
    "\uff97\104\uff97\105\uff97\106\uff97\107\uff97\110\uff97\111\uff97" +
    "\112\uff97\113\uff97\114\uff97\115\uff97\116\uff97\117\uff97\120" +
    "\uff97\121\uff97\001\002\000\144\002\uff98\005\uff98\015\uff98" +
    "\021\uff98\022\uff98\031\uff98\032\uff98\034\uff98\037\uff98\044" +
    "\uff98\045\uff98\046\uff98\047\uff98\050\uff98\052\uff98\053\uff98" +
    "\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062" +
    "\uff98\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98" +
    "\071\uff98\072\uff98\073\uff98\074\uff98\075\uff98\076\uff98\104" +
    "\uff98\105\uff98\106\uff98\107\uff98\110\uff98\111\uff98\112\uff98" +
    "\113\uff98\114\uff98\115\uff98\116\uff98\117\uff98\120\uff98\121" +
    "\uff98\001\002\000\144\002\uff9e\005\uff9e\015\uff9e\021\uff9e" +
    "\022\uff9e\031\uff9e\032\uff9e\034\uff9e\037\uff9e\044\uff9e\045" +
    "\uff9e\046\uff9e\047\uff9e\050\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e" +
    "\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\104\uff9e\105" +
    "\uff9e\106\uff9e\107\uff9e\110\uff9e\111\uff9e\112\uff9e\113\uff9e" +
    "\114\uff9e\115\uff9e\116\uff9e\117\uff9e\120\uff9e\121\uff9e\001" +
    "\002\000\144\002\uff88\005\uff88\015\uff88\021\uff88\022\uff88" +
    "\031\uff88\032\uff88\034\uff88\037\uff88\044\uff88\045\uff88\046" +
    "\uff88\047\uff88\050\uff88\052\uff88\053\uff88\054\uff88\055\uff88" +
    "\056\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063\uff88\064" +
    "\uff88\065\uff88\066\uff88\067\uff88\070\uff88\071\uff88\072\uff88" +
    "\073\uff88\074\uff88\075\uff88\076\uff88\104\uff88\105\uff88\106" +
    "\uff88\107\uff88\110\uff88\111\uff88\112\uff88\113\uff88\114\uff88" +
    "\115\uff88\116\uff88\117\uff88\120\uff88\121\uff88\001\002\000" +
    "\144\002\uffa0\005\uffa0\015\uffa0\021\uffa0\022\uffa0\031\uffa0" +
    "\032\uffa0\034\uffa0\037\uffa0\044\uffa0\045\uffa0\046\uffa0\047" +
    "\uffa0\050\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0" +
    "\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065" +
    "\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0" +
    "\074\uffa0\075\uffa0\076\uffa0\104\uffa0\105\uffa0\106\uffa0\107" +
    "\uffa0\110\uffa0\111\uffa0\112\uffa0\113\uffa0\114\uffa0\115\uffa0" +
    "\116\uffa0\117\uffa0\120\uffa0\121\uffa0\001\002\000\144\002" +
    "\uff9b\005\uff9b\015\uff9b\021\uff9b\022\uff9b\031\uff9b\032\uff9b" +
    "\034\uff9b\037\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b" +
    "\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066" +
    "\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b" +
    "\075\uff9b\076\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110" +
    "\uff9b\111\uff9b\112\uff9b\113\uff9b\114\uff9b\115\uff9b\116\uff9b" +
    "\117\uff9b\120\uff9b\121\uff9b\001\002\000\144\002\uff87\005" +
    "\uff87\015\uff87\021\uff87\022\uff87\031\uff87\032\uff87\034\uff87" +
    "\037\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\052" +
    "\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057\uff87\060\uff87" +
    "\061\uff87\062\uff87\063\uff87\064\uff87\065\uff87\066\uff87\067" +
    "\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074\uff87\075\uff87" +
    "\076\uff87\104\uff87\105\uff87\106\uff87\107\uff87\110\uff87\111" +
    "\uff87\112\uff87\113\uff87\114\uff87\115\uff87\116\uff87\117\uff87" +
    "\120\uff87\121\uff87\001\002\000\144\002\uff8f\005\uff8f\015" +
    "\uff8f\021\uff8f\022\uff8f\031\uff8f\032\uff8f\034\uff8f\037\uff8f" +
    "\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\052\uff8f\053" +
    "\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f" +
    "\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070" +
    "\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f" +
    "\104\uff8f\105\uff8f\106\uff8f\107\uff8f\110\uff8f\111\uff8f\112" +
    "\uff8f\113\uff8f\114\uff8f\115\uff8f\116\uff8f\117\uff8f\120\uff8f" +
    "\121\uff8f\001\002\000\144\002\uffa1\005\uffa1\015\uffa1\021" +
    "\uffa1\022\uffa1\031\uffa1\032\uffa1\034\uffa1\037\uffa1\044\uffa1" +
    "\045\uffa1\046\uffa1\047\uffa1\050\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1" +
    "\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071" +
    "\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\104\uffa1" +
    "\105\uffa1\106\uffa1\107\uffa1\110\uffa1\111\uffa1\112\uffa1\113" +
    "\uffa1\114\uffa1\115\uffa1\116\uffa1\117\uffa1\120\uffa1\121\uffa1" +
    "\001\002\000\144\002\uff93\005\uff93\015\uff93\021\uff93\022" +
    "\uff93\031\uff93\032\uff93\034\uff93\037\uff93\044\uff93\045\uff93" +
    "\046\uff93\047\uff93\050\uff93\052\uff93\053\uff93\054\uff93\055" +
    "\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93" +
    "\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072" +
    "\uff93\073\uff93\074\uff93\075\uff93\076\uff93\104\uff93\105\uff93" +
    "\106\uff93\107\uff93\110\uff93\111\uff93\112\uff93\113\uff93\114" +
    "\uff93\115\uff93\116\uff93\117\uff93\120\uff93\121\uff93\001\002" +
    "\000\144\002\uff92\005\uff92\015\uff92\021\uff92\022\uff92\031" +
    "\uff92\032\uff92\034\uff92\037\uff92\044\uff92\045\uff92\046\uff92" +
    "\047\uff92\050\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056" +
    "\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064\uff92" +
    "\065\uff92\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073" +
    "\uff92\074\uff92\075\uff92\076\uff92\104\uff92\105\uff92\106\uff92" +
    "\107\uff92\110\uff92\111\uff92\112\uff92\113\uff92\114\uff92\115" +
    "\uff92\116\uff92\117\uff92\120\uff92\121\uff92\001\002\000\144" +
    "\002\uffbf\005\uffbf\015\uffbf\021\uffbf\022\uffbf\031\uffbf\032" +
    "\uffbf\034\uffbf\037\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf" +
    "\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074" +
    "\uffbf\075\uffbf\076\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf" +
    "\110\uffbf\111\uffbf\112\uffbf\113\uffbf\114\uffbf\115\uffbf\116" +
    "\uffbf\117\uffbf\120\uffbf\121\uffbf\001\002\000\144\002\uffc4" +
    "\005\uffc4\015\uffc4\021\uffc4\022\uffc4\031\uffc4\032\uffc4\034" +
    "\uffc4\037\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060" +
    "\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4" +
    "\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075" +
    "\uffc4\076\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4\110\uffc4" +
    "\111\uffc4\112\uffc4\113\uffc4\114\uffc4\115\uffc4\116\uffc4\117" +
    "\uffc4\120\uffc4\121\uffc4\001\002\000\144\002\uffc1\005\uffc1" +
    "\015\uffc1\021\uffc1\022\uffc1\031\uffc1\032\uffc1\034\uffc1\037" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1" +
    "\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076" +
    "\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\110\uffc1\111\uffc1" +
    "\112\uffc1\113\uffc1\114\uffc1\115\uffc1\116\uffc1\117\uffc1\120" +
    "\uffc1\121\uffc1\001\002\000\144\002\uffc6\005\uffc6\015\uffc6" +
    "\021\uffc6\022\uffc6\031\uffc6\032\uffc6\034\uffc6\037\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\052\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062" +
    "\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6" +
    "\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\104" +
    "\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6" +
    "\113\uffc6\114\uffc6\115\uffc6\116\uffc6\117\uffc6\120\uffc6\121" +
    "\uffc6\001\002\000\010\002\uffca\031\uffca\032\uffca\001\002" +
    "\000\010\002\uffc9\031\uffc9\032\uffc9\001\002\000\012\002" +
    "\uffcc\031\uffcc\032\uffcc\102\234\001\002\000\012\002\uffcb" +
    "\031\uffcb\032\uffcb\103\233\001\002\000\010\002\uffcd\031" +
    "\uffcd\032\uffcd\001\002\000\010\002\uffce\031\uffce\032\uffce" +
    "\001\002\000\144\002\uffc3\005\uffc3\015\uffc3\021\uffc3\022" +
    "\uffc3\031\uffc3\032\uffc3\034\uffc3\037\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\052\uffc3\053\uffc3\054\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3" +
    "\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072" +
    "\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\104\uffc3\105\uffc3" +
    "\106\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\114" +
    "\uffc3\115\uffc3\116\uffc3\117\uffc3\120\uffc3\121\uffc3\001\002" +
    "\000\004\010\245\001\002\000\144\002\uffc8\005\uffc8\015" +
    "\uffc8\021\uffc8\022\uffc8\031\uffc8\032\uffc8\034\uffc8\037\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\052\uffc8\053" +
    "\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8" +
    "\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070" +
    "\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8" +
    "\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8\111\uffc8\112" +
    "\uffc8\113\uffc8\114\uffc8\115\uffc8\116\uffc8\117\uffc8\120\uffc8" +
    "\121\uffc8\001\002\000\006\014\242\016\241\001\002\000" +
    "\004\102\244\001\002\000\004\103\243\001\002\000\010" +
    "\002\uffd8\031\uffd8\032\uffd8\001\002\000\010\002\uffd9\031" +
    "\uffd9\032\uffd9\001\002\000\006\002\uffe0\031\uffe0\001\002" +
    "\000\004\102\252\001\002\000\014\002\uffdc\010\251\031" +
    "\uffdc\032\uffdc\103\250\001\002\000\010\002\uffd6\031\uffd6" +
    "\032\uffd6\001\002\000\010\002\uffde\031\uffde\032\uffde\001" +
    "\002\000\010\002\uffd7\031\uffd7\032\uffd7\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\001\001\002\000\004\031" +
    "\311\001\002\000\026\002\ufff9\005\264\007\022\010\024" +
    "\014\263\016\270\031\262\077\265\100\261\101\015\001" +
    "\002\000\004\002\ufffa\001\002\000\006\031\307\032\306" +
    "\001\002\000\006\014\303\016\302\001\002\000\004\032" +
    "\300\001\002\000\006\010\037\103\277\001\002\000\134" +
    "\014\273\021\065\022\113\037\130\044\060\045\101\046" +
    "\120\047\062\050\106\052\121\053\056\054\125\055\100" +
    "\056\107\057\114\060\051\061\116\062\104\063\075\064" +
    "\064\065\052\066\122\067\112\070\067\071\127\072\061" +
    "\073\102\074\077\075\066\076\111\100\274\104\076\105" +
    "\105\106\110\107\126\110\073\111\055\112\071\113\115" +
    "\114\132\115\117\116\057\117\053\120\047\121\123\001" +
    "\002\000\006\014\247\016\272\001\002\000\004\002\uffe6" +
    "\001\002\000\004\002\uffe7\001\002\000\004\102\271\001" +
    "\002\000\004\002\uffd0\001\002\000\006\002\uffd3\102\252" +
    "\001\002\000\004\010\276\001\002\000\010\002\uffd4\014" +
    "\242\016\275\001\002\000\006\002\uffd5\102\244\001\002" +
    "\000\010\002\uffe5\031\uffe0\032\uffe0\001\002\000\004\002" +
    "\uffcf\001\002\000\020\002\ufff2\005\013\007\022\010\024" +
    "\014\020\077\012\101\015\001\002\000\004\002\ufff3\001" +
    "\002\000\004\102\305\001\002\000\004\103\304\001\002" +
    "\000\004\002\uffd1\001\002\000\004\002\uffd2\001\002\000" +
    "\004\002\ufffb\001\002\000\006\002\ufffc\032\310\001\002" +
    "\000\004\002\000\001\002\000\004\032\312\001\002\000" +
    "\004\002\ufff5\001\002\000\004\032\314\001\002\000\004" +
    "\002\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\020\002\007\003\003\004\015\005\013\015" +
    "\006\017\004\024\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\254\004\015\005\013\015\006\017" +
    "\004\024\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\236\013" +
    "\062\014\071\016\067\025\123\026\053\027\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\102\013" +
    "\062\014\071\016\067\025\123\026\053\027\073\001\001" +
    "\000\004\021\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\027\001\001\000\016\003\024\004\015" +
    "\005\013\015\006\017\004\024\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\225\013\062\014\071\016" +
    "\067\025\123\026\053\027\224\001\001\000\002\001\001" +
    "\000\020\007\223\013\062\014\071\016\067\025\123\026" +
    "\053\027\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\133\013\062\014\071\016\067\025" +
    "\123\026\053\027\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\257\004\015\005\013" +
    "\006\265\015\006\017\004\022\256\023\266\024\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\236\013" +
    "\062\014\071\016\067\025\123\026\053\027\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\300\004\015\005\013" +
    "\015\006\017\004\024\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    Ventana v=new Ventana();    

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CANT_PLURALES ::= QUINCE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("15"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CANT_PLURALES ::= CATORCE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("14"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CANT_PLURALES ::= TRECE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("13"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CANT_PLURALES ::= DOCE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("12"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CANT_PLURALES ::= ONCE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("11"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CANT_PLURALES ::= DIEZ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("10"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CANT_PLURALES ::= NUEVE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("9"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CANT_PLURALES ::= OCHO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("8"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CANT_PLURALES ::= SIETE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("7"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CANT_PLURALES ::= SEIS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("6"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CANT_PLURALES ::= CINCO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("5"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CANT_PLURALES ::= CUATRO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("4"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CANT_PLURALES ::= TRES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("3"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CANT_PLURALES ::= DOS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("2"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CANTIDAD_CORRECTO_A ::= CANT_PLURALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANTIDAD_CORRECTO_A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CANTIDAD_CORRECTO_A ::= CANT_UNA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("1"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANTIDAD_CORRECTO_A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CANTIDAD_CORRECTO_O ::= CANT_PLURALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANTIDAD_CORRECTO_O",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CANTIDAD_CORRECTO_O ::= CANT_UN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("1"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANTIDAD_CORRECTO_O",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PLATILLO ::= VAMPIRO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PLATILLO ::= JUGO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PLATILLO ::= PIÑA_COLADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PLATILLO ::= VICTORIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PLATILLO ::= CORONA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PLATILLO ::= COCA_COLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PLATILLO ::= NARANJADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PLATILLO ::= LIMONADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PLATILLO ::= MARTINI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PLATILLO ::= EXPRESSO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // PLATILLO ::= CAFE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PLATILLO ::= CHURROS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PLATILLO ::= PIE_QUESO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PLATILLO ::= PIE_MORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // PLATILLO ::= PIE_FRESA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PLATILLO ::= PIE_LIMON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PLATILLO ::= HELADO_CACAO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PLATILLO ::= FONDANT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PLATILLO ::= FRUTA_CARAMELO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PLATILLO ::= HELADO_VAINILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PLATILLO ::= TERIYAKI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PLATILLO ::= HAMBURGUESA_ARROZ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PLATILLO ::= BOMBAZO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PLATILLO ::= CAMARONITO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PLATILLO ::= SUSHI_RES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PLATILLO ::= SUSHI_POLLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PLATILLO ::= SUSHI_CAMARON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.genErrores.add("Error sintáctico 18. LINEA:"+(sright+1)+"\n No se especifico la cantidad para el platillo \n Ejemplo de solución: ' ...quiero 'una' platillo '\n"); v.hayError=true; v.rutaAutomata.add("/automatas/oyeMarvinQuieroPLatilloPorfavor.png"); v.audio.add(16);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PLATILLO ::= CANTIDAD_CORRECTO_O VAMPIRO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,27");/* Vampiro - $55.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PLATILLO ::= CANTIDAD_CORRECTO_O JUGO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,26");/* Jugo - $25.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PLATILLO ::= CANTIDAD_CORRECTO_A PIÑA_COLADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,25");/* Piña colada - $45.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PLATILLO ::= CANTIDAD_CORRECTO_A VICTORIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,24");/* Victoria - $39.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PLATILLO ::= CANTIDAD_CORRECTO_A CORONA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,23");/* Corona - $39.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PLATILLO ::= CANTIDAD_CORRECTO_A COCA_COLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,22");/* Coca-cola - $18.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PLATILLO ::= CANTIDAD_CORRECTO_A NARANJADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,21");/* Naranjada - $22.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PLATILLO ::= CANTIDAD_CORRECTO_A LIMONADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,20");/* Limonada - $22.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PLATILLO ::= CANTIDAD_CORRECTO_O MARTINI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,19");/* Martini - $45.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PLATILLO ::= CANTIDAD_CORRECTO_O EXPRESSO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,18");/* Expresso - $35.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PLATILLO ::= CANTIDAD_CORRECTO_O CAFE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,17");/* Cafe - $20.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PLATILLO ::= CANTIDAD_CORRECTO_O CHURROS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,15");/* Churros - $6.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PLATILLO ::= CANTIDAD_CORRECTO_O PIE_QUESO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,14");/* Pie de queso - $26.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PLATILLO ::= CANTIDAD_CORRECTO_O PIE_MORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,13");/* Pie de mora - $26.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PLATILLO ::= CANTIDAD_CORRECTO_O PIE_FRESA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,12");/* Pie de fresa - $26.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PLATILLO ::= CANTIDAD_CORRECTO_O PIE_LIMON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,11");/* Pie de limon - $26.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PLATILLO ::= CANTIDAD_CORRECTO_O HELADO_CACAO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,10");/* Helado de cacao - $30.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PLATILLO ::= CANTIDAD_CORRECTO_O FONDANT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,9");/* Fondant - $40.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PLATILLO ::= CANTIDAD_CORRECTO_A FRUTA_CARAMELO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,8");/* Fruta en caramelo - $28.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PLATILLO ::= CANTIDAD_CORRECTO_O HELADO_VAINILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		   v.codObjPeticion.add("add,cuenta,7");/* Helado de vainilla - $30.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PLATILLO ::= CANTIDAD_CORRECTO_O TERIYAKI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,6");/* Teriyaki - $120.00*/ 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PLATILLO ::= CANTIDAD_CORRECTO_A HAMBURGUESA_ARROZ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,5"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PLATILLO ::= CANTIDAD_CORRECTO_O BOMBAZO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,4"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PLATILLO ::= CANTIDAD_CORRECTO_O CAMARONITO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,3"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PLATILLO ::= CANTIDAD_CORRECTO_O SUSHI_RES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,2"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PLATILLO ::= CANTIDAD_CORRECTO_O SUSHI_POLLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  v.codObjPeticion.add("add,cuenta,1"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PLATILLO ::= CANTIDAD_CORRECTO_O SUSHI_CAMARON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("add,cuenta,0"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PLATILLO_ERR_UN ::= CANT_UN PIÑA_COLADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 2. LINEA:"+(sright+1)+"\n No es posible pedir un piña colada. \n Ejemplo: ' ...quiero 'una' piña colada'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PLATILLO_ERR_UN ::= CANT_UN VICTORIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 2. LINEA:"+(sright+1)+"\n No es posible pedir un victoria. \n Ejemplo: ' ...quiero 'una' victoria'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PLATILLO_ERR_UN ::= CANT_UN CORONA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 2. LINEA:"+(sright+1)+"\n No es posible pedir un corona. \n Ejemplo: ' ...quiero 'una' corona'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PLATILLO_ERR_UN ::= CANT_UN COCA_COLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 2. LINEA:"+(sright+1)+"\n No es posible pedir un coca cola. \n Ejemplo: ' ...quiero 'una' coca cola'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PLATILLO_ERR_UN ::= CANT_UN NARANJADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 2. LINEA:"+(sright+1)+"\n No es posible pedir un naranjada. \n Ejemplo: ' ...quiero 'una' naranjada'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PLATILLO_ERR_UN ::= CANT_UN LIMONADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 2. LINEA:"+(sright+1)+"\n No es posible pedir un limonada. \n Ejemplo: ' ...quiero 'una' limonada'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PLATILLO_ERR_UN ::= CANT_UN FRUTA_CARAMELO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 2. LINEA:"+(sright+1)+"\n No es posible pedir un fruta en caramelo. \n Ejemplo: ' ...quiero 'una' fruta en caramelo'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PLATILLO_ERR_UN ::= CANT_UN HAMBURGUESA_ARROZ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 2. LINEA:"+(sright+1)+"\n No es posible pedir un hamburguesa de arroz. \n Ejemplo: ' ...quiero 'una' hamburguesa de arroz'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UN",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PLATILLO_ERR_UNA ::= CANT_UNA VAMPIRO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una vampiro. \n Ejemplo: ' ...quiero 'un' vampiro'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PLATILLO_ERR_UNA ::= CANT_UNA JUGO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una jugo. \n Ejemplo: ' ...quiero 'un' jugo'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PLATILLO_ERR_UNA ::= CANT_UNA MARTINI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una martini. \n Ejemplo: ' ...quiero 'un' martini'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PLATILLO_ERR_UNA ::= CANT_UNA EXPRESSO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una expresso. \n Ejemplo: ' ...quiero 'un' expresso'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PLATILLO_ERR_UNA ::= CANT_UNA CAFE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una cafe. \n Ejemplo: ' ...quiero 'un' cafe'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PLATILLO_ERR_UNA ::= CANT_UNA CHURROS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una churro. \n Ejemplo: ' ...quiero 'un' churro'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PLATILLO_ERR_UNA ::= CANT_UNA PIE_QUESO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una pie de queso. \n Ejemplo: ' ...quiero 'un' pie de queso'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PLATILLO_ERR_UNA ::= CANT_UNA PIE_MORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una pie de mora. \n Ejemplo: ' ...quiero 'un' pie de mora'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PLATILLO_ERR_UNA ::= CANT_UNA PIE_FRESA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una pie de fresa. \n Ejemplo: ' ...quiero 'un' pie de fresa'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PLATILLO_ERR_UNA ::= CANT_UNA PIE_LIMON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una pie de limon. \n Ejemplo: ' ...quiero 'un' pie de limon'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PLATILLO_ERR_UNA ::= CANT_UNA HELADO_CACAO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una helado de cacao. \n Ejemplo: ' ...quiero 'un' helado de cacao'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PLATILLO_ERR_UNA ::= CANT_UNA FONDANT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una fondant. \n Ejemplo: ' ...quiero 'un' fondant'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PLATILLO_ERR_UNA ::= CANT_UNA HELADO_VAINILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una helado de vainilla. \n Ejemplo: ' ...quiero 'un' helado de vainilla'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PLATILLO_ERR_UNA ::= CANT_UNA TERIYAKI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una teriyaki. \n Ejemplo: ' ...quiero 'un' teriyaki'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PLATILLO_ERR_UNA ::= CANT_UNA BOMBAZO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una bombazo. \n Ejemplo: ' ...quiero 'un' bombazo'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PLATILLO_ERR_UNA ::= CANT_UNA CAMARONITO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una camaronito. \n Ejemplo: ' ...quiero 'un' camaronito'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PLATILLO_ERR_UNA ::= CANT_UNA SUSHI_RES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una sushi de res. \n Ejemplo: ' ...quiero 'un' sushi de res'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PLATILLO_ERR_UNA ::= CANT_UNA SUSHI_POLLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una sushi de pollo. \n Ejemplo: ' ...quiero 'un' sushi de pollo'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PLATILLO_ERR_UNA ::= CANT_UNA SUSHI_CAMARON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una sushi de camaron. \n Ejemplo: ' ...quiero 'un' sushi de camaron'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PLATILLO_ERR_UNA_UN ::= PLATILLO_ERR_UN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.clear(); v.audio.add(15);  v.hayError=true; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA_UN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PLATILLO_ERR_UNA_UN ::= PLATILLO_ERR_UNA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.clear(); v.audio.add(14); v.hayError=true; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO_ERR_UNA_UN",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO Y PLATILLO_ERR_UNA_UN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO PLATILLO_ERR_UNA_UN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO Coma PLATILLO_ERR_UNA_UN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO QUIERO PLATILLO_ERR_UNA_UN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENT_HACER_PEDIDO ::= QUIERO PLATILLO_ERR_UNA_UN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO Y PLATILLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(12); v.rutaAutomata.add("/automatas/hacerPedido.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO PLATILLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(12); v.rutaAutomata.add("/automatas/hacerPedido.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO Coma PLATILLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(12); v.rutaAutomata.add("/automatas/hacerPedido.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO QUIERO PLATILLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(12); v.rutaAutomata.add("/automatas/hacerPedido.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENT_HACER_PEDIDO ::= QUIERO PLATILLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(12); v.rutaAutomata.add("/automatas/hacerPedido.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENT_DICTAR_MENU ::= LEER CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce la unión en la oración. \n Ejemplo: 'OYE SANJI LEER LA CARTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENT_DICTAR_MENU ::= LEER MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce la unión en la oración. \n Ejemplo: 'OYE SANJI LEER EL MENU POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENT_DICTAR_MENU ::= LEER LA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se especifica el objeto a leer. \n Ejemplo: 'OYE SANJI LEER LA CARTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENT_DICTAR_MENU ::= LEER EL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se especifica el objeto a leer. \n Ejemplo: 'OYE SANJI LEER EL MENU POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENT_DICTAR_MENU ::= LEER LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENT_DICTAR_MENU ::= LEER EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENT_MOSTRAR_MENU_ERR ::= LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición. \n Ejemplo: 'OYE SANJI MOSTRAR LA CARTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU_ERR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENT_MOSTRAR_MENU_ERR ::= EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición. \n Ejemplo: 'OYE SANJI MOSTRAR EL MENU POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU_ERR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENT_MOSTRAR_MENU_ERR ::= VER LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición. \n Ejemplo: 'OYE SANJI QUIERO VER LA CARTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU_ERR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENT_MOSTRAR_MENU_ERR ::= VER EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición. \n Ejemplo: 'OYE SANJI QUIERO VER EL MENU POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU_ERR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENT_MOSTRAR_MENU_ERR ::= MOSTRAR EL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce la petición. \n Ejemplo: 'OYE SANJI MOSTRAR EL MENU POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU_ERR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENT_MOSTRAR_MENU_ERR ::= QUIERO VER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce la petición. \n Ejemplo: 'OYE SANJI QUIERO VER LA CUENTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU_ERR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENT_MOSTRAR_MENU_ERR ::= QUIERO VER EL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce la solicitud de acción. \n Ejemplo: 'OYE SANJI QUIERO VER EL MENU POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU_ERR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENT_MOSTRAR_MENU ::= MOSTRAR LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENT_MOSTRAR_MENU ::= MOSTRAR EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENT_MOSTRAR_MENU ::= QUIERO VER LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENT_MOSTRAR_MENU ::= QUIERO VER EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENT_DAR_CUENTA ::= CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce la solicitud de acción. \n Ejemplo: 'OYE SANJI QUIERO LA CUENTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENT_DAR_CUENTA ::= LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce la solicitud de acción. \n Ejemplo: 'OYE SANJI QUIERO LA CUENTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENT_DAR_CUENTA ::= MOSTRAR LA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No especifica lo que requiere. \n Ejemplo: 'OYE SANJI MOSTRAR LA CUENTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT_DAR_CUENTA ::= TRAER LA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No especifica lo que requiere. \n Ejemplo: 'OYE SANJI TRAER LA CUENTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT_DAR_CUENTA ::= MOSTRAR LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,cuenta,mesa, ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT_DAR_CUENTA ::= TRAER LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,cuenta,mesa, ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENT_DAR_CUENTA ::= QUIERO LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,cuenta,mesa, ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // UTENCILIOS ::= TENEDORES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("traer,mesa,tene, "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UTENCILIOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // UTENCILIOS ::= CUCHARAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("traer,mesa,cuch, "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UTENCILIOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // UTENCILIOS ::= SERVILLETAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("traer,mesa,serv, "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UTENCILIOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // UTENCILIOS ::= VASOS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("traer,mesa,vaso, "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UTENCILIOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENT_DAR_CUENTA_ERR ::= QUIERO LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No especifica lo que requiere. \n Ejemplo: 'OYE SANJI QUIERO LA CUENTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA_ERR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ERROR_SENTENCIAS ::= SENT_MOSTRAR_MENU_ERR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERROR_SENTENCIAS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ERROR_SENTENCIAS ::= SENT_DAR_CUENTA_ERR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERROR_SENTENCIAS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS ::= TRAER UTENCILIOS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(4); v.rutaAutomata.add("/automatas/traerUtencilios.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS ::= SENT_DICTAR_MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(3); v.rutaAutomata.add("/automatas/leerMenu.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS ::= SENT_DAR_CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(2); v.rutaAutomata.add("/automatas/mostrarCuenta.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS ::= SENT_MOSTRAR_MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(1); v.rutaAutomata.add("/automatas/mostrarMenu.png");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= SENT_HACER_PEDIDO_ERR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= SENT_HACER_PEDIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MESAS ::= MESAD 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("entregar,mesad, , "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MESAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MESAS ::= MESAC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("entregar,mesac, , "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MESAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MESAS ::= MESAB 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("entregar,mesab, , "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MESAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MESAS ::= MESAA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("entregar,mesaa, , "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MESAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= OYE SANJI POR FAVOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n Debe de incluir peticiones en su pedido.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO ::= OYE SANJI POR FAVOR SENTENCIAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n Estructura de oraciones incorrecta.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= SENTENCIAS POR FAVOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= OYE SENTENCIAS POR FAVOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= SANJI SENTENCIAS POR FAVOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= SANJI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n Estructura de oraciones incorrecra.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= OYE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n Estructura de oraciones incorrecra.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= OYE SANJI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n Estructura de oraciones incorrecra.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= OYE SANJI ERROR_SENTENCIAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el fin de la petición.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= OYE SANJI SENTENCIAS FAVOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el fin de la petición.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= OYE SANJI SENTENCIAS POR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el fin de la petición.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= ADIOS SANJI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("free,marvin,mesa, "); v.delete=true;  v.audio.add(6);  v.rutaAutomata.add("/automatas/adiosMarvin.png");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= LISTO MESAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.rutaAutomata.add("/automatas/listoMesas.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= LISTO SANJI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("free,marvin,mesa, "); v.audio.add(5); v.rutaAutomata.add("/automatas/listoMarvin.png"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= OYE SANJI SENTENCIAS POR FAVOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

