
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jan 04 18:27:56 MST 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jan 04 18:27:56 MST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\007\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\006" +
    "\000\002\002\006\000\002\002\005\000\002\002\004\000" +
    "\002\002\003\000\002\002\003\000\002\002\006\000\002" +
    "\002\006\000\002\002\005\000\002\002\007\000\002\002" +
    "\006\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\004\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\003\000\002\005\006\000\002" +
    "\005\006\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\005\005" +
    "\000\002\005\005\000\002\005\004\000\002\005\004\000" +
    "\002\016\005\000\002\016\005\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\004" +
    "\004\000\002\004\005\000\002\004\005\000\002\004\004" +
    "\000\002\004\005\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\012\003\000\002\012\003\000\002\013\003\000\002" +
    "\013\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\032\004\020\005\013\006\014\007\021\010" +
    "\017\013\016\014\012\016\024\051\022\077\015\100\010" +
    "\101\005\001\002\000\056\002\uffed\005\232\015\230\021" +
    "\101\022\115\031\uffed\032\uffed\034\231\104\112\105\106" +
    "\106\100\107\102\110\107\111\077\112\111\113\114\114" +
    "\071\115\074\116\072\117\104\120\073\121\105\001\002" +
    "\000\012\014\225\016\224\102\222\103\223\001\002\000" +
    "\004\031\220\001\002\000\010\002\uffec\031\uffec\032\uffec" +
    "\001\002\000\006\014\215\016\214\001\002\000\010\002" +
    "\uffea\031\uffea\032\uffea\001\002\000\006\010\213\103\212" +
    "\001\002\000\046\014\103\021\101\022\115\100\075\104" +
    "\112\105\106\106\100\107\102\110\107\111\077\112\111" +
    "\113\114\114\071\115\074\116\072\117\104\120\073\121" +
    "\105\001\002\000\026\002\ufff8\004\057\005\013\007\021" +
    "\010\017\014\012\016\024\077\015\100\010\101\005\001" +
    "\002\000\006\014\052\016\051\001\002\000\014\004\050" +
    "\040\047\041\046\042\045\043\044\001\002\000\010\002" +
    "\uffdd\031\uffdd\032\uffdd\001\002\000\024\002\ufff7\005\013" +
    "\007\021\010\017\014\012\016\024\077\015\100\010\101" +
    "\005\001\002\000\014\014\035\024\034\025\033\026\036" +
    "\027\032\001\002\000\004\004\030\001\002\000\010\002" +
    "\uffeb\031\uffeb\032\uffeb\001\002\000\004\102\027\001\002" +
    "\000\004\002\026\001\002\000\004\002\001\001\002\000" +
    "\010\002\uffd3\031\uffd3\032\uffd3\001\002\000\004\002\ufffd" +
    "\001\002\000\010\002\uffe9\031\uffe9\032\uffe9\001\002\000" +
    "\010\002\uffe7\031\uffe7\032\uffe7\001\002\000\010\002\uffe6" +
    "\031\uffe6\032\uffe6\001\002\000\010\002\uffe8\031\uffe8\032" +
    "\uffe8\001\002\000\012\002\uffe0\010\037\031\uffe0\032\uffe0" +
    "\001\002\000\010\002\uffe5\031\uffe5\032\uffe5\001\002\000" +
    "\010\002\uffe3\031\uffe3\032\uffe3\001\002\000\004\031\041" +
    "\001\002\000\004\032\042\001\002\000\004\002\ufff6\001" +
    "\002\000\004\002\ufffe\001\002\000\004\002\uffee\001\002" +
    "\000\004\002\uffef\001\002\000\004\002\ufff0\001\002\000" +
    "\004\002\ufff1\001\002\000\004\002\uffff\001\002\000\012" +
    "\002\uffd6\031\uffd6\032\uffd6\102\055\001\002\000\014\002" +
    "\uffdf\010\054\031\uffdf\032\uffdf\103\053\001\002\000\010" +
    "\002\uffd9\031\uffd9\032\uffd9\001\002\000\010\002\uffe2\031" +
    "\uffe2\032\uffe2\001\002\000\010\002\uffda\031\uffda\032\uffda" +
    "\001\002\000\004\031\067\001\002\000\026\002\ufff9\005" +
    "\013\007\021\010\017\014\012\016\024\031\061\077\015" +
    "\100\010\101\005\001\002\000\010\002\ufffa\031\065\032" +
    "\064\001\002\000\004\032\062\001\002\000\024\002\ufff2" +
    "\005\013\007\021\010\017\014\012\016\024\077\015\100" +
    "\010\101\005\001\002\000\004\002\ufff3\001\002\000\004" +
    "\002\ufffb\001\002\000\006\002\ufffc\032\066\001\002\000" +
    "\004\002\000\001\002\000\004\032\070\001\002\000\004" +
    "\002\ufff5\001\002\000\070\037\uff84\044\uff84\045\uff84\046" +
    "\uff84\047\uff84\050\uff84\052\uff84\053\uff84\054\uff84\055\uff84" +
    "\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84\063\uff84\064" +
    "\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84" +
    "\073\uff84\074\uff84\075\uff84\076\uff84\001\002\000\070\037" +
    "\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82\052\uff82" +
    "\053\uff82\054\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061" +
    "\uff82\062\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82" +
    "\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82\076" +
    "\uff82\001\002\000\070\037\uff80\044\uff80\045\uff80\046\uff80" +
    "\047\uff80\050\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056" +
    "\uff80\057\uff80\060\uff80\061\uff80\062\uff80\063\uff80\064\uff80" +
    "\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80\072\uff80\073" +
    "\uff80\074\uff80\075\uff80\076\uff80\001\002\000\070\037\uff83" +
    "\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83\052\uff83\053" +
    "\uff83\054\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83" +
    "\062\uff83\063\uff83\064\uff83\065\uff83\066\uff83\067\uff83\070" +
    "\uff83\071\uff83\072\uff83\073\uff83\074\uff83\075\uff83\076\uff83" +
    "\001\002\000\014\002\uffd7\014\207\016\206\031\uffd7\032" +
    "\uffd7\001\002\000\050\037\203\044\177\045\173\046\175" +
    "\047\164\052\200\053\166\055\172\056\165\057\163\060" +
    "\170\061\204\062\205\063\167\064\171\065\202\073\176" +
    "\074\201\076\174\001\002\000\070\037\uff87\044\uff87\045" +
    "\uff87\046\uff87\047\uff87\050\uff87\052\uff87\053\uff87\054\uff87" +
    "\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062\uff87\063" +
    "\uff87\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071\uff87" +
    "\072\uff87\073\uff87\074\uff87\075\uff87\076\uff87\001\002\000" +
    "\070\037\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a" +
    "\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060" +
    "\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a" +
    "\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075" +
    "\uff8a\076\uff8a\001\002\000\070\037\uff90\044\uff90\045\uff90" +
    "\046\uff90\047\uff90\050\161\052\uff90\053\uff90\054\156\055" +
    "\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90" +
    "\064\uff90\065\uff90\066\160\067\155\070\154\071\157\072" +
    "\162\073\uff90\074\uff90\075\153\076\uff90\001\002\000\070" +
    "\037\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\052" +
    "\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89" +
    "\061\uff89\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067" +
    "\uff89\070\uff89\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89" +
    "\076\uff89\001\002\000\012\002\uffe1\010\152\031\uffe1\032" +
    "\uffe1\001\002\000\070\037\uff81\044\uff81\045\uff81\046\uff81" +
    "\047\uff81\050\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056" +
    "\uff81\057\uff81\060\uff81\061\uff81\062\uff81\063\uff81\064\uff81" +
    "\065\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81\073" +
    "\uff81\074\uff81\075\uff81\076\uff81\001\002\000\070\037\uff7f" +
    "\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\052\uff7f\053" +
    "\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061\uff7f" +
    "\062\uff7f\063\uff7f\064\uff7f\065\uff7f\066\uff7f\067\uff7f\070" +
    "\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f\075\uff7f\076\uff7f" +
    "\001\002\000\070\037\uff8b\044\uff8b\045\uff8b\046\uff8b\047" +
    "\uff8b\050\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b" +
    "\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b\065" +
    "\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b" +
    "\074\uff8b\075\uff8b\076\uff8b\001\002\000\070\037\uff88\044" +
    "\uff88\045\uff88\046\uff88\047\uff88\050\uff88\052\uff88\053\uff88" +
    "\054\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062" +
    "\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88" +
    "\071\uff88\072\uff88\073\uff88\074\uff88\075\uff88\076\uff88\001" +
    "\002\000\022\050\151\054\145\066\147\067\143\070\144" +
    "\071\146\072\150\075\142\001\002\000\070\037\uff86\044" +
    "\uff86\045\uff86\046\uff86\047\uff86\050\uff86\052\uff86\053\uff86" +
    "\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062" +
    "\uff86\063\uff86\064\uff86\065\uff86\066\uff86\067\uff86\070\uff86" +
    "\071\uff86\072\uff86\073\uff86\074\uff86\075\uff86\076\uff86\001" +
    "\002\000\070\037\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c" +
    "\050\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057" +
    "\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c" +
    "\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074" +
    "\uff8c\075\uff8c\076\uff8c\001\002\000\056\002\uffcb\005\uffcb" +
    "\015\uffcb\021\uffcb\022\uffcb\031\uffcb\032\uffcb\034\uffcb\104" +
    "\uffcb\105\uffcb\106\uffcb\107\uffcb\110\uffcb\111\uffcb\112\uffcb" +
    "\113\uffcb\114\uffcb\115\uffcb\116\uffcb\117\uffcb\120\uffcb\121" +
    "\uffcb\001\002\000\070\037\uff85\044\uff85\045\uff85\046\uff85" +
    "\047\uff85\050\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056" +
    "\uff85\057\uff85\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85" +
    "\065\uff85\066\uff85\067\uff85\070\uff85\071\uff85\072\uff85\073" +
    "\uff85\074\uff85\075\uff85\076\uff85\001\002\000\070\037\137" +
    "\044\133\045\126\046\131\047\120\050\uff8e\052\134\053" +
    "\122\054\uff8e\055\127\056\121\057\117\060\125\061\140" +
    "\062\141\063\123\064\124\065\136\066\uff8e\067\uff8e\070" +
    "\uff8e\071\uff8e\072\uff8e\073\132\074\135\075\uff8e\076\130" +
    "\001\002\000\070\037\uff8f\044\uff8f\045\uff8f\046\uff8f\047" +
    "\uff8f\050\uff8d\052\uff8f\053\uff8f\054\uff8d\055\uff8f\056\uff8f" +
    "\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065" +
    "\uff8f\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8f" +
    "\074\uff8f\075\uff8d\076\uff8f\001\002\000\056\002\uffad\005" +
    "\uffad\015\uffad\021\uffad\022\uffad\031\uffad\032\uffad\034\uffad" +
    "\104\uffad\105\uffad\106\uffad\107\uffad\110\uffad\111\uffad\112" +
    "\uffad\113\uffad\114\uffad\115\uffad\116\uffad\117\uffad\120\uffad" +
    "\121\uffad\001\002\000\056\002\uffbd\005\uffbd\015\uffbd\021" +
    "\uffbd\022\uffbd\031\uffbd\032\uffbd\034\uffbd\104\uffbd\105\uffbd" +
    "\106\uffbd\107\uffbd\110\uffbd\111\uffbd\112\uffbd\113\uffbd\114" +
    "\uffbd\115\uffbd\116\uffbd\117\uffbd\120\uffbd\121\uffbd\001\002" +
    "\000\056\002\uffaf\005\uffaf\015\uffaf\021\uffaf\022\uffaf\031" +
    "\uffaf\032\uffaf\034\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf" +
    "\110\uffaf\111\uffaf\112\uffaf\113\uffaf\114\uffaf\115\uffaf\116" +
    "\uffaf\117\uffaf\120\uffaf\121\uffaf\001\002\000\056\002\uffb7" +
    "\005\uffb7\015\uffb7\021\uffb7\022\uffb7\031\uffb7\032\uffb7\034" +
    "\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7" +
    "\112\uffb7\113\uffb7\114\uffb7\115\uffb7\116\uffb7\117\uffb7\120" +
    "\uffb7\121\uffb7\001\002\000\056\002\uffa5\005\uffa5\015\uffa5" +
    "\021\uffa5\022\uffa5\031\uffa5\032\uffa5\034\uffa5\104\uffa5\105" +
    "\uffa5\106\uffa5\107\uffa5\110\uffa5\111\uffa5\112\uffa5\113\uffa5" +
    "\114\uffa5\115\uffa5\116\uffa5\117\uffa5\120\uffa5\121\uffa5\001" +
    "\002\000\056\002\uffa3\005\uffa3\015\uffa3\021\uffa3\022\uffa3" +
    "\031\uffa3\032\uffa3\034\uffa3\104\uffa3\105\uffa3\106\uffa3\107" +
    "\uffa3\110\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3\115\uffa3" +
    "\116\uffa3\117\uffa3\120\uffa3\121\uffa3\001\002\000\056\002" +
    "\uffab\005\uffab\015\uffab\021\uffab\022\uffab\031\uffab\032\uffab" +
    "\034\uffab\104\uffab\105\uffab\106\uffab\107\uffab\110\uffab\111" +
    "\uffab\112\uffab\113\uffab\114\uffab\115\uffab\116\uffab\117\uffab" +
    "\120\uffab\121\uffab\001\002\000\056\002\uffc1\005\uffc1\015" +
    "\uffc1\021\uffc1\022\uffc1\031\uffc1\032\uffc1\034\uffc1\104\uffc1" +
    "\105\uffc1\106\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\113" +
    "\uffc1\114\uffc1\115\uffc1\116\uffc1\117\uffc1\120\uffc1\121\uffc1" +
    "\001\002\000\056\002\uffb1\005\uffb1\015\uffb1\021\uffb1\022" +
    "\uffb1\031\uffb1\032\uffb1\034\uffb1\104\uffb1\105\uffb1\106\uffb1" +
    "\107\uffb1\110\uffb1\111\uffb1\112\uffb1\113\uffb1\114\uffb1\115" +
    "\uffb1\116\uffb1\117\uffb1\120\uffb1\121\uffb1\001\002\000\056" +
    "\002\uffb3\005\uffb3\015\uffb3\021\uffb3\022\uffb3\031\uffb3\032" +
    "\uffb3\034\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3\110\uffb3" +
    "\111\uffb3\112\uffb3\113\uffb3\114\uffb3\115\uffb3\116\uffb3\117" +
    "\uffb3\120\uffb3\121\uffb3\001\002\000\056\002\uffbf\005\uffbf" +
    "\015\uffbf\021\uffbf\022\uffbf\031\uffbf\032\uffbf\034\uffbf\104" +
    "\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\111\uffbf\112\uffbf" +
    "\113\uffbf\114\uffbf\115\uffbf\116\uffbf\117\uffbf\120\uffbf\121" +
    "\uffbf\001\002\000\056\002\uff93\005\uff93\015\uff93\021\uff93" +
    "\022\uff93\031\uff93\032\uff93\034\uff93\104\uff93\105\uff93\106" +
    "\uff93\107\uff93\110\uff93\111\uff93\112\uff93\113\uff93\114\uff93" +
    "\115\uff93\116\uff93\117\uff93\120\uff93\121\uff93\001\002\000" +
    "\056\002\uffc3\005\uffc3\015\uffc3\021\uffc3\022\uffc3\031\uffc3" +
    "\032\uffc3\034\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110" +
    "\uffc3\111\uffc3\112\uffc3\113\uffc3\114\uffc3\115\uffc3\116\uffc3" +
    "\117\uffc3\120\uffc3\121\uffc3\001\002\000\056\002\uffb9\005" +
    "\uffb9\015\uffb9\021\uffb9\022\uffb9\031\uffb9\032\uffb9\034\uffb9" +
    "\104\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\112" +
    "\uffb9\113\uffb9\114\uffb9\115\uffb9\116\uffb9\117\uffb9\120\uffb9" +
    "\121\uffb9\001\002\000\056\002\uff91\005\uff91\015\uff91\021" +
    "\uff91\022\uff91\031\uff91\032\uff91\034\uff91\104\uff91\105\uff91" +
    "\106\uff91\107\uff91\110\uff91\111\uff91\112\uff91\113\uff91\114" +
    "\uff91\115\uff91\116\uff91\117\uff91\120\uff91\121\uff91\001\002" +
    "\000\056\002\uffa1\005\uffa1\015\uffa1\021\uffa1\022\uffa1\031" +
    "\uffa1\032\uffa1\034\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1" +
    "\110\uffa1\111\uffa1\112\uffa1\113\uffa1\114\uffa1\115\uffa1\116" +
    "\uffa1\117\uffa1\120\uffa1\121\uffa1\001\002\000\056\002\uffc5" +
    "\005\uffc5\015\uffc5\021\uffc5\022\uffc5\031\uffc5\032\uffc5\034" +
    "\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5" +
    "\112\uffc5\113\uffc5\114\uffc5\115\uffc5\116\uffc5\117\uffc5\120" +
    "\uffc5\121\uffc5\001\002\000\056\002\uffa9\005\uffa9\015\uffa9" +
    "\021\uffa9\022\uffa9\031\uffa9\032\uffa9\034\uffa9\104\uffa9\105" +
    "\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\112\uffa9\113\uffa9" +
    "\114\uffa9\115\uffa9\116\uffa9\117\uffa9\120\uffa9\121\uffa9\001" +
    "\002\000\056\002\uffa7\005\uffa7\015\uffa7\021\uffa7\022\uffa7" +
    "\031\uffa7\032\uffa7\034\uffa7\104\uffa7\105\uffa7\106\uffa7\107" +
    "\uffa7\110\uffa7\111\uffa7\112\uffa7\113\uffa7\114\uffa7\115\uffa7" +
    "\116\uffa7\117\uffa7\120\uffa7\121\uffa7\001\002\000\056\002" +
    "\uff9a\005\uff9a\015\uff9a\021\uff9a\022\uff9a\031\uff9a\032\uff9a" +
    "\034\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\110\uff9a\111" +
    "\uff9a\112\uff9a\113\uff9a\114\uff9a\115\uff9a\116\uff9a\117\uff9a" +
    "\120\uff9a\121\uff9a\001\002\000\056\002\uff9e\005\uff9e\015" +
    "\uff9e\021\uff9e\022\uff9e\031\uff9e\032\uff9e\034\uff9e\104\uff9e" +
    "\105\uff9e\106\uff9e\107\uff9e\110\uff9e\111\uff9e\112\uff9e\113" +
    "\uff9e\114\uff9e\115\uff9e\116\uff9e\117\uff9e\120\uff9e\121\uff9e" +
    "\001\002\000\056\002\uff9c\005\uff9c\015\uff9c\021\uff9c\022" +
    "\uff9c\031\uff9c\032\uff9c\034\uff9c\104\uff9c\105\uff9c\106\uff9c" +
    "\107\uff9c\110\uff9c\111\uff9c\112\uff9c\113\uff9c\114\uff9c\115" +
    "\uff9c\116\uff9c\117\uff9c\120\uff9c\121\uff9c\001\002\000\056" +
    "\002\uffb6\005\uffb6\015\uffb6\021\uffb6\022\uffb6\031\uffb6\032" +
    "\uffb6\034\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6" +
    "\111\uffb6\112\uffb6\113\uffb6\114\uffb6\115\uffb6\116\uffb6\117" +
    "\uffb6\120\uffb6\121\uffb6\001\002\000\056\002\uff98\005\uff98" +
    "\015\uff98\021\uff98\022\uff98\031\uff98\032\uff98\034\uff98\104" +
    "\uff98\105\uff98\106\uff98\107\uff98\110\uff98\111\uff98\112\uff98" +
    "\113\uff98\114\uff98\115\uff98\116\uff98\117\uff98\120\uff98\121" +
    "\uff98\001\002\000\056\002\uffa0\005\uffa0\015\uffa0\021\uffa0" +
    "\022\uffa0\031\uffa0\032\uffa0\034\uffa0\104\uffa0\105\uffa0\106" +
    "\uffa0\107\uffa0\110\uffa0\111\uffa0\112\uffa0\113\uffa0\114\uffa0" +
    "\115\uffa0\116\uffa0\117\uffa0\120\uffa0\121\uffa0\001\002\000" +
    "\056\002\uff96\005\uff96\015\uff96\021\uff96\022\uff96\031\uff96" +
    "\032\uff96\034\uff96\104\uff96\105\uff96\106\uff96\107\uff96\110" +
    "\uff96\111\uff96\112\uff96\113\uff96\114\uff96\115\uff96\116\uff96" +
    "\117\uff96\120\uff96\121\uff96\001\002\000\056\002\uffbc\005" +
    "\uffbc\015\uffbc\021\uffbc\022\uffbc\031\uffbc\032\uffbc\034\uffbc" +
    "\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\112" +
    "\uffbc\113\uffbc\114\uffbc\115\uffbc\116\uffbc\117\uffbc\120\uffbc" +
    "\121\uffbc\001\002\000\010\002\uffe4\031\uffe4\032\uffe4\001" +
    "\002\000\056\002\uff99\005\uff99\015\uff99\021\uff99\022\uff99" +
    "\031\uff99\032\uff99\034\uff99\104\uff99\105\uff99\106\uff99\107" +
    "\uff99\110\uff99\111\uff99\112\uff99\113\uff99\114\uff99\115\uff99" +
    "\116\uff99\117\uff99\120\uff99\121\uff99\001\002\000\056\002" +
    "\uff9b\005\uff9b\015\uff9b\021\uff9b\022\uff9b\031\uff9b\032\uff9b" +
    "\034\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b\111" +
    "\uff9b\112\uff9b\113\uff9b\114\uff9b\115\uff9b\116\uff9b\117\uff9b" +
    "\120\uff9b\121\uff9b\001\002\000\056\002\uff9d\005\uff9d\015" +
    "\uff9d\021\uff9d\022\uff9d\031\uff9d\032\uff9d\034\uff9d\104\uff9d" +
    "\105\uff9d\106\uff9d\107\uff9d\110\uff9d\111\uff9d\112\uff9d\113" +
    "\uff9d\114\uff9d\115\uff9d\116\uff9d\117\uff9d\120\uff9d\121\uff9d" +
    "\001\002\000\056\002\uffb5\005\uffb5\015\uffb5\021\uffb5\022" +
    "\uffb5\031\uffb5\032\uffb5\034\uffb5\104\uffb5\105\uffb5\106\uffb5" +
    "\107\uffb5\110\uffb5\111\uffb5\112\uffb5\113\uffb5\114\uffb5\115" +
    "\uffb5\116\uffb5\117\uffb5\120\uffb5\121\uffb5\001\002\000\056" +
    "\002\uff97\005\uff97\015\uff97\021\uff97\022\uff97\031\uff97\032" +
    "\uff97\034\uff97\104\uff97\105\uff97\106\uff97\107\uff97\110\uff97" +
    "\111\uff97\112\uff97\113\uff97\114\uff97\115\uff97\116\uff97\117" +
    "\uff97\120\uff97\121\uff97\001\002\000\056\002\uff9f\005\uff9f" +
    "\015\uff9f\021\uff9f\022\uff9f\031\uff9f\032\uff9f\034\uff9f\104" +
    "\uff9f\105\uff9f\106\uff9f\107\uff9f\110\uff9f\111\uff9f\112\uff9f" +
    "\113\uff9f\114\uff9f\115\uff9f\116\uff9f\117\uff9f\120\uff9f\121" +
    "\uff9f\001\002\000\056\002\uffbb\005\uffbb\015\uffbb\021\uffbb" +
    "\022\uffbb\031\uffbb\032\uffbb\034\uffbb\104\uffbb\105\uffbb\106" +
    "\uffbb\107\uffbb\110\uffbb\111\uffbb\112\uffbb\113\uffbb\114\uffbb" +
    "\115\uffbb\116\uffbb\117\uffbb\120\uffbb\121\uffbb\001\002\000" +
    "\056\002\uff95\005\uff95\015\uff95\021\uff95\022\uff95\031\uff95" +
    "\032\uff95\034\uff95\104\uff95\105\uff95\106\uff95\107\uff95\110" +
    "\uff95\111\uff95\112\uff95\113\uff95\114\uff95\115\uff95\116\uff95" +
    "\117\uff95\120\uff95\121\uff95\001\002\000\056\002\uffae\005" +
    "\uffae\015\uffae\021\uffae\022\uffae\031\uffae\032\uffae\034\uffae" +
    "\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae\111\uffae\112" +
    "\uffae\113\uffae\114\uffae\115\uffae\116\uffae\117\uffae\120\uffae" +
    "\121\uffae\001\002\000\056\002\uffbe\005\uffbe\015\uffbe\021" +
    "\uffbe\022\uffbe\031\uffbe\032\uffbe\034\uffbe\104\uffbe\105\uffbe" +
    "\106\uffbe\107\uffbe\110\uffbe\111\uffbe\112\uffbe\113\uffbe\114" +
    "\uffbe\115\uffbe\116\uffbe\117\uffbe\120\uffbe\121\uffbe\001\002" +
    "\000\056\002\uffb0\005\uffb0\015\uffb0\021\uffb0\022\uffb0\031" +
    "\uffb0\032\uffb0\034\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0" +
    "\110\uffb0\111\uffb0\112\uffb0\113\uffb0\114\uffb0\115\uffb0\116" +
    "\uffb0\117\uffb0\120\uffb0\121\uffb0\001\002\000\056\002\uffb8" +
    "\005\uffb8\015\uffb8\021\uffb8\022\uffb8\031\uffb8\032\uffb8\034" +
    "\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8" +
    "\112\uffb8\113\uffb8\114\uffb8\115\uffb8\116\uffb8\117\uffb8\120" +
    "\uffb8\121\uffb8\001\002\000\056\002\uffa6\005\uffa6\015\uffa6" +
    "\021\uffa6\022\uffa6\031\uffa6\032\uffa6\034\uffa6\104\uffa6\105" +
    "\uffa6\106\uffa6\107\uffa6\110\uffa6\111\uffa6\112\uffa6\113\uffa6" +
    "\114\uffa6\115\uffa6\116\uffa6\117\uffa6\120\uffa6\121\uffa6\001" +
    "\002\000\056\002\uffac\005\uffac\015\uffac\021\uffac\022\uffac" +
    "\031\uffac\032\uffac\034\uffac\104\uffac\105\uffac\106\uffac\107" +
    "\uffac\110\uffac\111\uffac\112\uffac\113\uffac\114\uffac\115\uffac" +
    "\116\uffac\117\uffac\120\uffac\121\uffac\001\002\000\056\002" +
    "\uffa4\005\uffa4\015\uffa4\021\uffa4\022\uffa4\031\uffa4\032\uffa4" +
    "\034\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4\110\uffa4\111" +
    "\uffa4\112\uffa4\113\uffa4\114\uffa4\115\uffa4\116\uffa4\117\uffa4" +
    "\120\uffa4\121\uffa4\001\002\000\056\002\uffb2\005\uffb2\015" +
    "\uffb2\021\uffb2\022\uffb2\031\uffb2\032\uffb2\034\uffb2\104\uffb2" +
    "\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111\uffb2\112\uffb2\113" +
    "\uffb2\114\uffb2\115\uffb2\116\uffb2\117\uffb2\120\uffb2\121\uffb2" +
    "\001\002\000\056\002\uffc2\005\uffc2\015\uffc2\021\uffc2\022" +
    "\uffc2\031\uffc2\032\uffc2\034\uffc2\104\uffc2\105\uffc2\106\uffc2" +
    "\107\uffc2\110\uffc2\111\uffc2\112\uffc2\113\uffc2\114\uffc2\115" +
    "\uffc2\116\uffc2\117\uffc2\120\uffc2\121\uffc2\001\002\000\056" +
    "\002\uffb4\005\uffb4\015\uffb4\021\uffb4\022\uffb4\031\uffb4\032" +
    "\uffb4\034\uffb4\104\uffb4\105\uffb4\106\uffb4\107\uffb4\110\uffb4" +
    "\111\uffb4\112\uffb4\113\uffb4\114\uffb4\115\uffb4\116\uffb4\117" +
    "\uffb4\120\uffb4\121\uffb4\001\002\000\056\002\uffc0\005\uffc0" +
    "\015\uffc0\021\uffc0\022\uffc0\031\uffc0\032\uffc0\034\uffc0\104" +
    "\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0\111\uffc0\112\uffc0" +
    "\113\uffc0\114\uffc0\115\uffc0\116\uffc0\117\uffc0\120\uffc0\121" +
    "\uffc0\001\002\000\056\002\uff94\005\uff94\015\uff94\021\uff94" +
    "\022\uff94\031\uff94\032\uff94\034\uff94\104\uff94\105\uff94\106" +
    "\uff94\107\uff94\110\uff94\111\uff94\112\uff94\113\uff94\114\uff94" +
    "\115\uff94\116\uff94\117\uff94\120\uff94\121\uff94\001\002\000" +
    "\056\002\uffc4\005\uffc4\015\uffc4\021\uffc4\022\uffc4\031\uffc4" +
    "\032\uffc4\034\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4\110" +
    "\uffc4\111\uffc4\112\uffc4\113\uffc4\114\uffc4\115\uffc4\116\uffc4" +
    "\117\uffc4\120\uffc4\121\uffc4\001\002\000\056\002\uffba\005" +
    "\uffba\015\uffba\021\uffba\022\uffba\031\uffba\032\uffba\034\uffba" +
    "\104\uffba\105\uffba\106\uffba\107\uffba\110\uffba\111\uffba\112" +
    "\uffba\113\uffba\114\uffba\115\uffba\116\uffba\117\uffba\120\uffba" +
    "\121\uffba\001\002\000\056\002\uff92\005\uff92\015\uff92\021" +
    "\uff92\022\uff92\031\uff92\032\uff92\034\uff92\104\uff92\105\uff92" +
    "\106\uff92\107\uff92\110\uff92\111\uff92\112\uff92\113\uff92\114" +
    "\uff92\115\uff92\116\uff92\117\uff92\120\uff92\121\uff92\001\002" +
    "\000\056\002\uffa2\005\uffa2\015\uffa2\021\uffa2\022\uffa2\031" +
    "\uffa2\032\uffa2\034\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2" +
    "\110\uffa2\111\uffa2\112\uffa2\113\uffa2\114\uffa2\115\uffa2\116" +
    "\uffa2\117\uffa2\120\uffa2\121\uffa2\001\002\000\056\002\uffc6" +
    "\005\uffc6\015\uffc6\021\uffc6\022\uffc6\031\uffc6\032\uffc6\034" +
    "\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6\111\uffc6" +
    "\112\uffc6\113\uffc6\114\uffc6\115\uffc6\116\uffc6\117\uffc6\120" +
    "\uffc6\121\uffc6\001\002\000\056\002\uffaa\005\uffaa\015\uffaa" +
    "\021\uffaa\022\uffaa\031\uffaa\032\uffaa\034\uffaa\104\uffaa\105" +
    "\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa\113\uffaa" +
    "\114\uffaa\115\uffaa\116\uffaa\117\uffaa\120\uffaa\121\uffaa\001" +
    "\002\000\056\002\uffa8\005\uffa8\015\uffa8\021\uffa8\022\uffa8" +
    "\031\uffa8\032\uffa8\034\uffa8\104\uffa8\105\uffa8\106\uffa8\107" +
    "\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\114\uffa8\115\uffa8" +
    "\116\uffa8\117\uffa8\120\uffa8\121\uffa8\001\002\000\012\002" +
    "\uffd8\031\uffd8\032\uffd8\102\211\001\002\000\004\103\210" +
    "\001\002\000\010\002\uffdb\031\uffdb\032\uffdb\001\002\000" +
    "\010\002\uffdc\031\uffdc\032\uffdc\001\002\000\010\002\uffd2" +
    "\031\uffd2\032\uffd2\001\002\000\010\002\uffde\031\uffde\032" +
    "\uffde\001\002\000\004\102\217\001\002\000\004\103\216" +
    "\001\002\000\010\002\uffd4\031\uffd4\032\uffd4\001\002\000" +
    "\010\002\uffd5\031\uffd5\032\uffd5\001\002\000\004\032\221" +
    "\001\002\000\004\002\ufff4\001\002\000\010\002\uffcd\031" +
    "\uffcd\032\uffcd\001\002\000\010\002\uffcc\031\uffcc\032\uffcc" +
    "\001\002\000\012\002\uffcf\031\uffcf\032\uffcf\102\227\001" +
    "\002\000\012\002\uffce\031\uffce\032\uffce\103\226\001\002" +
    "\000\010\002\uffd0\031\uffd0\032\uffd0\001\002\000\010\002" +
    "\uffd1\031\uffd1\032\uffd1\001\002\000\042\021\101\022\115" +
    "\104\112\105\106\106\100\107\102\110\107\111\077\112" +
    "\111\113\114\114\071\115\074\116\072\117\104\120\073" +
    "\121\105\001\002\000\042\021\101\022\115\104\112\105" +
    "\106\106\100\107\102\110\107\111\077\112\111\113\114" +
    "\114\071\115\074\116\072\117\104\120\073\121\105\001" +
    "\002\000\042\021\101\022\115\104\112\105\106\106\100" +
    "\107\102\110\107\111\077\112\111\113\114\114\071\115" +
    "\074\116\072\117\104\120\073\121\105\001\002\000\056" +
    "\002\uffc8\005\uffc8\015\uffc8\021\uffc8\022\uffc8\031\uffc8\032" +
    "\uffc8\034\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8" +
    "\111\uffc8\112\uffc8\113\uffc8\114\uffc8\115\uffc8\116\uffc8\117" +
    "\uffc8\120\uffc8\121\uffc8\001\002\000\056\002\uffca\005\uffca" +
    "\015\uffca\021\uffca\022\uffca\031\uffca\032\uffca\034\uffca\104" +
    "\uffca\105\uffca\106\uffca\107\uffca\110\uffca\111\uffca\112\uffca" +
    "\113\uffca\114\uffca\115\uffca\116\uffca\117\uffca\120\uffca\121" +
    "\uffca\001\002\000\056\002\uffc9\005\uffc9\015\uffc9\021\uffc9" +
    "\022\uffc9\031\uffc9\032\uffc9\034\uffc9\104\uffc9\105\uffc9\106" +
    "\uffc9\107\uffc9\110\uffc9\111\uffc9\112\uffc9\113\uffc9\114\uffc9" +
    "\115\uffc9\116\uffc9\117\uffc9\120\uffc9\121\uffc9\001\002\000" +
    "\056\002\uffc7\005\uffc7\015\uffc7\021\uffc7\022\uffc7\031\uffc7" +
    "\032\uffc7\034\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110" +
    "\uffc7\111\uffc7\112\uffc7\113\uffc7\114\uffc7\115\uffc7\116\uffc7" +
    "\117\uffc7\120\uffc7\121\uffc7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\016\002\024\003\005\004\003\005\006\014" +
    "\022\016\010\001\001\000\012\006\232\012\075\013\107" +
    "\015\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\112\012\075\013\107\015\115\001" +
    "\001\000\014\003\055\004\003\005\006\014\022\016\010" +
    "\001\001\000\002\001\001\000\004\020\042\001\001\000" +
    "\002\001\001\000\014\003\037\004\003\005\006\014\022" +
    "\016\010\001\001\000\004\017\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\057" +
    "\004\003\005\006\014\022\016\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\062\004\003\005\006" +
    "\014\022\016\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\235\012\075" +
    "\013\107\015\115\001\001\000\012\006\234\012\075\013" +
    "\107\015\115\001\001\000\012\006\233\012\075\013\107" +
    "\015\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    Ventana v=new Ventana();    

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CANT_PLURALES ::= QUINCE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("15"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CANT_PLURALES ::= CATORCE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("14"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CANT_PLURALES ::= TRECE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("13"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CANT_PLURALES ::= DOCE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("12"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CANT_PLURALES ::= ONCE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("11"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CANT_PLURALES ::= DIEZ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("10"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CANT_PLURALES ::= NUEVE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("9"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CANT_PLURALES ::= OCHO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("8"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CANT_PLURALES ::= SIETE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("7"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CANT_PLURALES ::= SEIS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("6"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CANT_PLURALES ::= CINCO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("5"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CANT_PLURALES ::= CUATRO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("4"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CANT_PLURALES ::= TRES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("3"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CANT_PLURALES ::= DOS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("2"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANT_PLURALES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CANTIDAD_CORRECTO_A ::= CANT_PLURALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANTIDAD_CORRECTO_A",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CANTIDAD_CORRECTO_A ::= CANT_UNA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("1"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANTIDAD_CORRECTO_A",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CANTIDAD_CORRECTO_O ::= CANT_PLURALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANTIDAD_CORRECTO_O",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CANTIDAD_CORRECTO_O ::= CANT_UN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.cantidadesPlatillos.add("1"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CANTIDAD_CORRECTO_O",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PLATILLO ::= CANT_UNA VAMPIRO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una vampiro. \n Ejemplo: ' ...quiero 'un' vampiro'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PLATILLO ::= CANTIDAD_CORRECTO_O VAMPIRO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,27");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // PLATILLO ::= CANT_UNA JUGO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una jugo. \n Ejemplo: ' ...quiero 'un' jugo'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PLATILLO ::= CANTIDAD_CORRECTO_O JUGO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,26");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PLATILLO ::= CANT_UN PIÑA_COLADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir un piña colada. \n Ejemplo: ' ...quiero 'una' piña colada'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PLATILLO ::= CANTIDAD_CORRECTO_A PIÑA_COLADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,25");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PLATILLO ::= CANT_UN VICTORIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir un victoria. \n Ejemplo: ' ...quiero 'una' victoria'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PLATILLO ::= CANTIDAD_CORRECTO_A VICTORIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,24");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PLATILLO ::= CANT_UN CORONA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir un corona. \n Ejemplo: ' ...quiero 'una' corona'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PLATILLO ::= CANTIDAD_CORRECTO_A CORONA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,23");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PLATILLO ::= CANT_UN COCA_COLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir un coca cola. \n Ejemplo: ' ...quiero 'una' coca cola'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PLATILLO ::= CANTIDAD_CORRECTO_A COCA_COLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,22");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PLATILLO ::= CANT_UN NARANJADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir un naranjada. \n Ejemplo: ' ...quiero 'una' naranjada'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PLATILLO ::= CANTIDAD_CORRECTO_A NARANJADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,21");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PLATILLO ::= CANT_UN LIMONADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir un limonada. \n Ejemplo: ' ...quiero 'una' limonada'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PLATILLO ::= CANTIDAD_CORRECTO_A LIMONADA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,20");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PLATILLO ::= CANT_UNA MARTINI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una martini. \n Ejemplo: ' ...quiero 'un' martini'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PLATILLO ::= CANTIDAD_CORRECTO_O MARTINI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,19");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PLATILLO ::= CANT_UNA EXPRESSO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una expresso. \n Ejemplo: ' ...quiero 'un' expresso'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PLATILLO ::= CANTIDAD_CORRECTO_O EXPRESSO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,18");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PLATILLO ::= CANT_UNA CAFE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una cafe. \n Ejemplo: ' ...quiero 'un' cafe'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PLATILLO ::= CANTIDAD_CORRECTO_O CAFE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,17");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PLATILLO ::= CANT_UNA CHURROS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una churro. \n Ejemplo: ' ...quiero 'un' churro'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PLATILLO ::= CANTIDAD_CORRECTO_O CHURROS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,15");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PLATILLO ::= CANT_UNA PIE_QUESO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una pie de queso. \n Ejemplo: ' ...quiero 'un' pie de queso'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PLATILLO ::= CANTIDAD_CORRECTO_O PIE_QUESO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,14");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PLATILLO ::= CANT_UNA PIE_MORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una pie de mora. \n Ejemplo: ' ...quiero 'un' pie de mora'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PLATILLO ::= CANTIDAD_CORRECTO_O PIE_MORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,13");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PLATILLO ::= CANT_UNA PIE_FRESA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una pie de fresa. \n Ejemplo: ' ...quiero 'un' pie de fresa'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PLATILLO ::= CANTIDAD_CORRECTO_O PIE_FRESA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,12");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PLATILLO ::= CANT_UNA PIE_LIMON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una pie de limon. \n Ejemplo: ' ...quiero 'un' pie de limon'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PLATILLO ::= CANTIDAD_CORRECTO_O PIE_LIMON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,11");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PLATILLO ::= CANT_UNA HELADO_CACAO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una helado de cacao. \n Ejemplo: ' ...quiero 'un' helado de cacao'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PLATILLO ::= CANTIDAD_CORRECTO_O HELADO_CACAO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,10");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PLATILLO ::= CANT_UNA FONDANT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una fondant. \n Ejemplo: ' ...quiero 'un' fondant'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PLATILLO ::= CANTIDAD_CORRECTO_O FONDANT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,9");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PLATILLO ::= CANT_UN FRUTA_CARAMELO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir un fruta en caramelo. \n Ejemplo: ' ...quiero 'una' fruta en caramelo'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PLATILLO ::= CANTIDAD_CORRECTO_A FRUTA_CARAMELO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,8");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PLATILLO ::= CANT_UNA HELADO_VAINILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una helado de vainilla. \n Ejemplo: ' ...quiero 'un' helado de vainilla'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PLATILLO ::= CANTIDAD_CORRECTO_O HELADO_VAINILLA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,7");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PLATILLO ::= CANT_UNA TERIYAKI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una teriyaki. \n Ejemplo: ' ...quiero 'un' teriyaki'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PLATILLO ::= CANTIDAD_CORRECTO_O TERIYAKI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,6");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PLATILLO ::= CANT_UN HAMBURGUESA_ARROZ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir un hamburguesa de arroz. \n Ejemplo: ' ...quiero 'una' hamburguesa de arroz'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PLATILLO ::= CANTIDAD_CORRECTO_A HAMBURGUESA_ARROZ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,5");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PLATILLO ::= CANT_UNA BOMBAZO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una bombazo. \n Ejemplo: ' ...quiero 'un' bombazo'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PLATILLO ::= CANTIDAD_CORRECTO_O BOMBAZO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,4");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PLATILLO ::= CANT_UNA CAMARONITO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una camaronito. \n Ejemplo: ' ...quiero 'un' camaronito'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PLATILLO ::= CANTIDAD_CORRECTO_O CAMARONITO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,3");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PLATILLO ::= CANT_UNA SUSHI_RES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una sushi de res. \n Ejemplo: ' ...quiero 'un' sushi de res'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PLATILLO ::= CANTIDAD_CORRECTO_O SUSHI_RES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,2");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PLATILLO ::= CANT_UNA SUSHI_POLLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una sushi de pollo. \n Ejemplo: ' ...quiero 'un' sushi de pollo'\n");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PLATILLO ::= CANTIDAD_CORRECTO_O SUSHI_POLLO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,1");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PLATILLO ::= CANT_UNA SUSHI_CAMARON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    /*Errores platillo 0*/
                        v.genErrores.add("Error semántico 1. LINEA:"+(sright+1)+"\n No es posible pedir una sushi de camaron. \n Ejemplo: ' ...quiero 'un' sushi de camaron'\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PLATILLO ::= CANTIDAD_CORRECTO_O SUSHI_CAMARON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
                        /*Agregar a la cuenta*/
                        v.codObjPeticion.add("add,cuenta,0");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PLATILLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO Y PLATILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO PLATILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO Coma PLATILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENT_HACER_PEDIDO ::= SENT_HACER_PEDIDO QUIERO PLATILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENT_HACER_PEDIDO ::= QUIERO PLATILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_HACER_PEDIDO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENT_DICTAR_MENU ::= LEER CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce la unión en la oración. \n Ejemplo: 'OYE SANJI LEER LA CARTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENT_DICTAR_MENU ::= LEER MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce la unión en la oración. \n Ejemplo: 'OYE SANJI LEER EL MENU POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENT_DICTAR_MENU ::= LEER LA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se especifica el objeto a leer. \n Ejemplo: 'OYE SANJI LEER LA CARTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENT_DICTAR_MENU ::= LEER EL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se especifica el objeto a leer. \n Ejemplo: 'OYE SANJI LEER EL MENU POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENT_DICTAR_MENU ::= LEER LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENT_DICTAR_MENU ::= LEER EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DICTAR_MENU",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENT_MOSTRAR_MENU ::= LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición. \n Ejemplo: 'OYE SANJI MOSTRAR LA CARTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENT_MOSTRAR_MENU ::= EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición. \n Ejemplo: 'OYE SANJI MOSTRAR EL MENU POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENT_MOSTRAR_MENU ::= VER LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición. \n Ejemplo: 'OYE SANJI QUIERO VER LA CARTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENT_MOSTRAR_MENU ::= VER EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición. \n Ejemplo: 'OYE SANJI QUIERO VER EL MENU POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENT_MOSTRAR_MENU ::= MOSTRAR EL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce la petición. \n Ejemplo: 'OYE SANJI MOSTRAR EL MENU POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENT_MOSTRAR_MENU ::= QUIERO VER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce la petición. \n Ejemplo: 'OYE SANJI QUIERO VER LA CUENTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENT_MOSTRAR_MENU ::= QUIERO VER EL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce la solicitud de acción. \n Ejemplo: 'OYE SANJI QUIERO VER EL MENU POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENT_MOSTRAR_MENU ::= MOSTRAR LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENT_MOSTRAR_MENU ::= MOSTRAR EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENT_MOSTRAR_MENU ::= QUIERO VER LA CARTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENT_MOSTRAR_MENU ::= QUIERO VER EL MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,menu, , ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_MOSTRAR_MENU",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT_DAR_CUENTA ::= CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce la solicitud de acción. \n Ejemplo: 'OYE SANJI QUIERO LA CUENTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENT_DAR_CUENTA ::= LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce la solicitud de acción. \n Ejemplo: 'OYE SANJI QUIERO LA CUENTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENT_DAR_CUENTA ::= MOSTRAR LA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No especifica lo que requiere. \n Ejemplo: 'OYE SANJI MOSTRAR LA CUENTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENT_DAR_CUENTA ::= TRAER LA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No especifica lo que requiere. \n Ejemplo: 'OYE SANJI TRAER LA CUENTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENT_DAR_CUENTA ::= QUIERO LA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No especifica lo que requiere. \n Ejemplo: 'OYE SANJI QUIERO LA CUENTA POR FAVOR' "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENT_DAR_CUENTA ::= MOSTRAR LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,cuenta,mesa, ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENT_DAR_CUENTA ::= TRAER LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,cuenta,mesa, ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENT_DAR_CUENTA ::= QUIERO LA CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("show,cuenta,mesa, ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_DAR_CUENTA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // UTENCILIOS ::= TENEDORES 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("traer,mesa,tene, "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UTENCILIOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // UTENCILIOS ::= CUCHARAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("traer,mesa,cuch, "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UTENCILIOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // UTENCILIOS ::= SERVILLETAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("traer,mesa,serv, "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UTENCILIOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // UTENCILIOS ::= VASOS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("traer,mesa,vaso, "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UTENCILIOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS ::= TRAER UTENCILIOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS ::= SENT_DICTAR_MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(3);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS ::= SENT_DAR_CUENTA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(2);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= SENT_MOSTRAR_MENU 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(1);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= SENT_HACER_PEDIDO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.audio.add(0);  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MESAS ::= MESAD 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("entregar,mesad, , "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MESAS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MESAS ::= MESAC 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("entregar,mesac, , "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MESAS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MESAS ::= MESAB 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("entregar,mesab, , "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MESAS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MESAS ::= MESAA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("entregar,mesaa, , "); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MESAS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= OYE SANJI POR FAVOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n Debe de incluir peticiones en su pedido.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO ::= OYE SANJI POR FAVOR SENTENCIAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n Estructura de oraciones incorrecta.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= SENTENCIAS POR FAVOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= OYE SENTENCIAS POR FAVOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= SANJI SENTENCIAS POR FAVOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el inicio de la petición.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= SANJI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n Estructura de oraciones incorrecra.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= OYE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n Estructura de oraciones incorrecra.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= OYE SANJI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n Estructura de oraciones incorrecra.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= OYE SANJI SENTENCIAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el fin de la petición.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= OYE SANJI SENTENCIAS FAVOR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el fin de la petición.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= OYE SANJI SENTENCIAS POR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.genErrores.add("Error sintáctico 1. LINEA:"+(sright+1)+"\n No se reconoce el fin de la petición.\n Ejemplo: 'OYE SANJI QUIERO UN SUSHI DE CAMARÓN POR FAVOR'\n"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= ADIOS SANJI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("free,marvin,mesa, "); v.delete=true;  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= LISTO MESAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= LISTO SANJI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 v.codObjPeticion.add("free,marvin,mesa, ");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= OYE SANJI SENTENCIAS POR FAVOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

