/* The following code was generated by JFlex 1.4.3 on 11/12/20 02:28 PM */


package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/12/20 02:28 PM from the specification file
 * <tt>C:/FriendlyCook/FriendlyCook/src/codigo/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  2, 41,  0,  0,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0, 40, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 10,  1,  1,  1,  1,  1,  1,  1, 13, 12,  1,  1,  1, 11, 21, 
     1, 24,  1,  5,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1, 
     1,  6, 34, 26, 30, 17, 37, 35, 25,  9,  8, 36, 27, 18,  7, 19, 
    29, 22, 16, 14, 15, 23, 31,  1, 38, 20, 28,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1, 39,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\2\3\7\1\1\4\11\1\1\2"+
    "\1\1\1\2\1\5\10\1\1\6\4\1\1\7\5\1"+
    "\1\10\4\1\1\11\1\1\16\0\1\1\1\3\11\1"+
    "\1\12\2\1\1\13\5\1\1\14\1\15\2\1\1\16"+
    "\1\1\1\17\25\0\4\1\1\20\7\1\30\0\1\1"+
    "\1\21\4\1\1\22\1\23\1\1\31\0\1\24\1\0"+
    "\1\20\1\1\1\25\1\26\1\0\1\27\11\0\1\30"+
    "\64\0\1\31\25\0\1\32\6\0\1\33\7\0\1\34"+
    "\1\0\1\35\1\0\1\36\5\0\1\37\1\40\6\0"+
    "\1\41\1\42\6\0\1\43\2\0\1\44\11\0\1\45"+
    "\7\0\1\46\1\0\1\47\1\50\3\0\1\51\1\0"+
    "\1\52\1\53\1\54\1\55\13\0\1\56\4\0\1\57"+
    "\3\0\1\60\3\0\1\61\6\0\1\62\1\63\1\0"+
    "\1\64\1\0\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[388];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\124\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
    "\0\u03c6\0\176\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2"+
    "\0\u04ec\0\u0516\0\124\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8"+
    "\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738"+
    "\0\u0762\0\u078c\0\124\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e"+
    "\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae"+
    "\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe"+
    "\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\124\0\u0bfa\0\u0c24"+
    "\0\124\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\124\0\124"+
    "\0\u0d20\0\u0d4a\0\124\0\u0d74\0\124\0\u0d9e\0\u0dc8\0\u0df2"+
    "\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42"+
    "\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092"+
    "\0\u10bc\0\u10e6\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2"+
    "\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332"+
    "\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404\0\u142e\0\u1458\0\u1482"+
    "\0\u14ac\0\u14d6\0\u1500\0\u152a\0\u1554\0\u157e\0\u15a8\0\u15d2"+
    "\0\u15fc\0\u1626\0\u1650\0\u167a\0\u16a4\0\u16ce\0\u16f8\0\124"+
    "\0\u1722\0\u174c\0\u1776\0\u17a0\0\124\0\124\0\u17ca\0\u17f4"+
    "\0\u181e\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944"+
    "\0\u196e\0\u1998\0\u19c2\0\u19ec\0\u1a16\0\u1a40\0\u1a6a\0\u1a94"+
    "\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c\0\u1b66\0\u1b90\0\u1bba\0\u1be4"+
    "\0\124\0\u1c0e\0\124\0\u1c38\0\124\0\124\0\u1c62\0\52"+
    "\0\u1c8c\0\u1cb6\0\u1ce0\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88\0\u1db2"+
    "\0\u1ddc\0\52\0\u1e06\0\u1e30\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8"+
    "\0\u1f02\0\u1f2c\0\u1f56\0\u1f80\0\u1faa\0\u1fd4\0\u1ffe\0\u2028"+
    "\0\u2052\0\u207c\0\u20a6\0\u20d0\0\u20fa\0\u2124\0\u214e\0\u2178"+
    "\0\u21a2\0\u21cc\0\u21f6\0\u2220\0\u224a\0\u2274\0\u229e\0\u22c8"+
    "\0\u22f2\0\u231c\0\u2346\0\u2370\0\u239a\0\u23c4\0\u23ee\0\u2418"+
    "\0\u2442\0\u246c\0\u2496\0\u24c0\0\u24ea\0\u2514\0\u253e\0\u2568"+
    "\0\u2592\0\u25bc\0\u25e6\0\u2610\0\u263a\0\u2664\0\52\0\u268e"+
    "\0\u26b8\0\u26e2\0\u270c\0\u2736\0\u2760\0\u278a\0\u27b4\0\u27de"+
    "\0\u2808\0\u2832\0\u285c\0\u2886\0\u28b0\0\u28da\0\u2904\0\u292e"+
    "\0\u2958\0\u2982\0\u29ac\0\u29d6\0\52\0\u2a00\0\u2a2a\0\u2a54"+
    "\0\u2a7e\0\u2aa8\0\u2ad2\0\52\0\u2afc\0\u2b26\0\u2b50\0\u2b7a"+
    "\0\u2ba4\0\u2bce\0\u2bf8\0\52\0\u2c22\0\52\0\u2c4c\0\52"+
    "\0\u2c76\0\u2ca0\0\u2cca\0\u2cf4\0\u2d1e\0\52\0\52\0\u2d48"+
    "\0\u2d72\0\u2d9c\0\u2dc6\0\u2df0\0\u2e1a\0\52\0\52\0\u2e44"+
    "\0\u2e6e\0\u2e98\0\u2ec2\0\u2eec\0\u2f16\0\52\0\u2f40\0\u2f6a"+
    "\0\52\0\u2f94\0\u2fbe\0\u2fe8\0\u3012\0\u303c\0\u3066\0\u3090"+
    "\0\u30ba\0\u30e4\0\52\0\u310e\0\u3138\0\u3162\0\u318c\0\u31b6"+
    "\0\u31e0\0\u320a\0\52\0\u3234\0\52\0\52\0\u325e\0\u3288"+
    "\0\u32b2\0\52\0\u32dc\0\52\0\52\0\52\0\52\0\u3306"+
    "\0\u3330\0\u335a\0\u3384\0\u33ae\0\u33d8\0\u3402\0\u342c\0\u3456"+
    "\0\u3480\0\u34aa\0\52\0\u34d4\0\u34fe\0\u3528\0\u3552\0\52"+
    "\0\u357c\0\u35a6\0\u35d0\0\52\0\u35fa\0\u3624\0\u364e\0\52"+
    "\0\u3678\0\u36a2\0\u36cc\0\u36f6\0\u3720\0\u374a\0\52\0\52"+
    "\0\u3774\0\52\0\u379e\0\52";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[388];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\3\1\7"+
    "\6\3\1\10\1\11\1\12\1\13\1\3\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\3"+
    "\1\25\1\26\1\3\1\27\1\2\3\3\1\30\2\3"+
    "\1\31\1\4\53\0\1\3\3\0\33\3\2\0\6\3"+
    "\4\0\3\4\44\0\1\4\2\0\2\4\1\32\44\0"+
    "\1\4\1\0\1\3\3\0\1\3\1\33\3\3\1\34"+
    "\25\3\2\0\6\3\3\0\1\3\3\0\22\3\1\35"+
    "\10\3\2\0\6\3\3\0\1\3\3\0\1\3\1\33"+
    "\2\3\1\36\7\3\1\37\5\3\1\40\10\3\2\0"+
    "\6\3\3\0\1\3\3\0\13\3\1\41\17\3\2\0"+
    "\6\3\3\0\1\3\3\0\14\3\1\42\16\3\2\0"+
    "\6\3\3\0\1\3\3\0\26\3\1\43\4\3\2\0"+
    "\6\3\3\0\1\3\3\0\2\3\1\44\14\3\1\45"+
    "\5\3\1\46\5\3\2\0\6\3\3\0\1\3\3\0"+
    "\17\3\1\45\13\3\2\0\6\3\3\0\1\3\3\0"+
    "\22\3\1\47\10\3\2\0\6\3\3\0\1\3\3\0"+
    "\2\3\1\50\30\3\2\0\6\3\3\0\1\3\3\0"+
    "\22\3\1\51\10\3\2\0\6\3\3\0\1\3\3\0"+
    "\1\3\1\52\31\3\2\0\6\3\3\0\1\3\3\0"+
    "\1\3\1\53\2\3\1\54\15\3\1\55\10\3\2\0"+
    "\6\3\3\0\1\3\3\0\1\3\1\56\14\3\1\57"+
    "\14\3\2\0\6\3\3\0\1\3\3\0\14\3\1\60"+
    "\1\3\1\61\14\3\2\0\6\3\3\0\1\3\3\0"+
    "\4\3\1\62\7\3\1\63\1\3\1\64\14\3\2\0"+
    "\6\3\11\0\1\65\1\66\5\0\1\67\1\70\1\0"+
    "\1\71\1\72\6\0\1\73\1\74\1\75\1\0\1\76"+
    "\1\77\1\100\2\0\1\101\2\0\1\102\5\0\1\3"+
    "\3\0\1\3\1\103\31\3\2\0\6\3\52\0\1\104"+
    "\2\0\1\3\3\0\2\3\1\105\30\3\2\0\6\3"+
    "\3\0\1\3\3\0\6\3\1\106\24\3\2\0\6\3"+
    "\3\0\1\3\3\0\14\3\1\107\16\3\2\0\6\3"+
    "\3\0\1\3\3\0\14\3\1\110\16\3\2\0\6\3"+
    "\3\0\1\3\3\0\4\3\1\111\26\3\2\0\6\3"+
    "\3\0\1\3\3\0\11\3\1\112\21\3\2\0\6\3"+
    "\3\0\1\3\3\0\1\3\1\113\12\3\1\64\16\3"+
    "\2\0\6\3\3\0\1\3\3\0\1\3\1\114\31\3"+
    "\2\0\6\3\3\0\1\3\3\0\25\3\1\115\5\3"+
    "\2\0\6\3\3\0\1\3\3\0\14\3\1\116\16\3"+
    "\2\0\6\3\3\0\1\3\3\0\24\3\1\117\6\3"+
    "\2\0\6\3\3\0\1\3\3\0\4\3\1\120\26\3"+
    "\2\0\6\3\3\0\1\3\3\0\1\3\1\121\31\3"+
    "\2\0\6\3\3\0\1\3\3\0\4\3\1\122\26\3"+
    "\2\0\6\3\3\0\1\3\3\0\25\3\1\123\5\3"+
    "\2\0\6\3\3\0\1\3\3\0\12\3\1\124\20\3"+
    "\2\0\6\3\3\0\1\3\3\0\2\3\1\125\30\3"+
    "\2\0\6\3\3\0\1\3\3\0\1\3\1\126\31\3"+
    "\2\0\6\3\3\0\1\3\3\0\11\3\1\127\21\3"+
    "\2\0\6\3\3\0\1\3\3\0\11\3\1\130\21\3"+
    "\2\0\6\3\3\0\1\3\3\0\30\3\1\131\1\132"+
    "\1\3\2\0\6\3\3\0\1\3\3\0\13\3\1\133"+
    "\17\3\2\0\6\3\3\0\1\3\3\0\14\3\1\134"+
    "\16\3\2\0\6\3\3\0\1\3\3\0\11\3\1\135"+
    "\13\3\1\115\5\3\2\0\6\3\10\0\1\136\72\0"+
    "\1\137\51\0\1\140\42\0\1\141\1\142\76\0\1\143"+
    "\11\0\1\144\51\0\1\145\12\0\1\146\36\0\1\147"+
    "\2\0\1\150\11\0\1\151\5\0\1\152\31\0\1\153"+
    "\51\0\1\154\67\0\1\155\30\0\1\156\2\0\1\157"+
    "\63\0\1\160\46\0\1\161\2\0\1\162\27\0\1\3"+
    "\3\0\32\3\1\163\2\0\6\3\2\0\51\104\2\0"+
    "\1\3\3\0\3\3\1\164\27\3\2\0\6\3\3\0"+
    "\1\3\3\0\7\3\1\165\23\3\2\0\6\3\3\0"+
    "\1\3\3\0\32\3\1\115\2\0\6\3\3\0\1\3"+
    "\3\0\12\3\1\115\20\3\2\0\6\3\3\0\1\3"+
    "\3\0\11\3\1\135\21\3\2\0\6\3\3\0\1\3"+
    "\3\0\24\3\1\166\6\3\2\0\6\3\3\0\1\3"+
    "\3\0\14\3\1\167\16\3\2\0\6\3\3\0\1\3"+
    "\3\0\26\3\1\170\4\3\2\0\6\3\3\0\1\3"+
    "\3\0\14\3\1\135\16\3\2\0\6\3\3\0\1\3"+
    "\3\0\16\3\1\135\14\3\2\0\6\3\3\0\1\3"+
    "\3\0\2\3\1\44\11\3\1\171\16\3\2\0\6\3"+
    "\3\0\1\3\3\0\14\3\1\171\16\3\2\0\6\3"+
    "\3\0\1\3\3\0\14\3\1\172\16\3\2\0\6\3"+
    "\3\0\1\3\3\0\16\3\1\173\14\3\2\0\6\3"+
    "\3\0\1\3\3\0\25\3\1\117\5\3\2\0\6\3"+
    "\3\0\1\3\3\0\12\3\1\174\20\3\2\0\6\3"+
    "\3\0\1\3\3\0\11\3\1\175\21\3\2\0\6\3"+
    "\3\0\1\3\3\0\4\3\1\176\26\3\2\0\6\3"+
    "\3\0\1\3\3\0\27\3\1\135\3\3\2\0\6\3"+
    "\22\0\1\177\74\0\1\200\24\0\1\201\54\0\1\202"+
    "\50\0\1\203\66\0\1\204\34\0\1\205\53\0\1\206"+
    "\62\0\1\207\40\0\1\210\22\0\1\211\25\0\1\212"+
    "\50\0\1\213\11\0\1\214\46\0\1\215\44\0\1\216"+
    "\50\0\1\217\25\0\1\220\35\0\1\221\40\0\1\222"+
    "\61\0\1\223\41\0\1\224\56\0\1\225\31\0\1\226"+
    "\43\0\1\3\3\0\16\3\1\227\14\3\2\0\6\3"+
    "\3\0\1\3\3\0\4\3\1\230\26\3\2\0\6\3"+
    "\3\0\1\3\3\0\10\3\1\230\22\3\2\0\6\3"+
    "\3\0\1\3\3\0\4\3\1\231\26\3\2\0\6\3"+
    "\3\0\1\3\3\0\15\3\1\232\15\3\2\0\6\3"+
    "\3\0\1\3\3\0\4\3\1\233\26\3\2\0\6\3"+
    "\3\0\1\3\3\0\13\3\1\234\17\3\2\0\6\3"+
    "\3\0\1\3\3\0\13\3\1\235\17\3\2\0\6\3"+
    "\3\0\1\3\3\0\13\3\1\44\17\3\2\0\6\3"+
    "\3\0\1\3\3\0\13\3\1\117\17\3\2\0\6\3"+
    "\3\0\1\3\3\0\4\3\1\236\26\3\2\0\6\3"+
    "\3\0\1\3\3\0\31\3\1\237\1\3\2\0\6\3"+
    "\10\0\1\240\66\0\1\241\57\0\1\242\36\0\1\243"+
    "\44\0\1\244\60\0\1\245\50\0\1\246\4\0\1\247"+
    "\67\0\1\250\15\0\1\251\51\0\1\252\64\0\1\253"+
    "\63\0\1\254\41\0\1\255\34\0\1\256\63\0\1\257"+
    "\54\0\1\260\64\0\1\261\21\0\1\262\75\0\1\263"+
    "\54\0\1\264\33\0\1\265\74\0\1\266\26\0\1\267"+
    "\70\0\1\270\14\0\1\3\3\0\13\3\1\271\17\3"+
    "\2\0\6\3\3\0\1\3\2\0\1\272\33\3\2\0"+
    "\6\3\3\0\1\3\3\0\14\3\1\273\16\3\2\0"+
    "\6\3\3\0\1\3\3\0\27\3\1\274\3\3\2\0"+
    "\6\3\3\0\1\3\3\0\16\3\1\275\14\3\2\0"+
    "\6\3\3\0\1\3\3\0\16\3\1\276\14\3\2\0"+
    "\6\3\11\0\1\277\103\0\1\300\21\0\1\301\66\0"+
    "\1\302\47\0\1\303\46\0\1\304\41\0\1\305\57\0"+
    "\1\306\61\0\1\307\60\0\1\310\33\0\1\311\72\0"+
    "\1\312\33\0\1\313\35\0\1\314\74\0\1\315\37\0"+
    "\1\316\40\0\1\317\63\0\1\320\62\0\1\321\40\0"+
    "\1\322\41\0\1\323\63\0\1\324\34\0\1\325\51\0"+
    "\1\326\51\0\1\327\101\0\1\330\14\0\1\3\3\0"+
    "\1\3\1\172\31\3\2\0\6\3\12\0\1\331\77\0"+
    "\1\332\42\0\1\333\30\0\1\334\61\0\1\335\42\0"+
    "\1\336\53\0\1\337\60\0\1\340\54\0\1\341\51\0"+
    "\1\342\50\0\1\343\35\0\1\344\66\0\1\345\51\0"+
    "\1\346\34\0\1\347\65\0\1\350\3\0\1\351\4\0"+
    "\1\352\11\0\1\353\27\0\1\354\64\0\1\355\33\0"+
    "\1\356\51\0\1\357\65\0\1\360\36\0\1\361\37\0"+
    "\1\362\63\0\1\363\36\0\1\364\64\0\1\365\51\0"+
    "\1\366\74\0\1\367\23\0\1\370\44\0\1\371\61\0"+
    "\1\372\73\0\1\373\44\0\1\374\22\0\1\375\50\0"+
    "\1\376\104\0\1\377\43\0\1\u0100\34\0\1\u0101\71\0"+
    "\1\u0102\36\0\1\u0103\55\0\1\u0104\33\0\1\u0105\60\0"+
    "\1\u0106\64\0\1\u0107\37\0\1\u0108\53\0\1\u0109\37\0"+
    "\1\u010a\63\0\1\u010b\35\0\1\u010c\61\0\1\u010d\36\0"+
    "\1\u010e\103\0\1\u010f\33\0\1\u0110\14\0\1\u0111\32\0"+
    "\1\u0112\44\0\1\u0113\63\0\1\u0114\67\0\1\u0115\30\0"+
    "\1\u0116\60\0\1\u0117\43\0\1\u0118\41\0\1\u0119\60\0"+
    "\1\u011a\37\0\1\u011b\104\0\1\u011c\16\0\1\u011d\63\0"+
    "\1\u011e\52\0\1\u011f\52\0\1\u0120\50\0\1\u0121\36\0"+
    "\1\u0122\76\0\1\u0123\57\0\1\u0124\16\0\1\u0125\104\0"+
    "\1\u0126\42\0\1\u0127\60\0\1\u0128\42\0\1\u0129\25\0"+
    "\1\u012a\64\0\1\u012b\53\0\1\u012c\51\0\1\u012d\67\0"+
    "\1\u012e\51\0\1\u012f\30\0\1\u0130\52\0\1\u0131\62\0"+
    "\1\u0132\4\0\1\u0133\31\0\1\u0134\56\0\1\u0135\66\0"+
    "\1\u0136\51\0\1\u0137\16\0\1\u0138\61\0\1\u0139\56\0"+
    "\1\u013a\44\0\1\u013b\71\0\1\u013c\34\0\1\u013d\71\0"+
    "\1\u013e\16\0\1\u013f\51\0\1\u0140\104\0\1\u0141\26\0"+
    "\1\u0142\66\0\1\u0143\34\0\1\u0144\41\0\1\u0145\61\0"+
    "\1\u0146\41\0\1\u0147\51\0\1\u0148\66\0\1\u0149\45\0"+
    "\1\u014a\73\0\1\u014b\33\0\1\u014c\35\0\1\u014d\50\0"+
    "\1\u014e\51\0\1\u014f\75\0\1\u0150\37\0\1\u0151\53\0"+
    "\1\u0152\70\0\1\u0153\43\0\1\u0154\57\0\1\u0155\51\0"+
    "\1\u0156\16\0\1\u0157\75\0\1\u0158\30\0\1\u0159\101\0"+
    "\1\u015a\21\0\1\u015b\101\0\1\u015c\51\0\1\u015d\51\0"+
    "\1\u015e\51\0\1\u015f\41\0\1\u0160\26\0\1\u0161\51\0"+
    "\1\u0162\66\0\1\u0163\64\0\1\u0164\21\0\1\u0165\52\0"+
    "\1\u0166\63\0\1\u0167\51\0\1\u0168\52\0\1\u0169\47\0"+
    "\1\u016a\72\0\1\u016b\31\0\1\u016c\53\0\1\u016d\37\0"+
    "\1\u016e\60\0\1\u016f\72\0\1\u0170\31\0\1\u0171\53\0"+
    "\1\u0172\34\0\1\u0173\104\0\1\u0174\43\0\1\u0175\36\0"+
    "\1\u0176\64\0\1\u0177\25\0\1\u0178\62\0\1\u0179\64\0"+
    "\1\u017a\24\0\1\u017b\66\0\1\u017c\46\0\1\u017d\37\0"+
    "\1\u017e\104\0\1\u017f\51\0\1\u0180\33\0\1\u0181\67\0"+
    "\1\u0182\44\0\1\u0183\56\0\1\u0184\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14280];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\62\1\16\0\33\1\25\0\14\1\30\0"+
    "\11\1\31\0\1\1\1\0\4\1\1\0\1\11\11\0"+
    "\1\11\64\0\1\11\25\0\1\11\6\0\1\11\7\0"+
    "\1\11\1\0\1\11\1\0\1\11\5\0\2\11\6\0"+
    "\2\11\6\0\1\11\2\0\1\11\11\0\1\11\7\0"+
    "\1\11\1\0\2\11\3\0\1\11\1\0\4\11\13\0"+
    "\1\11\4\0\1\11\3\0\1\11\3\0\1\11\6\0"+
    "\2\11\1\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[388];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type,yyline,yycolumn,value);
    }
    private Symbol symbol(int type){
        return new Symbol(type,yyline,yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 45: 
          { return new Symbol(sym.PIÑA_COLADA,yychar,yyline,yytext());
          }
        case 54: break;
        case 21: 
          { return new Symbol(sym.QUIERO,yychar,yyline,yytext());
          }
        case 55: break;
        case 53: 
          { return new Symbol(sym.HAMBURGUESA_ARROZ,yychar,yyline,yytext());
          }
        case 56: break;
        case 1: 
          { return new Symbol(sym.CADENA,yychar,yyline,yytext());
          }
        case 57: break;
        case 48: 
          { return new Symbol(sym.HELADO_CACAO,yychar,yyline,yytext());
          }
        case 58: break;
        case 33: 
          { return new Symbol(sym.COCA_COLA,yychar,yyline,yytext());
          }
        case 59: break;
        case 51: 
          { return new Symbol(sym.FRUTA_CARAMELO,yychar,yyline,yytext());
          }
        case 60: break;
        case 35: 
          { return new Symbol(sym.VICTORIA,yychar,yyline,yytext());
          }
        case 61: break;
        case 24: 
          { return new Symbol(sym.CAFE,yychar,yyline,yytext());
          }
        case 62: break;
        case 37: 
          { return new Symbol(sym.PIE_MORA,yychar,yyline,yytext());
          }
        case 63: break;
        case 8: 
          { return new Symbol(sym.LA,yychar,yyline,yytext());
          }
        case 64: break;
        case 30: 
          { return new Symbol(sym.FONDANT,yychar,yyline,yytext());
          }
        case 65: break;
        case 17: 
          { return new Symbol(sym.SANJI,yychar,yyline,yytext());
          }
        case 66: break;
        case 28: 
          { return new Symbol(sym.VAMPIRO,yychar,yyline,yytext());
          }
        case 67: break;
        case 26: 
          { return new Symbol(sym.MARTINI,yychar,yyline,yytext());
          }
        case 68: break;
        case 10: 
          { return new Symbol(sym.OYE,yychar,yyline,yytext());
          }
        case 69: break;
        case 42: 
          { return new Symbol(sym.PIE_QUESO,yychar,yyline,yytext());
          }
        case 70: break;
        case 13: 
          { return new Symbol(sym.LOS,yychar,yyline,yytext());
          }
        case 71: break;
        case 47: 
          { return new Symbol(sym.DULCE_LECHE,yychar,yyline,yytext());
          }
        case 72: break;
        case 23: 
          { return new Symbol(sym.JUGO,yychar,yyline,yytext());
          }
        case 73: break;
        case 9: 
          { return new Symbol(sym.DE,yychar,yyline,yytext());
          }
        case 74: break;
        case 36: 
          { return new Symbol(sym.NARANJADA,yychar,yyline,yytext());
          }
        case 75: break;
        case 5: 
          { return new Symbol(sym.Coma,yychar,yyline,yytext());
          }
        case 76: break;
        case 52: 
          { return new Symbol(sym.HELADO_VAINILLA,yychar,yyline,yytext());
          }
        case 77: break;
        case 12: 
          { return new Symbol(sym.LAS,yychar,yyline,yytext());
          }
        case 78: break;
        case 4: 
          { return new Symbol(sym.Y,yychar,yyline,yytext());
          }
        case 79: break;
        case 31: 
          { return new Symbol(sym.TERIYAKI,yychar,yyline,yytext());
          }
        case 80: break;
        case 46: 
          { return new Symbol(sym.SUSHI_POLLO,yychar,yyline,yytext());
          }
        case 81: break;
        case 18: 
          { return new Symbol(sym.HACER,yychar,yyline,yytext());
          }
        case 82: break;
        case 27: 
          { return new Symbol(sym.CHURROS,yychar,yyline,yytext());
          }
        case 83: break;
        case 6: 
          { return new Symbol(sym.EL,yychar,yyline,yytext());
          }
        case 84: break;
        case 50: 
          { return new Symbol(sym.CIELO_MAR_TIERRA,yychar,yyline,yytext());
          }
        case 85: break;
        case 38: 
          { return new Symbol(sym.SUSHI_RES,yychar,yyline,yytext());
          }
        case 86: break;
        case 44: 
          { return new Symbol(sym.PIE_FRESA,yychar,yyline,yytext());
          }
        case 87: break;
        case 32: 
          { return new Symbol(sym.EXPRESSO,yychar,yyline,yytext());
          }
        case 88: break;
        case 19: 
          { return new Symbol(sym.PEPSI,yychar,yyline,yytext());
          }
        case 89: break;
        case 40: 
          { return new Symbol(sym.MAR_TIERRA,yychar,yyline,yytext());
          }
        case 90: break;
        case 39: 
          { return new Symbol(sym.TRES_QUESOS,yychar,yyline,yytext());
          }
        case 91: break;
        case 34: 
          { return new Symbol(sym.LIMONADA,yychar,yyline,yytext());
          }
        case 92: break;
        case 15: 
          { return new Symbol(sym.CANT_PLURALES,yychar,yyline,yytext());
          }
        case 93: break;
        case 25: 
          { return new Symbol(sym.CORONA,yychar,yyline,yytext());
          }
        case 94: break;
        case 29: 
          { return new Symbol(sym.BOMBAZO,yychar,yyline,yytext());
          }
        case 95: break;
        case 20: 
          { return new Symbol(sym.FAVOR,yychar,yyline,yytext());
          }
        case 96: break;
        case 49: 
          { return new Symbol(sym.SUSHI_CAMARON,yychar,yyline,yytext());
          }
        case 97: break;
        case 3: 
          { /*Ignore*/
          }
        case 98: break;
        case 43: 
          { return new Symbol(sym.PIE_LIMON,yychar,yyline,yytext());
          }
        case 99: break;
        case 41: 
          { return new Symbol(sym.CAMARONITO,yychar,yyline,yytext());
          }
        case 100: break;
        case 11: 
          { return new Symbol(sym.CANT_UNA,yychar,yyline,yytext());
          }
        case 101: break;
        case 14: 
          { return new Symbol(sym.POR,yychar,yyline,yytext());
          }
        case 102: break;
        case 2: 
          { return new Symbol (sym.ERROR,yychar,yyline,yytext());
          }
        case 103: break;
        case 7: 
          { return new Symbol(sym.CANT_UN,yychar,yyline,yytext());
          }
        case 104: break;
        case 16: 
          { return new Symbol(sym.TRAER,yychar,yyline,yytext());
          }
        case 105: break;
        case 22: 
          { return new Symbol(sym.PEDIDO,yychar,yyline,yytext());
          }
        case 106: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
